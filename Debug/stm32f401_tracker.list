
stm32f401_tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003978  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003b0c  08003b0c  00013b0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003b74  08003b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001c8  20000000  08003b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000960  200001c8  08003d44  000201c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000b28  08003d44  00020b28  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000186b1  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003972  00000000  00000000  000388a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009667  00000000  00000000  0003c21b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c20  00000000  00000000  00045888  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f38  00000000  00000000  000464a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000799c  00000000  00000000  000473e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004918  00000000  00000000  0004ed7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00053694  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000022a4  00000000  00000000  00053710  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200001c8 	.word	0x200001c8
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003af4 	.word	0x08003af4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001cc 	.word	0x200001cc
 80001d0:	08003af4 	.word	0x08003af4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b97a 	b.w	80004e0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80004e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80004e8:	b086      	sub	sp, #24
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80004ea:	2401      	movs	r4, #1
 80004ec:	f10d 0316 	add.w	r3, sp, #22
 80004f0:	2664      	movs	r6, #100	; 0x64
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	9602      	str	r6, [sp, #8]
 80004f6:	4623      	mov	r3, r4
 80004f8:	9401      	str	r4, [sp, #4]
 80004fa:	2275      	movs	r2, #117	; 0x75
 80004fc:	21d0      	movs	r1, #208	; 0xd0
{
 80004fe:	4680      	mov	r8, r0
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8000500:	f000 fcf2 	bl	8000ee8 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8000504:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8000508:	2b68      	cmp	r3, #104	; 0x68
 800050a:	d132      	bne.n	8000572 <MPU6050_Init+0x8e>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800050c:	ad06      	add	r5, sp, #24
 800050e:	2700      	movs	r7, #0
 8000510:	f805 7d01 	strb.w	r7, [r5, #-1]!
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8000514:	4623      	mov	r3, r4
 8000516:	226b      	movs	r2, #107	; 0x6b
 8000518:	21d0      	movs	r1, #208	; 0xd0
 800051a:	9602      	str	r6, [sp, #8]
 800051c:	9401      	str	r4, [sp, #4]
 800051e:	9500      	str	r5, [sp, #0]
 8000520:	4640      	mov	r0, r8
 8000522:	f000 fc51 	bl	8000dc8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000526:	2307      	movs	r3, #7
 8000528:	f88d 3017 	strb.w	r3, [sp, #23]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800052c:	2219      	movs	r2, #25
 800052e:	4623      	mov	r3, r4
 8000530:	21d0      	movs	r1, #208	; 0xd0
 8000532:	9602      	str	r6, [sp, #8]
 8000534:	9401      	str	r4, [sp, #4]
 8000536:	9500      	str	r5, [sp, #0]
 8000538:	4640      	mov	r0, r8
 800053a:	f000 fc45 	bl	8000dc8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800053e:	4623      	mov	r3, r4
 8000540:	221c      	movs	r2, #28
 8000542:	21d0      	movs	r1, #208	; 0xd0
 8000544:	9602      	str	r6, [sp, #8]
 8000546:	9401      	str	r4, [sp, #4]
 8000548:	9500      	str	r5, [sp, #0]
 800054a:	4640      	mov	r0, r8
        Data = 0x00;
 800054c:	f88d 7017 	strb.w	r7, [sp, #23]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000550:	f000 fc3a 	bl	8000dc8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000554:	9602      	str	r6, [sp, #8]
 8000556:	9401      	str	r4, [sp, #4]
 8000558:	9500      	str	r5, [sp, #0]
 800055a:	4623      	mov	r3, r4
 800055c:	221b      	movs	r2, #27
 800055e:	21d0      	movs	r1, #208	; 0xd0
 8000560:	4640      	mov	r0, r8
        Data = 0x00;
 8000562:	f88d 7017 	strb.w	r7, [sp, #23]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000566:	f000 fc2f 	bl	8000dc8 <HAL_I2C_Mem_Write>
        return 0;
 800056a:	4638      	mov	r0, r7
    }
    return 1;
}
 800056c:	b006      	add	sp, #24
 800056e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return 1;
 8000572:	4620      	mov	r0, r4
 8000574:	e7fa      	b.n	800056c <MPU6050_Init+0x88>
	...

08000578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000578:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800057a:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <HAL_InitTick+0x3c>)
 800057c:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <HAL_InitTick+0x40>)
{
 800057e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000580:	7818      	ldrb	r0, [r3, #0]
 8000582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000586:	fbb3 f3f0 	udiv	r3, r3, r0
 800058a:	6810      	ldr	r0, [r2, #0]
 800058c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000590:	f000 f8aa 	bl	80006e8 <HAL_SYSTICK_Config>
 8000594:	4604      	mov	r4, r0
 8000596:	b958      	cbnz	r0, 80005b0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000598:	2d0f      	cmp	r5, #15
 800059a:	d809      	bhi.n	80005b0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800059c:	4602      	mov	r2, r0
 800059e:	4629      	mov	r1, r5
 80005a0:	f04f 30ff 	mov.w	r0, #4294967295
 80005a4:	f000 f85e 	bl	8000664 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <HAL_InitTick+0x44>)
 80005aa:	4620      	mov	r0, r4
 80005ac:	601d      	str	r5, [r3, #0]
 80005ae:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005b0:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005b2:	bd38      	pop	{r3, r4, r5, pc}
 80005b4:	20000110 	.word	0x20000110
 80005b8:	20000000 	.word	0x20000000
 80005bc:	20000004 	.word	0x20000004

080005c0 <HAL_Init>:
{
 80005c0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <HAL_Init+0x30>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005ca:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005d2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005da:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005dc:	2003      	movs	r0, #3
 80005de:	f000 f82f 	bl	8000640 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f7ff ffc8 	bl	8000578 <HAL_InitTick>
  HAL_MspInit();
 80005e8:	f002 ff1e 	bl	8003428 <HAL_MspInit>
}
 80005ec:	2000      	movs	r0, #0
 80005ee:	bd08      	pop	{r3, pc}
 80005f0:	40023c00 	.word	0x40023c00

080005f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005f4:	4a03      	ldr	r2, [pc, #12]	; (8000604 <HAL_IncTick+0x10>)
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <HAL_IncTick+0x14>)
 80005f8:	6811      	ldr	r1, [r2, #0]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	440b      	add	r3, r1
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	200001f4 	.word	0x200001f4
 8000608:	20000000 	.word	0x20000000

0800060c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800060c:	4b01      	ldr	r3, [pc, #4]	; (8000614 <HAL_GetTick+0x8>)
 800060e:	6818      	ldr	r0, [r3, #0]
}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	200001f4 	.word	0x200001f4

08000618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000618:	b538      	push	{r3, r4, r5, lr}
 800061a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800061c:	f7ff fff6 	bl	800060c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000620:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000622:	bf1c      	itt	ne
 8000624:	4b05      	ldrne	r3, [pc, #20]	; (800063c <HAL_Delay+0x24>)
 8000626:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000628:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800062a:	bf18      	it	ne
 800062c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800062e:	f7ff ffed 	bl	800060c <HAL_GetTick>
 8000632:	1b40      	subs	r0, r0, r5
 8000634:	4284      	cmp	r4, r0
 8000636:	d8fa      	bhi.n	800062e <HAL_Delay+0x16>
  {
  }
}
 8000638:	bd38      	pop	{r3, r4, r5, pc}
 800063a:	bf00      	nop
 800063c:	20000000 	.word	0x20000000

08000640 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000642:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000644:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000648:	041b      	lsls	r3, r3, #16
 800064a:	0c1b      	lsrs	r3, r3, #16
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000650:	0200      	lsls	r0, r0, #8
 8000652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000656:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800065a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800065c:	60d3      	str	r3, [r2, #12]
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000666:	b530      	push	{r4, r5, lr}
 8000668:	68dc      	ldr	r4, [r3, #12]
 800066a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000672:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000674:	2b04      	cmp	r3, #4
 8000676:	bf28      	it	cs
 8000678:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 0501 	mov.w	r5, #1
 8000680:	fa05 f303 	lsl.w	r3, r5, r3
 8000684:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000688:	bf8c      	ite	hi
 800068a:	3c03      	subhi	r4, #3
 800068c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068e:	4019      	ands	r1, r3
 8000690:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000692:	fa05 f404 	lsl.w	r4, r5, r4
 8000696:	3c01      	subs	r4, #1
 8000698:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800069a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	ea42 0201 	orr.w	r2, r2, r1
 80006a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	bfad      	iteet	ge
 80006a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	f000 000f 	andlt.w	r0, r0, #15
 80006ae:	4b06      	ldrlt	r3, [pc, #24]	; (80006c8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	bfb5      	itete	lt
 80006b6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	e000ed14 	.word	0xe000ed14

080006cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006cc:	2800      	cmp	r0, #0
 80006ce:	db08      	blt.n	80006e2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d0:	0942      	lsrs	r2, r0, #5
 80006d2:	2301      	movs	r3, #1
 80006d4:	f000 001f 	and.w	r0, r0, #31
 80006d8:	fa03 f000 	lsl.w	r0, r3, r0
 80006dc:	4b01      	ldr	r3, [pc, #4]	; (80006e4 <HAL_NVIC_EnableIRQ+0x18>)
 80006de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006e2:	4770      	bx	lr
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e8:	3801      	subs	r0, #1
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d20a      	bcs.n	8000706 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	4a07      	ldr	r2, [pc, #28]	; (8000710 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	21f0      	movs	r1, #240	; 0xf0
 80006f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000700:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000706:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000e010 	.word	0xe000e010
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000718:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800071a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071c:	f8df 818c 	ldr.w	r8, [pc, #396]	; 80008ac <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000720:	4a60      	ldr	r2, [pc, #384]	; (80008a4 <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000722:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000724:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000728:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800072a:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800072c:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000730:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000732:	42ac      	cmp	r4, r5
 8000734:	f040 80a6 	bne.w	8000884 <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000738:	684c      	ldr	r4, [r1, #4]
 800073a:	f024 0c10 	bic.w	ip, r4, #16
 800073e:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000742:	2e01      	cmp	r6, #1
 8000744:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000748:	d812      	bhi.n	8000770 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 800074a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800074c:	2603      	movs	r6, #3
 800074e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000752:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000756:	68ce      	ldr	r6, [r1, #12]
 8000758:	fa06 f60e 	lsl.w	r6, r6, lr
 800075c:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800075e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000760:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000762:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000766:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800076a:	409e      	lsls	r6, r3
 800076c:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800076e:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000770:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000772:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000774:	fa06 f60e 	lsl.w	r6, r6, lr
 8000778:	43f6      	mvns	r6, r6
 800077a:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800077e:	688f      	ldr	r7, [r1, #8]
 8000780:	fa07 f70e 	lsl.w	r7, r7, lr
 8000784:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000788:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 800078c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800078e:	d116      	bne.n	80007be <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000790:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000794:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000798:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800079c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007a0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007a4:	f04f 0c0f 	mov.w	ip, #15
 80007a8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80007ac:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007b0:	690f      	ldr	r7, [r1, #16]
 80007b2:	fa07 f70b 	lsl.w	r7, r7, fp
 80007b6:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80007ba:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80007be:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007c0:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007c2:	f004 0703 	and.w	r7, r4, #3
 80007c6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80007ca:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80007ce:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007d0:	00e6      	lsls	r6, r4, #3
 80007d2:	d557      	bpl.n	8000884 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d4:	f04f 0b00 	mov.w	fp, #0
 80007d8:	f8cd b00c 	str.w	fp, [sp, #12]
 80007dc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007e0:	4e31      	ldr	r6, [pc, #196]	; (80008a8 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80007e6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80007ea:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80007ee:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80007f2:	9703      	str	r7, [sp, #12]
 80007f4:	9f03      	ldr	r7, [sp, #12]
 80007f6:	f023 0703 	bic.w	r7, r3, #3
 80007fa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007fe:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000802:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000806:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800080a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800080e:	f04f 0e0f 	mov.w	lr, #15
 8000812:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000816:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000818:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800081c:	d039      	beq.n	8000892 <HAL_GPIO_Init+0x17e>
 800081e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000822:	42b0      	cmp	r0, r6
 8000824:	d037      	beq.n	8000896 <HAL_GPIO_Init+0x182>
 8000826:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800082a:	42b0      	cmp	r0, r6
 800082c:	d035      	beq.n	800089a <HAL_GPIO_Init+0x186>
 800082e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000832:	42b0      	cmp	r0, r6
 8000834:	d033      	beq.n	800089e <HAL_GPIO_Init+0x18a>
 8000836:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800083a:	42b0      	cmp	r0, r6
 800083c:	bf14      	ite	ne
 800083e:	2607      	movne	r6, #7
 8000840:	2604      	moveq	r6, #4
 8000842:	fa06 f60c 	lsl.w	r6, r6, ip
 8000846:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800084a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800084c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800084e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000850:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000854:	bf0c      	ite	eq
 8000856:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000858:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800085a:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800085c:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800085e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000862:	bf0c      	ite	eq
 8000864:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000866:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000868:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800086a:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800086c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000870:	bf0c      	ite	eq
 8000872:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000874:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000876:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000878:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800087a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800087c:	bf54      	ite	pl
 800087e:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000880:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000882:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000884:	3301      	adds	r3, #1
 8000886:	2b10      	cmp	r3, #16
 8000888:	f47f af4f 	bne.w	800072a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800088c:	b005      	add	sp, #20
 800088e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000892:	465e      	mov	r6, fp
 8000894:	e7d5      	b.n	8000842 <HAL_GPIO_Init+0x12e>
 8000896:	2601      	movs	r6, #1
 8000898:	e7d3      	b.n	8000842 <HAL_GPIO_Init+0x12e>
 800089a:	2602      	movs	r6, #2
 800089c:	e7d1      	b.n	8000842 <HAL_GPIO_Init+0x12e>
 800089e:	2603      	movs	r6, #3
 80008a0:	e7cf      	b.n	8000842 <HAL_GPIO_Init+0x12e>
 80008a2:	bf00      	nop
 80008a4:	40013c00 	.word	0x40013c00
 80008a8:	40020000 	.word	0x40020000
 80008ac:	40023800 	.word	0x40023800

080008b0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80008b0:	6801      	ldr	r1, [r0, #0]
 80008b2:	694b      	ldr	r3, [r1, #20]
 80008b4:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80008b8:	f04f 0200 	mov.w	r2, #0
 80008bc:	d010      	beq.n	80008e0 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80008be:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80008c2:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80008c4:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80008c6:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80008c8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80008cc:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80008d0:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80008d2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80008dc:	2001      	movs	r0, #1
 80008de:	4770      	bx	lr
  }
  return HAL_OK;
 80008e0:	4618      	mov	r0, r3
}
 80008e2:	4770      	bx	lr

080008e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80008e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008e8:	4604      	mov	r4, r0
 80008ea:	4617      	mov	r7, r2
 80008ec:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80008ee:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80008f2:	b28e      	uxth	r6, r1
 80008f4:	6825      	ldr	r5, [r4, #0]
 80008f6:	f1b8 0f01 	cmp.w	r8, #1
 80008fa:	bf0c      	ite	eq
 80008fc:	696b      	ldreq	r3, [r5, #20]
 80008fe:	69ab      	ldrne	r3, [r5, #24]
 8000900:	ea36 0303 	bics.w	r3, r6, r3
 8000904:	bf14      	ite	ne
 8000906:	2001      	movne	r0, #1
 8000908:	2000      	moveq	r0, #0
 800090a:	b908      	cbnz	r0, 8000910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 800090c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000910:	696b      	ldr	r3, [r5, #20]
 8000912:	055a      	lsls	r2, r3, #21
 8000914:	d516      	bpl.n	8000944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000916:	682b      	ldr	r3, [r5, #0]
 8000918:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800091c:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800091e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000922:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000924:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000926:	2300      	movs	r3, #0
 8000928:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800092a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800092e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000932:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000934:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000938:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800093a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800093e:	2001      	movs	r0, #1
 8000940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000944:	1c7b      	adds	r3, r7, #1
 8000946:	d0d5      	beq.n	80008f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000948:	f7ff fe60 	bl	800060c <HAL_GetTick>
 800094c:	eba0 0009 	sub.w	r0, r0, r9
 8000950:	4287      	cmp	r7, r0
 8000952:	d301      	bcc.n	8000958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8000954:	2f00      	cmp	r7, #0
 8000956:	d1cd      	bne.n	80008f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000958:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800095a:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800095c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800095e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000962:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000966:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000968:	f042 0220 	orr.w	r2, r2, #32
 800096c:	e7e4      	b.n	8000938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

0800096e <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800096e:	b570      	push	{r4, r5, r6, lr}
 8000970:	4604      	mov	r4, r0
 8000972:	460d      	mov	r5, r1
 8000974:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000976:	6823      	ldr	r3, [r4, #0]
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	075b      	lsls	r3, r3, #29
 800097c:	d501      	bpl.n	8000982 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800097e:	2000      	movs	r0, #0
 8000980:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000982:	4620      	mov	r0, r4
 8000984:	f7ff ff94 	bl	80008b0 <I2C_IsAcknowledgeFailed>
 8000988:	b9a8      	cbnz	r0, 80009b6 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800098a:	1c6a      	adds	r2, r5, #1
 800098c:	d0f3      	beq.n	8000976 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800098e:	f7ff fe3d 	bl	800060c <HAL_GetTick>
 8000992:	1b80      	subs	r0, r0, r6
 8000994:	4285      	cmp	r5, r0
 8000996:	d301      	bcc.n	800099c <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000998:	2d00      	cmp	r5, #0
 800099a:	d1ec      	bne.n	8000976 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800099c:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800099e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80009a0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80009a2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80009a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80009aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80009ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80009b0:	f042 0220 	orr.w	r2, r2, #32
 80009b4:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80009b6:	2001      	movs	r0, #1
}
 80009b8:	bd70      	pop	{r4, r5, r6, pc}

080009ba <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80009ba:	b570      	push	{r4, r5, r6, lr}
 80009bc:	4604      	mov	r4, r0
 80009be:	460d      	mov	r5, r1
 80009c0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80009c2:	6820      	ldr	r0, [r4, #0]
 80009c4:	6943      	ldr	r3, [r0, #20]
 80009c6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80009ca:	d001      	beq.n	80009d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80009cc:	2000      	movs	r0, #0
}
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80009d0:	6942      	ldr	r2, [r0, #20]
 80009d2:	06d2      	lsls	r2, r2, #27
 80009d4:	d50e      	bpl.n	80009f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80009d6:	f06f 0210 	mvn.w	r2, #16
 80009da:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80009dc:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80009de:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80009e0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80009e4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80009e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80009ea:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80009ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80009f0:	2001      	movs	r0, #1
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009f4:	f7ff fe0a 	bl	800060c <HAL_GetTick>
 80009f8:	1b80      	subs	r0, r0, r6
 80009fa:	42a8      	cmp	r0, r5
 80009fc:	d801      	bhi.n	8000a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80009fe:	2d00      	cmp	r5, #0
 8000a00:	d1df      	bne.n	80009c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a02:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a04:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a06:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a08:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000a0c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a10:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000a12:	f042 0220 	orr.w	r2, r2, #32
 8000a16:	e7e8      	b.n	80009ea <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08000a18 <I2C_WaitOnFlagUntilTimeout>:
{
 8000a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a1c:	9e08      	ldr	r6, [sp, #32]
 8000a1e:	4604      	mov	r4, r0
 8000a20:	4690      	mov	r8, r2
 8000a22:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000a24:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000a28:	b28d      	uxth	r5, r1
 8000a2a:	6823      	ldr	r3, [r4, #0]
 8000a2c:	f1b9 0f01 	cmp.w	r9, #1
 8000a30:	bf0c      	ite	eq
 8000a32:	695b      	ldreq	r3, [r3, #20]
 8000a34:	699b      	ldrne	r3, [r3, #24]
 8000a36:	ea35 0303 	bics.w	r3, r5, r3
 8000a3a:	bf0c      	ite	eq
 8000a3c:	2301      	moveq	r3, #1
 8000a3e:	2300      	movne	r3, #0
 8000a40:	4543      	cmp	r3, r8
 8000a42:	d002      	beq.n	8000a4a <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000a44:	2000      	movs	r0, #0
}
 8000a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000a4a:	1c7b      	adds	r3, r7, #1
 8000a4c:	d0ed      	beq.n	8000a2a <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a4e:	f7ff fddd 	bl	800060c <HAL_GetTick>
 8000a52:	1b80      	subs	r0, r0, r6
 8000a54:	4287      	cmp	r7, r0
 8000a56:	d301      	bcc.n	8000a5c <I2C_WaitOnFlagUntilTimeout+0x44>
 8000a58:	2f00      	cmp	r7, #0
 8000a5a:	d1e6      	bne.n	8000a2a <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a5c:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a5e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a60:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a62:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000a66:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000a6c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a70:	f042 0220 	orr.w	r2, r2, #32
 8000a74:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000a76:	2001      	movs	r0, #1
 8000a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000a7c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	4604      	mov	r4, r0
 8000a80:	460d      	mov	r5, r1
 8000a82:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000a84:	6823      	ldr	r3, [r4, #0]
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	061b      	lsls	r3, r3, #24
 8000a8a:	d501      	bpl.n	8000a90 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000a90:	4620      	mov	r0, r4
 8000a92:	f7ff ff0d 	bl	80008b0 <I2C_IsAcknowledgeFailed>
 8000a96:	b9a8      	cbnz	r0, 8000ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000a98:	1c6a      	adds	r2, r5, #1
 8000a9a:	d0f3      	beq.n	8000a84 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a9c:	f7ff fdb6 	bl	800060c <HAL_GetTick>
 8000aa0:	1b80      	subs	r0, r0, r6
 8000aa2:	4285      	cmp	r5, r0
 8000aa4:	d301      	bcc.n	8000aaa <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000aa6:	2d00      	cmp	r5, #0
 8000aa8:	d1ec      	bne.n	8000a84 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000aaa:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000aac:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000aae:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000ab0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000ab4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ab8:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000aba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000abe:	f042 0220 	orr.w	r2, r2, #32
 8000ac2:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000ac4:	2001      	movs	r0, #1
}
 8000ac6:	bd70      	pop	{r4, r5, r6, pc}

08000ac8 <I2C_RequestMemoryWrite>:
{
 8000ac8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000acc:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000ace:	6802      	ldr	r2, [r0, #0]
{
 8000ad0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8000ad2:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000ad4:	6813      	ldr	r3, [r2, #0]
 8000ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ada:	6013      	str	r3, [r2, #0]
{
 8000adc:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000ae0:	9600      	str	r6, [sp, #0]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8000ae8:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000aea:	f7ff ff95 	bl	8000a18 <I2C_WaitOnFlagUntilTimeout>
 8000aee:	6823      	ldr	r3, [r4, #0]
 8000af0:	b138      	cbz	r0, 8000b02 <I2C_RequestMemoryWrite+0x3a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	05db      	lsls	r3, r3, #23
 8000af6:	d502      	bpl.n	8000afe <I2C_RequestMemoryWrite+0x36>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000af8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000afc:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8000afe:	2003      	movs	r0, #3
 8000b00:	e00a      	b.n	8000b18 <I2C_RequestMemoryWrite+0x50>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000b02:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8000b06:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000b08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000b0a:	4919      	ldr	r1, [pc, #100]	; (8000b70 <I2C_RequestMemoryWrite+0xa8>)
 8000b0c:	4633      	mov	r3, r6
 8000b0e:	4620      	mov	r0, r4
 8000b10:	f7ff fee8 	bl	80008e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000b14:	b118      	cbz	r0, 8000b1e <I2C_RequestMemoryWrite+0x56>
      return HAL_ERROR;
 8000b16:	2001      	movs	r0, #1
}
 8000b18:	b004      	add	sp, #16
 8000b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b1e:	6823      	ldr	r3, [r4, #0]
 8000b20:	9003      	str	r0, [sp, #12]
 8000b22:	695a      	ldr	r2, [r3, #20]
 8000b24:	9203      	str	r2, [sp, #12]
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b2a:	4632      	mov	r2, r6
 8000b2c:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b2e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b30:	4620      	mov	r0, r4
 8000b32:	f7ff ffa3 	bl	8000a7c <I2C_WaitOnTXEFlagUntilTimeout>
 8000b36:	b140      	cbz	r0, 8000b4a <I2C_RequestMemoryWrite+0x82>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b3a:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b3c:	bf01      	itttt	eq
 8000b3e:	6822      	ldreq	r2, [r4, #0]
 8000b40:	6813      	ldreq	r3, [r2, #0]
 8000b42:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8000b46:	6013      	streq	r3, [r2, #0]
 8000b48:	e7e5      	b.n	8000b16 <I2C_RequestMemoryWrite+0x4e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000b4a:	f1b8 0f01 	cmp.w	r8, #1
 8000b4e:	6823      	ldr	r3, [r4, #0]
 8000b50:	d102      	bne.n	8000b58 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000b52:	b2ed      	uxtb	r5, r5
 8000b54:	611d      	str	r5, [r3, #16]
 8000b56:	e7df      	b.n	8000b18 <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000b58:	0a2a      	lsrs	r2, r5, #8
 8000b5a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000b5e:	4632      	mov	r2, r6
 8000b60:	4620      	mov	r0, r4
 8000b62:	f7ff ff8b 	bl	8000a7c <I2C_WaitOnTXEFlagUntilTimeout>
 8000b66:	2800      	cmp	r0, #0
 8000b68:	d1e6      	bne.n	8000b38 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000b6a:	6823      	ldr	r3, [r4, #0]
 8000b6c:	e7f1      	b.n	8000b52 <I2C_RequestMemoryWrite+0x8a>
 8000b6e:	bf00      	nop
 8000b70:	00010002 	.word	0x00010002

08000b74 <I2C_RequestMemoryRead>:
{
 8000b74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000b78:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000b7a:	6803      	ldr	r3, [r0, #0]
{
 8000b7c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000b7e:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b86:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b8e:	601a      	str	r2, [r3, #0]
{
 8000b90:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000b94:	9500      	str	r5, [sp, #0]
 8000b96:	2200      	movs	r2, #0
 8000b98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8000b9c:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b9e:	f7ff ff3b 	bl	8000a18 <I2C_WaitOnFlagUntilTimeout>
 8000ba2:	6823      	ldr	r3, [r4, #0]
 8000ba4:	b148      	cbz	r0, 8000bba <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	05db      	lsls	r3, r3, #23
 8000baa:	d502      	bpl.n	8000bb2 <I2C_RequestMemoryRead+0x3e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000bac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb0:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8000bb2:	2003      	movs	r0, #3
}
 8000bb4:	b004      	add	sp, #16
 8000bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000bba:	b2ff      	uxtb	r7, r7
 8000bbc:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8000bc0:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000bc2:	492a      	ldr	r1, [pc, #168]	; (8000c6c <I2C_RequestMemoryRead+0xf8>)
 8000bc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000bc6:	462b      	mov	r3, r5
 8000bc8:	4620      	mov	r0, r4
 8000bca:	f7ff fe8b 	bl	80008e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000bce:	b108      	cbz	r0, 8000bd4 <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	e7ef      	b.n	8000bb4 <I2C_RequestMemoryRead+0x40>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000bd4:	6823      	ldr	r3, [r4, #0]
 8000bd6:	9003      	str	r0, [sp, #12]
 8000bd8:	695a      	ldr	r2, [r3, #20]
 8000bda:	9203      	str	r2, [sp, #12]
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000be0:	462a      	mov	r2, r5
 8000be2:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000be4:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000be6:	4620      	mov	r0, r4
 8000be8:	f7ff ff48 	bl	8000a7c <I2C_WaitOnTXEFlagUntilTimeout>
 8000bec:	b140      	cbz	r0, 8000c00 <I2C_RequestMemoryRead+0x8c>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000bee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bf0:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000bf2:	bf01      	itttt	eq
 8000bf4:	6822      	ldreq	r2, [r4, #0]
 8000bf6:	6813      	ldreq	r3, [r2, #0]
 8000bf8:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8000bfc:	6013      	streq	r3, [r2, #0]
 8000bfe:	e7e7      	b.n	8000bd0 <I2C_RequestMemoryRead+0x5c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000c00:	f1b8 0f01 	cmp.w	r8, #1
 8000c04:	6823      	ldr	r3, [r4, #0]
 8000c06:	d125      	bne.n	8000c54 <I2C_RequestMemoryRead+0xe0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000c08:	b2f6      	uxtb	r6, r6
 8000c0a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c0c:	462a      	mov	r2, r5
 8000c0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000c10:	4620      	mov	r0, r4
 8000c12:	f7ff ff33 	bl	8000a7c <I2C_WaitOnTXEFlagUntilTimeout>
 8000c16:	4602      	mov	r2, r0
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d1e8      	bne.n	8000bee <I2C_RequestMemoryRead+0x7a>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000c1c:	6821      	ldr	r1, [r4, #0]
 8000c1e:	680b      	ldr	r3, [r1, #0]
 8000c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c24:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000c26:	4620      	mov	r0, r4
 8000c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000c2a:	9500      	str	r5, [sp, #0]
 8000c2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000c30:	f7ff fef2 	bl	8000a18 <I2C_WaitOnFlagUntilTimeout>
 8000c34:	6823      	ldr	r3, [r4, #0]
 8000c36:	2800      	cmp	r0, #0
 8000c38:	d1b5      	bne.n	8000ba6 <I2C_RequestMemoryRead+0x32>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000c3a:	f047 0701 	orr.w	r7, r7, #1
 8000c3e:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000c40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000c42:	490a      	ldr	r1, [pc, #40]	; (8000c6c <I2C_RequestMemoryRead+0xf8>)
 8000c44:	462b      	mov	r3, r5
 8000c46:	4620      	mov	r0, r4
 8000c48:	f7ff fe4c 	bl	80008e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8000c4c:	3000      	adds	r0, #0
 8000c4e:	bf18      	it	ne
 8000c50:	2001      	movne	r0, #1
 8000c52:	e7af      	b.n	8000bb4 <I2C_RequestMemoryRead+0x40>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000c54:	0a32      	lsrs	r2, r6, #8
 8000c56:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c58:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000c5a:	462a      	mov	r2, r5
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	f7ff ff0d 	bl	8000a7c <I2C_WaitOnTXEFlagUntilTimeout>
 8000c62:	2800      	cmp	r0, #0
 8000c64:	d1c3      	bne.n	8000bee <I2C_RequestMemoryRead+0x7a>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000c66:	6823      	ldr	r3, [r4, #0]
 8000c68:	e7ce      	b.n	8000c08 <I2C_RequestMemoryRead+0x94>
 8000c6a:	bf00      	nop
 8000c6c:	00010002 	.word	0x00010002

08000c70 <HAL_I2C_Init>:
{
 8000c70:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8000c72:	4604      	mov	r4, r0
 8000c74:	b908      	cbnz	r0, 8000c7a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000c76:	2001      	movs	r0, #1
 8000c78:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c7a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000c7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c82:	b91b      	cbnz	r3, 8000c8c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000c84:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000c88:	f002 fb32 	bl	80032f0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c8c:	2324      	movs	r3, #36	; 0x24
 8000c8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000c92:	6823      	ldr	r3, [r4, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	f022 0201 	bic.w	r2, r2, #1
 8000c9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ca2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000caa:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000cac:	f001 f934 	bl	8001f18 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000cb0:	6865      	ldr	r5, [r4, #4]
 8000cb2:	4b41      	ldr	r3, [pc, #260]	; (8000db8 <HAL_I2C_Init+0x148>)
 8000cb4:	429d      	cmp	r5, r3
 8000cb6:	d84d      	bhi.n	8000d54 <HAL_I2C_Init+0xe4>
 8000cb8:	4b40      	ldr	r3, [pc, #256]	; (8000dbc <HAL_I2C_Init+0x14c>)
 8000cba:	4298      	cmp	r0, r3
 8000cbc:	d9db      	bls.n	8000c76 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000cbe:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000cc0:	493f      	ldr	r1, [pc, #252]	; (8000dc0 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000cc2:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000cc4:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000cc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ccc:	430b      	orrs	r3, r1
 8000cce:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000cd0:	6a13      	ldr	r3, [r2, #32]
 8000cd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000cd6:	3101      	adds	r1, #1
 8000cd8:	4319      	orrs	r1, r3
 8000cda:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000cdc:	69d1      	ldr	r1, [r2, #28]
 8000cde:	4b36      	ldr	r3, [pc, #216]	; (8000db8 <HAL_I2C_Init+0x148>)
 8000ce0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000ce4:	429d      	cmp	r5, r3
 8000ce6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000cea:	f100 30ff 	add.w	r0, r0, #4294967295
 8000cee:	d848      	bhi.n	8000d82 <HAL_I2C_Init+0x112>
 8000cf0:	006d      	lsls	r5, r5, #1
 8000cf2:	fbb0 f0f5 	udiv	r0, r0, r5
 8000cf6:	3001      	adds	r0, #1
 8000cf8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	bf38      	it	cc
 8000d00:	2304      	movcc	r3, #4
 8000d02:	430b      	orrs	r3, r1
 8000d04:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000d06:	6811      	ldr	r1, [r2, #0]
 8000d08:	6a20      	ldr	r0, [r4, #32]
 8000d0a:	69e3      	ldr	r3, [r4, #28]
 8000d0c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000d10:	4303      	orrs	r3, r0
 8000d12:	430b      	orrs	r3, r1
 8000d14:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d16:	6891      	ldr	r1, [r2, #8]
 8000d18:	68e0      	ldr	r0, [r4, #12]
 8000d1a:	6923      	ldr	r3, [r4, #16]
 8000d1c:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000d20:	4303      	orrs	r3, r0
 8000d22:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000d26:	430b      	orrs	r3, r1
 8000d28:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d2a:	68d1      	ldr	r1, [r2, #12]
 8000d2c:	69a0      	ldr	r0, [r4, #24]
 8000d2e:	6963      	ldr	r3, [r4, #20]
 8000d30:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000d34:	4303      	orrs	r3, r0
 8000d36:	430b      	orrs	r3, r1
 8000d38:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000d3a:	6813      	ldr	r3, [r2, #0]
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d42:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000d44:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d46:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d4c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d4e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000d52:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <HAL_I2C_Init+0x154>)
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d98d      	bls.n	8000c76 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d5a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000d5c:	4e18      	ldr	r6, [pc, #96]	; (8000dc0 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d5e:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000d60:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d68:	4333      	orrs	r3, r6
 8000d6a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d6c:	6a13      	ldr	r3, [r2, #32]
 8000d6e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000d72:	4371      	muls	r1, r6
 8000d74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d78:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000d7c:	fbb1 f1f6 	udiv	r1, r1, r6
 8000d80:	e7a9      	b.n	8000cd6 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d82:	68a3      	ldr	r3, [r4, #8]
 8000d84:	b953      	cbnz	r3, 8000d9c <HAL_I2C_Init+0x12c>
 8000d86:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000d8a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d8e:	1c43      	adds	r3, r0, #1
 8000d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d94:	b16b      	cbz	r3, 8000db2 <HAL_I2C_Init+0x142>
 8000d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d9a:	e7b2      	b.n	8000d02 <HAL_I2C_Init+0x92>
 8000d9c:	2319      	movs	r3, #25
 8000d9e:	436b      	muls	r3, r5
 8000da0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000da4:	1c43      	adds	r3, r0, #1
 8000da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000daa:	b113      	cbz	r3, 8000db2 <HAL_I2C_Init+0x142>
 8000dac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000db0:	e7a7      	b.n	8000d02 <HAL_I2C_Init+0x92>
 8000db2:	2301      	movs	r3, #1
 8000db4:	e7a5      	b.n	8000d02 <HAL_I2C_Init+0x92>
 8000db6:	bf00      	nop
 8000db8:	000186a0 	.word	0x000186a0
 8000dbc:	001e847f 	.word	0x001e847f
 8000dc0:	000f4240 	.word	0x000f4240
 8000dc4:	003d08ff 	.word	0x003d08ff

08000dc8 <HAL_I2C_Mem_Write>:
{
 8000dc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000dcc:	4604      	mov	r4, r0
 8000dce:	4699      	mov	r9, r3
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	4690      	mov	r8, r2
 8000dd4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8000dd6:	f7ff fc19 	bl	800060c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dda:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000dde:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8000de0:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000de2:	d003      	beq.n	8000dec <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8000de4:	2002      	movs	r0, #2
}
 8000de6:	b003      	add	sp, #12
 8000de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000dec:	9000      	str	r0, [sp, #0]
 8000dee:	2319      	movs	r3, #25
 8000df0:	2201      	movs	r2, #1
 8000df2:	493b      	ldr	r1, [pc, #236]	; (8000ee0 <HAL_I2C_Mem_Write+0x118>)
 8000df4:	4620      	mov	r0, r4
 8000df6:	f7ff fe0f 	bl	8000a18 <I2C_WaitOnFlagUntilTimeout>
 8000dfa:	2800      	cmp	r0, #0
 8000dfc:	d1f2      	bne.n	8000de4 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8000dfe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d0ee      	beq.n	8000de4 <HAL_I2C_Mem_Write+0x1c>
 8000e06:	2301      	movs	r3, #1
 8000e08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e0c:	6823      	ldr	r3, [r4, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000e12:	bf5e      	ittt	pl
 8000e14:	681a      	ldrpl	r2, [r3, #0]
 8000e16:	f042 0201 	orrpl.w	r2, r2, #1
 8000e1a:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e22:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e24:	2321      	movs	r3, #33	; 0x21
 8000e26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000e2a:	2340      	movs	r3, #64	; 0x40
 8000e2c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8000e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000e36:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000e38:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8000e3c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000e3e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e40:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e42:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <HAL_I2C_Mem_Write+0x11c>)
 8000e44:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000e46:	9501      	str	r5, [sp, #4]
 8000e48:	9600      	str	r6, [sp, #0]
 8000e4a:	464b      	mov	r3, r9
 8000e4c:	4642      	mov	r2, r8
 8000e4e:	4639      	mov	r1, r7
 8000e50:	4620      	mov	r0, r4
 8000e52:	f7ff fe39 	bl	8000ac8 <I2C_RequestMemoryWrite>
 8000e56:	2800      	cmp	r0, #0
 8000e58:	d02a      	beq.n	8000eb0 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	e7c3      	b.n	8000de6 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e5e:	f7ff fe0d 	bl	8000a7c <I2C_WaitOnTXEFlagUntilTimeout>
 8000e62:	b140      	cbz	r0, 8000e76 <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e66:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e68:	bf01      	itttt	eq
 8000e6a:	6822      	ldreq	r2, [r4, #0]
 8000e6c:	6813      	ldreq	r3, [r2, #0]
 8000e6e:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8000e72:	6013      	streq	r3, [r2, #0]
 8000e74:	e7f1      	b.n	8000e5a <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e78:	6827      	ldr	r7, [r4, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8000e80:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8000e82:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000e84:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000e86:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000e88:	3a01      	subs	r2, #1
 8000e8a:	b292      	uxth	r2, r2
 8000e8c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000e8e:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8000e90:	1e48      	subs	r0, r1, #1
 8000e92:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000e94:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8000e96:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000e98:	d50a      	bpl.n	8000eb0 <HAL_I2C_Mem_Write+0xe8>
 8000e9a:	b148      	cbz	r0, 8000eb0 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000e9c:	785a      	ldrb	r2, [r3, #1]
 8000e9e:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8000ea0:	3302      	adds	r3, #2
 8000ea2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8000ea4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000ea6:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8000ea8:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8000eaa:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8000eac:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000eae:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8000eb0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000eb2:	462a      	mov	r2, r5
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1d0      	bne.n	8000e5e <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ebc:	f7ff fd57 	bl	800096e <I2C_WaitOnBTFFlagUntilTimeout>
 8000ec0:	2800      	cmp	r0, #0
 8000ec2:	d1cf      	bne.n	8000e64 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ec4:	6822      	ldr	r2, [r4, #0]
 8000ec6:	6813      	ldr	r3, [r2, #0]
 8000ec8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ecc:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000ece:	2320      	movs	r3, #32
 8000ed0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8000ed4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ed8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8000edc:	e783      	b.n	8000de6 <HAL_I2C_Mem_Write+0x1e>
 8000ede:	bf00      	nop
 8000ee0:	00100002 	.word	0x00100002
 8000ee4:	ffff0000 	.word	0xffff0000

08000ee8 <HAL_I2C_Mem_Read>:
{
 8000ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000eec:	4604      	mov	r4, r0
 8000eee:	b087      	sub	sp, #28
 8000ef0:	4699      	mov	r9, r3
 8000ef2:	460d      	mov	r5, r1
 8000ef4:	4690      	mov	r8, r2
 8000ef6:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8000ef8:	f7ff fb88 	bl	800060c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000efc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000f00:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8000f02:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f04:	d004      	beq.n	8000f10 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8000f06:	2502      	movs	r5, #2
}
 8000f08:	4628      	mov	r0, r5
 8000f0a:	b007      	add	sp, #28
 8000f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f10:	9000      	str	r0, [sp, #0]
 8000f12:	2319      	movs	r3, #25
 8000f14:	2201      	movs	r2, #1
 8000f16:	4977      	ldr	r1, [pc, #476]	; (80010f4 <HAL_I2C_Mem_Read+0x20c>)
 8000f18:	4620      	mov	r0, r4
 8000f1a:	f7ff fd7d 	bl	8000a18 <I2C_WaitOnFlagUntilTimeout>
 8000f1e:	2800      	cmp	r0, #0
 8000f20:	d1f1      	bne.n	8000f06 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8000f22:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d0ed      	beq.n	8000f06 <HAL_I2C_Mem_Read+0x1e>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f30:	6823      	ldr	r3, [r4, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000f36:	bf5e      	ittt	pl
 8000f38:	681a      	ldrpl	r2, [r3, #0]
 8000f3a:	f042 0201 	orrpl.w	r2, r2, #1
 8000f3e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f46:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000f48:	2322      	movs	r3, #34	; 0x22
 8000f4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f4e:	2340      	movs	r3, #64	; 0x40
 8000f50:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8000f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000f5a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000f5c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8000f60:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000f62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f64:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f66:	4b64      	ldr	r3, [pc, #400]	; (80010f8 <HAL_I2C_Mem_Read+0x210>)
 8000f68:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f6a:	4629      	mov	r1, r5
 8000f6c:	9601      	str	r6, [sp, #4]
 8000f6e:	9700      	str	r7, [sp, #0]
 8000f70:	464b      	mov	r3, r9
 8000f72:	4642      	mov	r2, r8
 8000f74:	4620      	mov	r0, r4
 8000f76:	f7ff fdfd 	bl	8000b74 <I2C_RequestMemoryRead>
 8000f7a:	4605      	mov	r5, r0
 8000f7c:	b108      	cbz	r0, 8000f82 <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8000f7e:	2501      	movs	r5, #1
 8000f80:	e7c2      	b.n	8000f08 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8000f82:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	b992      	cbnz	r2, 8000fae <HAL_I2C_Mem_Read+0xc6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f88:	9002      	str	r0, [sp, #8]
 8000f8a:	695a      	ldr	r2, [r3, #20]
 8000f8c:	9202      	str	r2, [sp, #8]
 8000f8e:	699a      	ldr	r2, [r3, #24]
 8000f90:	9202      	str	r2, [sp, #8]
 8000f92:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f9a:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000f9c:	2320      	movs	r3, #32
 8000f9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8000fa8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000fac:	e7ac      	b.n	8000f08 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8000fae:	2a01      	cmp	r2, #1
 8000fb0:	d12c      	bne.n	800100c <HAL_I2C_Mem_Read+0x124>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fb8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fba:	9003      	str	r0, [sp, #12]
 8000fbc:	695a      	ldr	r2, [r3, #20]
 8000fbe:	9203      	str	r2, [sp, #12]
 8000fc0:	699a      	ldr	r2, [r3, #24]
 8000fc2:	9203      	str	r2, [sp, #12]
 8000fc4:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fcc:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000fce:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80010fc <HAL_I2C_Mem_Read+0x214>
    while (hi2c->XferSize > 0U)
 8000fd2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d0e1      	beq.n	8000f9c <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d86e      	bhi.n	80010ba <HAL_I2C_Mem_Read+0x1d2>
        if (hi2c->XferSize == 1U)
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d12d      	bne.n	800103c <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fe0:	4632      	mov	r2, r6
 8000fe2:	4639      	mov	r1, r7
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	f7ff fce8 	bl	80009ba <I2C_WaitOnRXNEFlagUntilTimeout>
 8000fea:	2800      	cmp	r0, #0
 8000fec:	d1c7      	bne.n	8000f7e <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000fee:	6822      	ldr	r2, [r4, #0]
 8000ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ff2:	6912      	ldr	r2, [r2, #16]
 8000ff4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8000ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8000ffc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000ffe:	3b01      	subs	r3, #1
 8001000:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001002:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001004:	3b01      	subs	r3, #1
 8001006:	b29b      	uxth	r3, r3
 8001008:	8563      	strh	r3, [r4, #42]	; 0x2a
 800100a:	e7e2      	b.n	8000fd2 <HAL_I2C_Mem_Read+0xea>
    else if (hi2c->XferSize == 2U)
 800100c:	2a02      	cmp	r2, #2
 800100e:	d10e      	bne.n	800102e <HAL_I2C_Mem_Read+0x146>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001016:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800101e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001020:	9004      	str	r0, [sp, #16]
 8001022:	695a      	ldr	r2, [r3, #20]
 8001024:	9204      	str	r2, [sp, #16]
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	9304      	str	r3, [sp, #16]
 800102a:	9b04      	ldr	r3, [sp, #16]
 800102c:	e7cf      	b.n	8000fce <HAL_I2C_Mem_Read+0xe6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800102e:	9005      	str	r0, [sp, #20]
 8001030:	695a      	ldr	r2, [r3, #20]
 8001032:	9205      	str	r2, [sp, #20]
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	9305      	str	r3, [sp, #20]
 8001038:	9b05      	ldr	r3, [sp, #20]
 800103a:	e7c8      	b.n	8000fce <HAL_I2C_Mem_Read+0xe6>
        else if (hi2c->XferSize == 2U)
 800103c:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800103e:	9600      	str	r6, [sp, #0]
 8001040:	463b      	mov	r3, r7
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	4641      	mov	r1, r8
 8001048:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 800104a:	d119      	bne.n	8001080 <HAL_I2C_Mem_Read+0x198>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800104c:	f7ff fce4 	bl	8000a18 <I2C_WaitOnFlagUntilTimeout>
 8001050:	2800      	cmp	r0, #0
 8001052:	d194      	bne.n	8000f7e <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001054:	6823      	ldr	r3, [r4, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800105c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800105e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8001064:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001066:	1c53      	adds	r3, r2, #1
 8001068:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800106a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800106c:	3b01      	subs	r3, #1
 800106e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001070:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001072:	3b01      	subs	r3, #1
 8001074:	b29b      	uxth	r3, r3
 8001076:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001078:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	7053      	strb	r3, [r2, #1]
 800107e:	e7ba      	b.n	8000ff6 <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001080:	f7ff fcca 	bl	8000a18 <I2C_WaitOnFlagUntilTimeout>
 8001084:	4602      	mov	r2, r0
 8001086:	2800      	cmp	r0, #0
 8001088:	f47f af79 	bne.w	8000f7e <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800108c:	6823      	ldr	r3, [r4, #0]
 800108e:	6819      	ldr	r1, [r3, #0]
 8001090:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001094:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001096:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	700b      	strb	r3, [r1, #0]
          hi2c->pBuffPtr++;
 800109c:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800109e:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 80010a0:	3301      	adds	r3, #1
 80010a2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80010a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80010a6:	3b01      	subs	r3, #1
 80010a8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80010aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80010ac:	3b01      	subs	r3, #1
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80010b2:	4641      	mov	r1, r8
 80010b4:	463b      	mov	r3, r7
 80010b6:	4620      	mov	r0, r4
 80010b8:	e7c8      	b.n	800104c <HAL_I2C_Mem_Read+0x164>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010ba:	4632      	mov	r2, r6
 80010bc:	4639      	mov	r1, r7
 80010be:	4620      	mov	r0, r4
 80010c0:	f7ff fc7b 	bl	80009ba <I2C_WaitOnRXNEFlagUntilTimeout>
 80010c4:	2800      	cmp	r0, #0
 80010c6:	f47f af5a 	bne.w	8000f7e <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80010ca:	6822      	ldr	r2, [r4, #0]
 80010cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010ce:	6912      	ldr	r2, [r2, #16]
 80010d0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80010d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010d4:	1c53      	adds	r3, r2, #1
 80010d6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80010d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80010da:	3b01      	subs	r3, #1
 80010dc:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80010de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80010e0:	3b01      	subs	r3, #1
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80010e6:	6823      	ldr	r3, [r4, #0]
 80010e8:	6959      	ldr	r1, [r3, #20]
 80010ea:	0749      	lsls	r1, r1, #29
 80010ec:	f57f af71 	bpl.w	8000fd2 <HAL_I2C_Mem_Read+0xea>
 80010f0:	e7c3      	b.n	800107a <HAL_I2C_Mem_Read+0x192>
 80010f2:	bf00      	nop
 80010f4:	00100002 	.word	0x00100002
 80010f8:	ffff0000 	.word	0xffff0000
 80010fc:	00010004 	.word	0x00010004

08001100 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001100:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001102:	4604      	mov	r4, r0
{
 8001104:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8001106:	b360      	cbz	r0, 8001162 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001108:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 800110c:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800110e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001112:	b91b      	cbnz	r3, 800111c <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001114:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001118:	f002 f9fa 	bl	8003510 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800111c:	2303      	movs	r3, #3
 800111e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001122:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  {
    hpcd->Init.dma_enable = 0U;
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001124:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001126:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 800112a:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 800112e:	bf08      	it	eq
 8001130:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8001132:	f000 ffd3 	bl	80020dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001138:	466e      	mov	r6, sp
 800113a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800113c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001140:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001144:	e886 0003 	stmia.w	r6, {r0, r1}
 8001148:	4625      	mov	r5, r4
 800114a:	1d27      	adds	r7, r4, #4
 800114c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001150:	f855 0b10 	ldr.w	r0, [r5], #16
 8001154:	f000 ff08 	bl	8001f68 <USB_CoreInit>
 8001158:	4606      	mov	r6, r0
 800115a:	b120      	cbz	r0, 8001166 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800115c:	2302      	movs	r3, #2
 800115e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001162:	2501      	movs	r5, #1
 8001164:	e050      	b.n	8001208 <HAL_PCD_Init+0x108>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001166:	4601      	mov	r1, r0
 8001168:	6820      	ldr	r0, [r4, #0]
 800116a:	f000 ffbd 	bl	80020e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800116e:	4630      	mov	r0, r6
 8001170:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001174:	261c      	movs	r6, #28
 8001176:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800117a:	4601      	mov	r1, r0
 800117c:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800117e:	4596      	cmp	lr, r2
 8001180:	f100 0001 	add.w	r0, r0, #1
 8001184:	d81c      	bhi.n	80011c0 <HAL_PCD_Init+0xc0>
 8001186:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001188:	261c      	movs	r6, #28
 800118a:	4619      	mov	r1, r3
 800118c:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800118e:	4586      	cmp	lr, r0
 8001190:	f103 0301 	add.w	r3, r3, #1
 8001194:	d822      	bhi.n	80011dc <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001198:	466e      	mov	r6, sp
 800119a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800119c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80011a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011a4:	e886 0003 	stmia.w	r6, {r0, r1}
 80011a8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80011ac:	6820      	ldr	r0, [r4, #0]
 80011ae:	f000 ffdd 	bl	800216c <USB_DevInit>
 80011b2:	2301      	movs	r3, #1
 80011b4:	4605      	mov	r5, r0
 80011b6:	b300      	cbz	r0, 80011fa <HAL_PCD_Init+0xfa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011b8:	2202      	movs	r2, #2
 80011ba:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 80011be:	e7d0      	b.n	8001162 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 80011c0:	fb06 4302 	mla	r3, r6, r2, r4
 80011c4:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 80011c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011cc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011d0:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80011d4:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011d6:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80011d8:	6519      	str	r1, [r3, #80]	; 0x50
 80011da:	e7cf      	b.n	800117c <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 80011dc:	fb06 4200 	mla	r2, r6, r0, r4
 80011e0:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80011e4:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011e8:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011ec:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011f0:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011f4:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 80011f8:	e7c8      	b.n	800118c <HAL_PCD_Init+0x8c>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 80011fa:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011fe:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001202:	6820      	ldr	r0, [r4, #0]
 8001204:	f001 fb1e 	bl	8002844 <USB_DevDisconnect>

  return HAL_OK;
}
 8001208:	4628      	mov	r0, r5
 800120a:	b00b      	add	sp, #44	; 0x2c
 800120c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800120e <HAL_PCD_Start>:
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 800120e:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001212:	2b01      	cmp	r3, #1
{
 8001214:	b510      	push	{r4, lr}
 8001216:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001218:	d016      	beq.n	8001248 <HAL_PCD_Start+0x3a>
 800121a:	2301      	movs	r3, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800121c:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800121e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001222:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001224:	2b01      	cmp	r3, #1
 8001226:	d106      	bne.n	8001236 <HAL_PCD_Start+0x28>
 8001228:	69a3      	ldr	r3, [r4, #24]
 800122a:	2b01      	cmp	r3, #1
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800122c:	bf1e      	ittt	ne
 800122e:	6b83      	ldrne	r3, [r0, #56]	; 0x38
 8001230:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 8001234:	6383      	strne	r3, [r0, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001236:	f000 ff4b 	bl	80020d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800123a:	6820      	ldr	r0, [r4, #0]
 800123c:	f001 faf4 	bl	8002828 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001240:	2000      	movs	r0, #0
 8001242:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
 8001246:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001248:	2002      	movs	r0, #2
}
 800124a:	bd10      	pop	{r4, pc}

0800124c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800124c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001250:	f8d0 a000 	ldr.w	sl, [r0]
{
 8001254:	b087      	sub	sp, #28
 8001256:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001258:	4650      	mov	r0, sl
 800125a:	f001 fb30 	bl	80028be <USB_GetMode>
 800125e:	9002      	str	r0, [sp, #8]
 8001260:	2800      	cmp	r0, #0
 8001262:	f040 8123 	bne.w	80014ac <HAL_PCD_IRQHandler+0x260>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001266:	6820      	ldr	r0, [r4, #0]
 8001268:	f001 fafa 	bl	8002860 <USB_ReadInterrupts>
 800126c:	2800      	cmp	r0, #0
 800126e:	f000 811d 	beq.w	80014ac <HAL_PCD_IRQHandler+0x260>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001272:	6820      	ldr	r0, [r4, #0]
 8001274:	f001 faf4 	bl	8002860 <USB_ReadInterrupts>
 8001278:	0787      	lsls	r7, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800127a:	bf48      	it	mi
 800127c:	6822      	ldrmi	r2, [r4, #0]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800127e:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001280:	bf42      	ittt	mi
 8001282:	6953      	ldrmi	r3, [r2, #20]
 8001284:	f003 0302 	andmi.w	r3, r3, #2
 8001288:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800128a:	f001 fae9 	bl	8002860 <USB_ReadInterrupts>
 800128e:	06c6      	lsls	r6, r0, #27
 8001290:	d52b      	bpl.n	80012ea <HAL_PCD_IRQHandler+0x9e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001292:	6822      	ldr	r2, [r4, #0]
 8001294:	6993      	ldr	r3, [r2, #24]
 8001296:	f023 0310 	bic.w	r3, r3, #16
 800129a:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 800129c:	f8da 5020 	ldr.w	r5, [sl, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012a0:	f3c5 4343 	ubfx	r3, r5, #17, #4
 80012a4:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80012a6:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012aa:	f040 8102 	bne.w	80014b2 <HAL_PCD_IRQHandler+0x266>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012ae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012b2:	421d      	tst	r5, r3
 80012b4:	d014      	beq.n	80012e0 <HAL_PCD_IRQHandler+0x94>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012b6:	261c      	movs	r6, #28
 80012b8:	fb06 4607 	mla	r6, r6, r7, r4
 80012bc:	f3c5 150a 	ubfx	r5, r5, #4, #11
 80012c0:	462a      	mov	r2, r5
 80012c2:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 80012c6:	4650      	mov	r0, sl
 80012c8:	f001 fa38 	bl	800273c <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012cc:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
 80012d0:	442b      	add	r3, r5
 80012d2:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012d6:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 80012da:	441d      	add	r5, r3
 80012dc:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012e0:	6822      	ldr	r2, [r4, #0]
 80012e2:	6993      	ldr	r3, [r2, #24]
 80012e4:	f043 0310 	orr.w	r3, r3, #16
 80012e8:	6193      	str	r3, [r2, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80012ea:	6820      	ldr	r0, [r4, #0]
 80012ec:	f001 fab8 	bl	8002860 <USB_ReadInterrupts>
 80012f0:	0305      	lsls	r5, r0, #12
 80012f2:	f100 80ed 	bmi.w	80014d0 <HAL_PCD_IRQHandler+0x284>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80012f6:	6820      	ldr	r0, [r4, #0]
 80012f8:	f001 fab2 	bl	8002860 <USB_ReadInterrupts>
 80012fc:	0340      	lsls	r0, r0, #13
 80012fe:	d50c      	bpl.n	800131a <HAL_PCD_IRQHandler+0xce>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001300:	6820      	ldr	r0, [r4, #0]
 8001302:	f001 fab9 	bl	8002878 <USB_ReadDevAllInEpInterrupt>
 8001306:	4625      	mov	r5, r4
 8001308:	9003      	str	r0, [sp, #12]
 800130a:	f50a 6910 	add.w	r9, sl, #2304	; 0x900

      epnum = 0U;
 800130e:	f04f 0800 	mov.w	r8, #0

      while (ep_intr != 0U)
 8001312:	9b03      	ldr	r3, [sp, #12]
 8001314:	2b00      	cmp	r3, #0
 8001316:	f040 817f 	bne.w	8001618 <HAL_PCD_IRQHandler+0x3cc>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800131a:	6820      	ldr	r0, [r4, #0]
 800131c:	f001 faa0 	bl	8002860 <USB_ReadInterrupts>
 8001320:	2800      	cmp	r0, #0
 8001322:	da15      	bge.n	8001350 <HAL_PCD_IRQHandler+0x104>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001324:	f8da 3804 	ldr.w	r3, [sl, #2052]	; 0x804
 8001328:	f023 0301 	bic.w	r3, r3, #1
 800132c:	f8ca 3804 	str.w	r3, [sl, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 8001330:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8001334:	2b01      	cmp	r3, #1
 8001336:	f040 8200 	bne.w	800173a <HAL_PCD_IRQHandler+0x4ee>
      {
        hpcd->LPM_State = LPM_L0;
 800133a:	2100      	movs	r1, #0
 800133c:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001340:	4620      	mov	r0, r4
 8001342:	f000 fb71 	bl	8001a28 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001346:	6822      	ldr	r2, [r4, #0]
 8001348:	6953      	ldr	r3, [r2, #20]
 800134a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800134e:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001350:	6820      	ldr	r0, [r4, #0]
 8001352:	f001 fa85 	bl	8002860 <USB_ReadInterrupts>
 8001356:	0501      	lsls	r1, r0, #20
 8001358:	d50b      	bpl.n	8001372 <HAL_PCD_IRQHandler+0x126>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800135a:	f8da 3808 	ldr.w	r3, [sl, #2056]	; 0x808
 800135e:	07da      	lsls	r2, r3, #31
 8001360:	d502      	bpl.n	8001368 <HAL_PCD_IRQHandler+0x11c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001362:	4620      	mov	r0, r4
 8001364:	f002 f944 	bl	80035f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001368:	6822      	ldr	r2, [r4, #0]
 800136a:	6953      	ldr	r3, [r2, #20]
 800136c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001370:	6153      	str	r3, [r2, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001372:	6820      	ldr	r0, [r4, #0]
 8001374:	f001 fa74 	bl	8002860 <USB_ReadInterrupts>
 8001378:	04c3      	lsls	r3, r0, #19
 800137a:	d535      	bpl.n	80013e8 <HAL_PCD_IRQHandler+0x19c>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800137c:	f50a 6500 	add.w	r5, sl, #2048	; 0x800
 8001380:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001382:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001384:	f023 0301 	bic.w	r3, r3, #1
 8001388:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800138a:	2110      	movs	r1, #16
 800138c:	f000 fec4 	bl	8002118 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001390:	6860      	ldr	r0, [r4, #4]
 8001392:	f50a 6310 	add.w	r3, sl, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001396:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800139a:	9a02      	ldr	r2, [sp, #8]
 800139c:	4282      	cmp	r2, r0
 800139e:	f040 81d0 	bne.w	8001742 <HAL_PCD_IRQHandler+0x4f6>
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80013a2:	69eb      	ldr	r3, [r5, #28]
 80013a4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80013a8:	61eb      	str	r3, [r5, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80013aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 81e4 	beq.w	800177a <HAL_PCD_IRQHandler+0x52e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80013b2:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 80013b6:	f043 030b 	orr.w	r3, r3, #11
 80013ba:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80013be:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80013c0:	f043 030b 	orr.w	r3, r3, #11
 80013c4:	646b      	str	r3, [r5, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80013c6:	f8da 3800 	ldr.w	r3, [sl, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80013ca:	7c21      	ldrb	r1, [r4, #16]
 80013cc:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80013ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80013d2:	f8ca 3800 	str.w	r3, [sl, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80013d6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80013da:	f001 fa85 	bl	80028e8 <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80013de:	6822      	ldr	r2, [r4, #0]
 80013e0:	6953      	ldr	r3, [r2, #20]
 80013e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e6:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80013e8:	6820      	ldr	r0, [r4, #0]
 80013ea:	f001 fa39 	bl	8002860 <USB_ReadInterrupts>
 80013ee:	0487      	lsls	r7, r0, #18
 80013f0:	d516      	bpl.n	8001420 <HAL_PCD_IRQHandler+0x1d4>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80013f2:	6820      	ldr	r0, [r4, #0]
 80013f4:	f001 fa67 	bl	80028c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80013f8:	6820      	ldr	r0, [r4, #0]
 80013fa:	f000 ff71 	bl	80022e0 <USB_GetDevSpeed>
 80013fe:	60e0      	str	r0, [r4, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001400:	6825      	ldr	r5, [r4, #0]
 8001402:	f000 fd83 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001406:	7b22      	ldrb	r2, [r4, #12]
 8001408:	4601      	mov	r1, r0
 800140a:	4628      	mov	r0, r5
 800140c:	f000 fdec 	bl	8001fe8 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001410:	4620      	mov	r0, r4
 8001412:	f002 f8da 	bl	80035ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001416:	6822      	ldr	r2, [r4, #0]
 8001418:	6953      	ldr	r3, [r2, #20]
 800141a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800141e:	6153      	str	r3, [r2, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001420:	6820      	ldr	r0, [r4, #0]
 8001422:	f001 fa1d 	bl	8002860 <USB_ReadInterrupts>
 8001426:	0706      	lsls	r6, r0, #28
 8001428:	d507      	bpl.n	800143a <HAL_PCD_IRQHandler+0x1ee>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800142a:	4620      	mov	r0, r4
 800142c:	f002 f8c9 	bl	80035c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001430:	6822      	ldr	r2, [r4, #0]
 8001432:	6953      	ldr	r3, [r2, #20]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800143a:	6820      	ldr	r0, [r4, #0]
 800143c:	f001 fa10 	bl	8002860 <USB_ReadInterrupts>
 8001440:	02c5      	lsls	r5, r0, #11
 8001442:	d508      	bpl.n	8001456 <HAL_PCD_IRQHandler+0x20a>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001444:	2100      	movs	r1, #0
 8001446:	4620      	mov	r0, r4
 8001448:	f002 f8f2 	bl	8003630 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800144c:	6822      	ldr	r2, [r4, #0]
 800144e:	6953      	ldr	r3, [r2, #20]
 8001450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001454:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001456:	6820      	ldr	r0, [r4, #0]
 8001458:	f001 fa02 	bl	8002860 <USB_ReadInterrupts>
 800145c:	0280      	lsls	r0, r0, #10
 800145e:	d508      	bpl.n	8001472 <HAL_PCD_IRQHandler+0x226>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001460:	2100      	movs	r1, #0
 8001462:	4620      	mov	r0, r4
 8001464:	f002 f8e0 	bl	8003628 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001468:	6822      	ldr	r2, [r4, #0]
 800146a:	6953      	ldr	r3, [r2, #20]
 800146c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001470:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001472:	6820      	ldr	r0, [r4, #0]
 8001474:	f001 f9f4 	bl	8002860 <USB_ReadInterrupts>
 8001478:	0041      	lsls	r1, r0, #1
 800147a:	d507      	bpl.n	800148c <HAL_PCD_IRQHandler+0x240>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800147c:	4620      	mov	r0, r4
 800147e:	f002 f8db 	bl	8003638 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001482:	6822      	ldr	r2, [r4, #0]
 8001484:	6953      	ldr	r3, [r2, #20]
 8001486:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800148a:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800148c:	6820      	ldr	r0, [r4, #0]
 800148e:	f001 f9e7 	bl	8002860 <USB_ReadInterrupts>
 8001492:	0742      	lsls	r2, r0, #29
 8001494:	d50a      	bpl.n	80014ac <HAL_PCD_IRQHandler+0x260>
    {
      temp = hpcd->Instance->GOTGINT;
 8001496:	6823      	ldr	r3, [r4, #0]
 8001498:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800149a:	076b      	lsls	r3, r5, #29
 800149c:	d502      	bpl.n	80014a4 <HAL_PCD_IRQHandler+0x258>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800149e:	4620      	mov	r0, r4
 80014a0:	f002 f8ce 	bl	8003640 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	4315      	orrs	r5, r2
 80014aa:	605d      	str	r5, [r3, #4]
    }
  }
}
 80014ac:	b007      	add	sp, #28
 80014ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80014b2:	2b06      	cmp	r3, #6
 80014b4:	f47f af14 	bne.w	80012e0 <HAL_PCD_IRQHandler+0x94>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80014b8:	2208      	movs	r2, #8
 80014ba:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80014be:	4650      	mov	r0, sl
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014c0:	261c      	movs	r6, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80014c2:	f001 f93b 	bl	800273c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014c6:	fb06 4607 	mla	r6, r6, r7, r4
 80014ca:	f3c5 150a 	ubfx	r5, r5, #4, #11
 80014ce:	e702      	b.n	80012d6 <HAL_PCD_IRQHandler+0x8a>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014d0:	6820      	ldr	r0, [r4, #0]
 80014d2:	f001 f9c9 	bl	8002868 <USB_ReadDevAllOutEpInterrupt>
 80014d6:	f50a 6630 	add.w	r6, sl, #2816	; 0xb00
 80014da:	4681      	mov	r9, r0
 80014dc:	4627      	mov	r7, r4
      epnum = 0U;
 80014de:	2500      	movs	r5, #0
      while (ep_intr != 0U)
 80014e0:	f1b9 0f00 	cmp.w	r9, #0
 80014e4:	f43f af07 	beq.w	80012f6 <HAL_PCD_IRQHandler+0xaa>
        if ((ep_intr & 0x1U) != 0U)
 80014e8:	f019 0f01 	tst.w	r9, #1
 80014ec:	d057      	beq.n	800159e <HAL_PCD_IRQHandler+0x352>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014ee:	fa5f fb85 	uxtb.w	fp, r5
 80014f2:	4659      	mov	r1, fp
 80014f4:	6820      	ldr	r0, [r4, #0]
 80014f6:	f001 f9c7 	bl	8002888 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014fa:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014fe:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001500:	d01a      	beq.n	8001538 <HAL_PCD_IRQHandler+0x2ec>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001502:	6820      	ldr	r0, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8001504:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001506:	2301      	movs	r3, #1
 8001508:	60b3      	str	r3, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800150a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800150e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8001512:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001514:	f8d0 e040 	ldr.w	lr, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001518:	689a      	ldr	r2, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 800151a:	d165      	bne.n	80015e8 <HAL_PCD_IRQHandler+0x39c>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800151c:	0711      	lsls	r1, r2, #28
 800151e:	d507      	bpl.n	8001530 <HAL_PCD_IRQHandler+0x2e4>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001520:	499b      	ldr	r1, [pc, #620]	; (8001790 <HAL_PCD_IRQHandler+0x544>)
 8001522:	458e      	cmp	lr, r1
 8001524:	d908      	bls.n	8001538 <HAL_PCD_IRQHandler+0x2ec>
 8001526:	0410      	lsls	r0, r2, #16
 8001528:	d506      	bpl.n	8001538 <HAL_PCD_IRQHandler+0x2ec>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800152a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800152e:	e002      	b.n	8001536 <HAL_PCD_IRQHandler+0x2ea>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001530:	0691      	lsls	r1, r2, #26
 8001532:	d53a      	bpl.n	80015aa <HAL_PCD_IRQHandler+0x35e>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001534:	2220      	movs	r2, #32
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001536:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001538:	f018 0f08 	tst.w	r8, #8
 800153c:	d01f      	beq.n	800157e <HAL_PCD_IRQHandler+0x332>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800153e:	2308      	movs	r3, #8
 8001540:	60b3      	str	r3, [r6, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001542:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001544:	4992      	ldr	r1, [pc, #584]	; (8001790 <HAL_PCD_IRQHandler+0x544>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001546:	f8d3 b040 	ldr.w	fp, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800154a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800154e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001552:	458b      	cmp	fp, r1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001554:	689a      	ldr	r2, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001556:	d904      	bls.n	8001562 <HAL_PCD_IRQHandler+0x316>
 8001558:	0412      	lsls	r2, r2, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800155a:	bf44      	itt	mi
 800155c:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 8001560:	609a      	strmi	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001562:	4620      	mov	r0, r4
 8001564:	f002 f816 	bl	8003594 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001568:	4b89      	ldr	r3, [pc, #548]	; (8001790 <HAL_PCD_IRQHandler+0x544>)
 800156a:	459b      	cmp	fp, r3
 800156c:	d907      	bls.n	800157e <HAL_PCD_IRQHandler+0x332>
 800156e:	6921      	ldr	r1, [r4, #16]
 8001570:	2901      	cmp	r1, #1
 8001572:	d104      	bne.n	800157e <HAL_PCD_IRQHandler+0x332>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001574:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001578:	6820      	ldr	r0, [r4, #0]
 800157a:	f001 f9b5 	bl	80028e8 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800157e:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001582:	bf1c      	itt	ne
 8001584:	2310      	movne	r3, #16
 8001586:	60b3      	strne	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001588:	f018 0f20 	tst.w	r8, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800158c:	bf1c      	itt	ne
 800158e:	2320      	movne	r3, #32
 8001590:	60b3      	strne	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001592:	f418 5f00 	tst.w	r8, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001596:	bf1c      	itt	ne
 8001598:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 800159c:	60b3      	strne	r3, [r6, #8]
        epnum++;
 800159e:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80015a0:	ea4f 0959 	mov.w	r9, r9, lsr #1
 80015a4:	3620      	adds	r6, #32
 80015a6:	371c      	adds	r7, #28
 80015a8:	e79a      	b.n	80014e0 <HAL_PCD_IRQHandler+0x294>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80015aa:	f012 0f28 	tst.w	r2, #40	; 0x28
 80015ae:	d1c3      	bne.n	8001538 <HAL_PCD_IRQHandler+0x2ec>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80015b0:	4977      	ldr	r1, [pc, #476]	; (8001790 <HAL_PCD_IRQHandler+0x544>)
 80015b2:	458e      	cmp	lr, r1
 80015b4:	d901      	bls.n	80015ba <HAL_PCD_IRQHandler+0x36e>
 80015b6:	0412      	lsls	r2, r2, #16
 80015b8:	d4b7      	bmi.n	800152a <HAL_PCD_IRQHandler+0x2de>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80015ba:	691b      	ldr	r3, [r3, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 80015bc:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80015c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80015c4:	1ad3      	subs	r3, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80015c6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80015ca:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80015ce:	441a      	add	r2, r3
 80015d0:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80015d4:	b98d      	cbnz	r5, 80015fa <HAL_PCD_IRQHandler+0x3ae>
 80015d6:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 80015da:	b973      	cbnz	r3, 80015fa <HAL_PCD_IRQHandler+0x3ae>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015dc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80015e0:	2101      	movs	r1, #1
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80015e2:	f001 f981 	bl	80028e8 <USB_EP0_OutStart>
 80015e6:	e008      	b.n	80015fa <HAL_PCD_IRQHandler+0x3ae>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80015e8:	496a      	ldr	r1, [pc, #424]	; (8001794 <HAL_PCD_IRQHandler+0x548>)
 80015ea:	458e      	cmp	lr, r1
 80015ec:	d10a      	bne.n	8001604 <HAL_PCD_IRQHandler+0x3b8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80015ee:	0410      	lsls	r0, r2, #16
 80015f0:	d49b      	bmi.n	800152a <HAL_PCD_IRQHandler+0x2de>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015f2:	0691      	lsls	r1, r2, #26
 80015f4:	d501      	bpl.n	80015fa <HAL_PCD_IRQHandler+0x3ae>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015f6:	2220      	movs	r2, #32
 80015f8:	609a      	str	r2, [r3, #8]
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80015fa:	4659      	mov	r1, fp
 80015fc:	4620      	mov	r0, r4
 80015fe:	f001 ffcf 	bl	80035a0 <HAL_PCD_DataOutStageCallback>
 8001602:	e799      	b.n	8001538 <HAL_PCD_IRQHandler+0x2ec>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001604:	2d00      	cmp	r5, #0
 8001606:	d1f8      	bne.n	80015fa <HAL_PCD_IRQHandler+0x3ae>
 8001608:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1f4      	bne.n	80015fa <HAL_PCD_IRQHandler+0x3ae>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001610:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001614:	4629      	mov	r1, r5
 8001616:	e7e4      	b.n	80015e2 <HAL_PCD_IRQHandler+0x396>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001618:	9b03      	ldr	r3, [sp, #12]
 800161a:	07de      	lsls	r6, r3, #31
 800161c:	f140 8084 	bpl.w	8001728 <HAL_PCD_IRQHandler+0x4dc>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001620:	fa5f fb88 	uxtb.w	fp, r8
 8001624:	4659      	mov	r1, fp
 8001626:	6820      	ldr	r0, [r4, #0]
 8001628:	f001 f937 	bl	800289a <USB_ReadDevInEPInterrupt>
 800162c:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800162e:	07f0      	lsls	r0, r6, #31
 8001630:	d521      	bpl.n	8001676 <HAL_PCD_IRQHandler+0x42a>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001632:	f8da 3834 	ldr.w	r3, [sl, #2100]	; 0x834
            if (hpcd->Init.dma_enable == 1U)
 8001636:	6921      	ldr	r1, [r4, #16]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001638:	2001      	movs	r0, #1
 800163a:	f008 020f 	and.w	r2, r8, #15
 800163e:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001642:	ea23 0302 	bic.w	r3, r3, r2
            if (hpcd->Init.dma_enable == 1U)
 8001646:	4281      	cmp	r1, r0
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001648:	f8ca 3834 	str.w	r3, [sl, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800164c:	f8c9 0008 	str.w	r0, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 8001650:	d10d      	bne.n	800166e <HAL_PCD_IRQHandler+0x422>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001652:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001654:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8001656:	4413      	add	r3, r2
 8001658:	64ab      	str	r3, [r5, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800165a:	f1b8 0f00 	cmp.w	r8, #0
 800165e:	d106      	bne.n	800166e <HAL_PCD_IRQHandler+0x422>
 8001660:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001662:	b923      	cbnz	r3, 800166e <HAL_PCD_IRQHandler+0x422>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001664:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001668:	6820      	ldr	r0, [r4, #0]
 800166a:	f001 f93d 	bl	80028e8 <USB_EP0_OutStart>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800166e:	4659      	mov	r1, fp
 8001670:	4620      	mov	r0, r4
 8001672:	f001 ff9e 	bl	80035b2 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001676:	0731      	lsls	r1, r6, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001678:	bf44      	itt	mi
 800167a:	2308      	movmi	r3, #8
 800167c:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001680:	06f2      	lsls	r2, r6, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001682:	bf44      	itt	mi
 8001684:	2310      	movmi	r3, #16
 8001686:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800168a:	0673      	lsls	r3, r6, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800168c:	bf44      	itt	mi
 800168e:	2340      	movmi	r3, #64	; 0x40
 8001690:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001694:	07b7      	lsls	r7, r6, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001696:	bf44      	itt	mi
 8001698:	2302      	movmi	r3, #2
 800169a:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800169e:	0630      	lsls	r0, r6, #24
 80016a0:	d542      	bpl.n	8001728 <HAL_PCD_IRQHandler+0x4dc>
  if (ep->xfer_count > ep->xfer_len)
 80016a2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80016a4:	6d2e      	ldr	r6, [r5, #80]	; 0x50
 80016a6:	42b3      	cmp	r3, r6
 80016a8:	d83e      	bhi.n	8001728 <HAL_PCD_IRQHandler+0x4dc>
  len = ep->xfer_len - ep->xfer_count;
 80016aa:	1af6      	subs	r6, r6, r3
  len32b = (len + 3U) / 4U;
 80016ac:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016ae:	6822      	ldr	r2, [r4, #0]
 80016b0:	9204      	str	r2, [sp, #16]
  len32b = (len + 3U) / 4U;
 80016b2:	429e      	cmp	r6, r3
 80016b4:	bf28      	it	cs
 80016b6:	461e      	movcs	r6, r3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80016b8:	f502 6310 	add.w	r3, r2, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 80016bc:	3603      	adds	r6, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80016be:	eb03 1348 	add.w	r3, r3, r8, lsl #5
  len32b = (len + 3U) / 4U;
 80016c2:	08b6      	lsrs	r6, r6, #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80016c4:	9305      	str	r3, [sp, #20]
 80016c6:	9b05      	ldr	r3, [sp, #20]
 80016c8:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	42b3      	cmp	r3, r6
 80016d0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80016d2:	d327      	bcc.n	8001724 <HAL_PCD_IRQHandler+0x4d8>
 80016d4:	429f      	cmp	r7, r3
 80016d6:	d925      	bls.n	8001724 <HAL_PCD_IRQHandler+0x4d8>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80016d8:	b977      	cbnz	r7, 80016f8 <HAL_PCD_IRQHandler+0x4ac>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016da:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016dc:	f008 020f 	and.w	r2, r8, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016e0:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016e4:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016e6:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016ea:	fa01 f202 	lsl.w	r2, r1, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016ee:	ea23 0302 	bic.w	r3, r3, r2
 80016f2:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 80016f6:	e017      	b.n	8001728 <HAL_PCD_IRQHandler+0x4dc>
    len = ep->xfer_len - ep->xfer_count;
 80016f8:	1aff      	subs	r7, r7, r3
 80016fa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80016fc:	9804      	ldr	r0, [sp, #16]
 80016fe:	429f      	cmp	r7, r3
 8001700:	bf28      	it	cs
 8001702:	461f      	movcs	r7, r3
 8001704:	7c23      	ldrb	r3, [r4, #16]
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	465a      	mov	r2, fp
 800170a:	b2bb      	uxth	r3, r7
 800170c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800170e:	f000 ff13 	bl	8002538 <USB_WritePacket>
    ep->xfer_buff  += len;
 8001712:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001714:	443b      	add	r3, r7
 8001716:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8001718:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    len32b = (len + 3U) / 4U;
 800171a:	1cfe      	adds	r6, r7, #3
    ep->xfer_count += len;
 800171c:	441f      	add	r7, r3
    len32b = (len + 3U) / 4U;
 800171e:	08b6      	lsrs	r6, r6, #2
    ep->xfer_count += len;
 8001720:	656f      	str	r7, [r5, #84]	; 0x54
 8001722:	e7d0      	b.n	80016c6 <HAL_PCD_IRQHandler+0x47a>
  if (ep->xfer_len <= ep->xfer_count)
 8001724:	429f      	cmp	r7, r3
 8001726:	d9d8      	bls.n	80016da <HAL_PCD_IRQHandler+0x48e>
        ep_intr >>= 1U;
 8001728:	9b03      	ldr	r3, [sp, #12]
 800172a:	085b      	lsrs	r3, r3, #1
        epnum++;
 800172c:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 8001730:	9303      	str	r3, [sp, #12]
 8001732:	351c      	adds	r5, #28
 8001734:	f109 0920 	add.w	r9, r9, #32
 8001738:	e5eb      	b.n	8001312 <HAL_PCD_IRQHandler+0xc6>
        HAL_PCD_ResumeCallback(hpcd);
 800173a:	4620      	mov	r0, r4
 800173c:	f001 ff70 	bl	8003620 <HAL_PCD_ResumeCallback>
 8001740:	e601      	b.n	8001346 <HAL_PCD_IRQHandler+0xfa>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001742:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800174a:	601a      	str	r2, [r3, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001752:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001754:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001758:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800175c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001760:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001764:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001768:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800176c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001770:	9a02      	ldr	r2, [sp, #8]
 8001772:	3201      	adds	r2, #1
 8001774:	9202      	str	r2, [sp, #8]
 8001776:	3320      	adds	r3, #32
 8001778:	e60f      	b.n	800139a <HAL_PCD_IRQHandler+0x14e>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800177a:	696b      	ldr	r3, [r5, #20]
 800177c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001780:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001784:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001786:	692b      	ldr	r3, [r5, #16]
 8001788:	f043 030b 	orr.w	r3, r3, #11
 800178c:	612b      	str	r3, [r5, #16]
 800178e:	e61a      	b.n	80013c6 <HAL_PCD_IRQHandler+0x17a>
 8001790:	4f54300a 	.word	0x4f54300a
 8001794:	4f54310a 	.word	0x4f54310a

08001798 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001798:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800179c:	2a01      	cmp	r2, #1
{
 800179e:	b510      	push	{r4, lr}
 80017a0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80017a2:	d00b      	beq.n	80017bc <HAL_PCD_SetAddress+0x24>
 80017a4:	2201      	movs	r2, #1
 80017a6:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80017aa:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80017ae:	6800      	ldr	r0, [r0, #0]
 80017b0:	f001 f82a 	bl	8002808 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80017b4:	2000      	movs	r0, #0
 80017b6:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80017ba:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80017bc:	2002      	movs	r0, #2
}
 80017be:	bd10      	pop	{r4, pc}

080017c0 <HAL_PCD_EP_Open>:
{
 80017c0:	b570      	push	{r4, r5, r6, lr}
 80017c2:	4604      	mov	r4, r0
 80017c4:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 80017c8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80017cc:	f04f 061c 	mov.w	r6, #28
 80017d0:	b2c5      	uxtb	r5, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017d2:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 80017d6:	bf15      	itete	ne
 80017d8:	fb06 4505 	mlane	r5, r6, r5, r4
    ep->is_in = 0U;
 80017dc:	fb06 4505 	mlaeq	r5, r6, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017e0:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017e2:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 80017e6:	bf15      	itete	ne
 80017e8:	2601      	movne	r6, #1
    ep->is_in = 0U;
 80017ea:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 80017ec:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 80017f0:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 80017f4:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 80017f6:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 80017f8:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017fa:	b2c0      	uxtb	r0, r0
 80017fc:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 80017fe:	b102      	cbz	r2, 8001802 <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 8001800:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8001802:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8001804:	bf04      	itt	eq
 8001806:	2300      	moveq	r3, #0
 8001808:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800180a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800180e:	2b01      	cmp	r3, #1
 8001810:	d009      	beq.n	8001826 <HAL_PCD_EP_Open+0x66>
 8001812:	2301      	movs	r3, #1
 8001814:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001818:	6820      	ldr	r0, [r4, #0]
 800181a:	f000 fd6c 	bl	80022f6 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800181e:	2000      	movs	r0, #0
 8001820:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 8001824:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8001826:	2002      	movs	r0, #2
}
 8001828:	bd70      	pop	{r4, r5, r6, pc}

0800182a <HAL_PCD_EP_Close>:
{
 800182a:	f001 030f 	and.w	r3, r1, #15
 800182e:	b2da      	uxtb	r2, r3
 8001830:	b510      	push	{r4, lr}
 8001832:	4604      	mov	r4, r0
 8001834:	201c      	movs	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8001836:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800183a:	fb00 4102 	mla	r1, r0, r2, r4
 800183e:	bf19      	ittee	ne
 8001840:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8001842:	fb00 4202 	mlane	r2, r0, r2, r4
    ep->is_in = 0U;
 8001846:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800184a:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 800184e:	bf15      	itete	ne
 8001850:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8001852:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 8001854:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 8001858:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800185c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800185e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8001862:	2b01      	cmp	r3, #1
 8001864:	d009      	beq.n	800187a <HAL_PCD_EP_Close+0x50>
 8001866:	2301      	movs	r3, #1
 8001868:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800186c:	6820      	ldr	r0, [r4, #0]
 800186e:	f000 fd85 	bl	800237c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001872:	2000      	movs	r0, #0
 8001874:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001878:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800187a:	2002      	movs	r0, #2
}
 800187c:	bd10      	pop	{r4, pc}

0800187e <HAL_PCD_EP_Receive>:
{
 800187e:	b538      	push	{r3, r4, r5, lr}
 8001880:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001884:	241c      	movs	r4, #28
 8001886:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 800188a:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800188e:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8001892:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8001896:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8001898:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 800189c:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 80018a0:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80018a4:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 80018a8:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80018aa:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 80018ac:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 80018ae:	bf08      	it	eq
 80018b0:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 80018b4:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018b6:	b91d      	cbnz	r5, 80018c0 <HAL_PCD_EP_Receive+0x42>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80018b8:	f000 fdb4 	bl	8002424 <USB_EP0StartXfer>
}
 80018bc:	2000      	movs	r0, #0
 80018be:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80018c0:	f000 fe4e 	bl	8002560 <USB_EPStartXfer>
 80018c4:	e7fa      	b.n	80018bc <HAL_PCD_EP_Receive+0x3e>

080018c6 <HAL_PCD_EP_Transmit>:
{
 80018c6:	b538      	push	{r3, r4, r5, lr}
 80018c8:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018cc:	241c      	movs	r4, #28
 80018ce:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 80018d2:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018d6:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 80018d8:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 80018de:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 80018e0:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 80018e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 80018e6:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 80018ea:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80018ec:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 80018ee:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 80018f0:	bf08      	it	eq
 80018f2:	64e2      	streq	r2, [r4, #76]	; 0x4c
 80018f4:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018f6:	b91d      	cbnz	r5, 8001900 <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80018f8:	f000 fd94 	bl	8002424 <USB_EP0StartXfer>
}
 80018fc:	2000      	movs	r0, #0
 80018fe:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001900:	f000 fe2e 	bl	8002560 <USB_EPStartXfer>
 8001904:	e7fa      	b.n	80018fc <HAL_PCD_EP_Transmit+0x36>

08001906 <HAL_PCD_EP_SetStall>:
{
 8001906:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001908:	6843      	ldr	r3, [r0, #4]
 800190a:	f001 050f 	and.w	r5, r1, #15
 800190e:	429d      	cmp	r5, r3
{
 8001910:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001912:	d82e      	bhi.n	8001972 <HAL_PCD_EP_SetStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 8001914:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001918:	f04f 021c 	mov.w	r2, #28
 800191c:	d01f      	beq.n	800195e <HAL_PCD_EP_SetStall+0x58>
    ep->is_in = 1U;
 800191e:	fb02 0105 	mla	r1, r2, r5, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001922:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 8001926:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001928:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 800192a:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 800192e:	2201      	movs	r2, #1
 8001930:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001932:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8001934:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 8001938:	4291      	cmp	r1, r2
 800193a:	d01c      	beq.n	8001976 <HAL_PCD_EP_SetStall+0x70>
 800193c:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001940:	4619      	mov	r1, r3
 8001942:	6820      	ldr	r0, [r4, #0]
 8001944:	f000 ff08 	bl	8002758 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001948:	b92d      	cbnz	r5, 8001956 <HAL_PCD_EP_SetStall+0x50>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800194a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800194e:	7c21      	ldrb	r1, [r4, #16]
 8001950:	6820      	ldr	r0, [r4, #0]
 8001952:	f000 ffc9 	bl	80028e8 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8001956:	2000      	movs	r0, #0
 8001958:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800195c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800195e:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 8001962:	fb02 0101 	mla	r1, r2, r1, r0
 8001966:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001968:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 800196c:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 8001970:	e7dd      	b.n	800192e <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8001972:	2001      	movs	r0, #1
 8001974:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001976:	2002      	movs	r0, #2
}
 8001978:	bd38      	pop	{r3, r4, r5, pc}

0800197a <HAL_PCD_EP_ClrStall>:
{
 800197a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800197c:	6843      	ldr	r3, [r0, #4]
 800197e:	f001 020f 	and.w	r2, r1, #15
 8001982:	429a      	cmp	r2, r3
{
 8001984:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001986:	d826      	bhi.n	80019d6 <HAL_PCD_EP_ClrStall+0x5c>
 8001988:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 800198a:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800198e:	fb03 0102 	mla	r1, r3, r2, r0
 8001992:	bf19      	ittee	ne
 8001994:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8001996:	fb03 0302 	mlane	r3, r3, r2, r0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800199a:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800199e:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 80019a2:	bf14      	ite	ne
 80019a4:	2001      	movne	r0, #1
    ep->is_in = 0U;
 80019a6:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 80019a8:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 80019ac:	bf14      	ite	ne
 80019ae:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 80019b2:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 80019b6:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b8:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80019ba:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d00b      	beq.n	80019da <HAL_PCD_EP_ClrStall+0x60>
 80019c2:	2301      	movs	r3, #1
 80019c4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019c8:	6820      	ldr	r0, [r4, #0]
 80019ca:	f000 fef2 	bl	80027b2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019ce:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 80019d2:	4628      	mov	r0, r5
 80019d4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80019d6:	2001      	movs	r0, #1
 80019d8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80019da:	2002      	movs	r0, #2
}
 80019dc:	bd38      	pop	{r3, r4, r5, pc}

080019de <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80019de:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80019e0:	6804      	ldr	r4, [r0, #0]
 80019e2:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 80019e4:	b921      	cbnz	r1, 80019f0 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80019e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80019ea:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80019ec:	2000      	movs	r0, #0
 80019ee:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80019f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 80019f2:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80019f4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80019f8:	2000      	movs	r0, #0
 80019fa:	1c46      	adds	r6, r0, #1
 80019fc:	b2c0      	uxtb	r0, r0
 80019fe:	4285      	cmp	r5, r0
 8001a00:	d806      	bhi.n	8001a10 <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001a02:	313f      	adds	r1, #63	; 0x3f
 8001a04:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8001a08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001a0c:	6063      	str	r3, [r4, #4]
 8001a0e:	e7ed      	b.n	80019ec <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001a10:	3040      	adds	r0, #64	; 0x40
 8001a12:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001a16:	6840      	ldr	r0, [r0, #4]
 8001a18:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8001a1c:	4630      	mov	r0, r6
 8001a1e:	e7ec      	b.n	80019fa <HAL_PCDEx_SetTxFiFo+0x1c>

08001a20 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001a20:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8001a22:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8001a24:	6259      	str	r1, [r3, #36]	; 0x24
}
 8001a26:	4770      	bx	lr

08001a28 <HAL_PCDEx_LPM_Callback>:
 8001a28:	4770      	bx	lr
	...

08001a2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a30:	4604      	mov	r4, r0
 8001a32:	b908      	cbnz	r0, 8001a38 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001a34:	2001      	movs	r0, #1
 8001a36:	e03f      	b.n	8001ab8 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a38:	6803      	ldr	r3, [r0, #0]
 8001a3a:	07dd      	lsls	r5, r3, #31
 8001a3c:	d410      	bmi.n	8001a60 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3e:	6823      	ldr	r3, [r4, #0]
 8001a40:	0798      	lsls	r0, r3, #30
 8001a42:	d45a      	bmi.n	8001afa <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a44:	6823      	ldr	r3, [r4, #0]
 8001a46:	071a      	lsls	r2, r3, #28
 8001a48:	f100 809c 	bmi.w	8001b84 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a4c:	6823      	ldr	r3, [r4, #0]
 8001a4e:	075b      	lsls	r3, r3, #29
 8001a50:	f100 80ba 	bmi.w	8001bc8 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a54:	69a0      	ldr	r0, [r4, #24]
 8001a56:	2800      	cmp	r0, #0
 8001a58:	f040 811b 	bne.w	8001c92 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	e02b      	b.n	8001ab8 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a60:	4ba4      	ldr	r3, [pc, #656]	; (8001cf4 <HAL_RCC_OscConfig+0x2c8>)
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	f002 020c 	and.w	r2, r2, #12
 8001a68:	2a04      	cmp	r2, #4
 8001a6a:	d007      	beq.n	8001a7c <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a72:	2a08      	cmp	r2, #8
 8001a74:	d10a      	bne.n	8001a8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	0259      	lsls	r1, r3, #9
 8001a7a:	d507      	bpl.n	8001a8c <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	4b9d      	ldr	r3, [pc, #628]	; (8001cf4 <HAL_RCC_OscConfig+0x2c8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	039a      	lsls	r2, r3, #14
 8001a82:	d5dc      	bpl.n	8001a3e <HAL_RCC_OscConfig+0x12>
 8001a84:	6863      	ldr	r3, [r4, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1d9      	bne.n	8001a3e <HAL_RCC_OscConfig+0x12>
 8001a8a:	e7d3      	b.n	8001a34 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8c:	6863      	ldr	r3, [r4, #4]
 8001a8e:	4d99      	ldr	r5, [pc, #612]	; (8001cf4 <HAL_RCC_OscConfig+0x2c8>)
 8001a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a94:	d113      	bne.n	8001abe <HAL_RCC_OscConfig+0x92>
 8001a96:	682b      	ldr	r3, [r5, #0]
 8001a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a9e:	f7fe fdb5 	bl	800060c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	4d94      	ldr	r5, [pc, #592]	; (8001cf4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001aa4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	682b      	ldr	r3, [r5, #0]
 8001aa8:	039b      	lsls	r3, r3, #14
 8001aaa:	d4c8      	bmi.n	8001a3e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aac:	f7fe fdae 	bl	800060c <HAL_GetTick>
 8001ab0:	1b80      	subs	r0, r0, r6
 8001ab2:	2864      	cmp	r0, #100	; 0x64
 8001ab4:	d9f7      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001ab6:	2003      	movs	r0, #3
}
 8001ab8:	b002      	add	sp, #8
 8001aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001abe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac2:	d104      	bne.n	8001ace <HAL_RCC_OscConfig+0xa2>
 8001ac4:	682b      	ldr	r3, [r5, #0]
 8001ac6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aca:	602b      	str	r3, [r5, #0]
 8001acc:	e7e3      	b.n	8001a96 <HAL_RCC_OscConfig+0x6a>
 8001ace:	682a      	ldr	r2, [r5, #0]
 8001ad0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ad4:	602a      	str	r2, [r5, #0]
 8001ad6:	682a      	ldr	r2, [r5, #0]
 8001ad8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001adc:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1dd      	bne.n	8001a9e <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8001ae2:	f7fe fd93 	bl	800060c <HAL_GetTick>
 8001ae6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae8:	682b      	ldr	r3, [r5, #0]
 8001aea:	039f      	lsls	r7, r3, #14
 8001aec:	d5a7      	bpl.n	8001a3e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aee:	f7fe fd8d 	bl	800060c <HAL_GetTick>
 8001af2:	1b80      	subs	r0, r0, r6
 8001af4:	2864      	cmp	r0, #100	; 0x64
 8001af6:	d9f7      	bls.n	8001ae8 <HAL_RCC_OscConfig+0xbc>
 8001af8:	e7dd      	b.n	8001ab6 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001afa:	4b7e      	ldr	r3, [pc, #504]	; (8001cf4 <HAL_RCC_OscConfig+0x2c8>)
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	f012 0f0c 	tst.w	r2, #12
 8001b02:	d007      	beq.n	8001b14 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b0a:	2a08      	cmp	r2, #8
 8001b0c:	d111      	bne.n	8001b32 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	025e      	lsls	r6, r3, #9
 8001b12:	d40e      	bmi.n	8001b32 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b14:	4b77      	ldr	r3, [pc, #476]	; (8001cf4 <HAL_RCC_OscConfig+0x2c8>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	0795      	lsls	r5, r2, #30
 8001b1a:	d502      	bpl.n	8001b22 <HAL_RCC_OscConfig+0xf6>
 8001b1c:	68e2      	ldr	r2, [r4, #12]
 8001b1e:	2a01      	cmp	r2, #1
 8001b20:	d188      	bne.n	8001a34 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	6921      	ldr	r1, [r4, #16]
 8001b26:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001b2a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001b2e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b30:	e788      	b.n	8001a44 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b32:	68e2      	ldr	r2, [r4, #12]
 8001b34:	4b70      	ldr	r3, [pc, #448]	; (8001cf8 <HAL_RCC_OscConfig+0x2cc>)
 8001b36:	b1b2      	cbz	r2, 8001b66 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001b38:	2201      	movs	r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b3c:	f7fe fd66 	bl	800060c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b40:	4d6c      	ldr	r5, [pc, #432]	; (8001cf4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001b42:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b44:	682b      	ldr	r3, [r5, #0]
 8001b46:	0798      	lsls	r0, r3, #30
 8001b48:	d507      	bpl.n	8001b5a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4a:	682b      	ldr	r3, [r5, #0]
 8001b4c:	6922      	ldr	r2, [r4, #16]
 8001b4e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b52:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b56:	602b      	str	r3, [r5, #0]
 8001b58:	e774      	b.n	8001a44 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b5a:	f7fe fd57 	bl	800060c <HAL_GetTick>
 8001b5e:	1b80      	subs	r0, r0, r6
 8001b60:	2802      	cmp	r0, #2
 8001b62:	d9ef      	bls.n	8001b44 <HAL_RCC_OscConfig+0x118>
 8001b64:	e7a7      	b.n	8001ab6 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8001b66:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b68:	f7fe fd50 	bl	800060c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6c:	4d61      	ldr	r5, [pc, #388]	; (8001cf4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001b6e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b70:	682b      	ldr	r3, [r5, #0]
 8001b72:	0799      	lsls	r1, r3, #30
 8001b74:	f57f af66 	bpl.w	8001a44 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b78:	f7fe fd48 	bl	800060c <HAL_GetTick>
 8001b7c:	1b80      	subs	r0, r0, r6
 8001b7e:	2802      	cmp	r0, #2
 8001b80:	d9f6      	bls.n	8001b70 <HAL_RCC_OscConfig+0x144>
 8001b82:	e798      	b.n	8001ab6 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b84:	6962      	ldr	r2, [r4, #20]
 8001b86:	4b5d      	ldr	r3, [pc, #372]	; (8001cfc <HAL_RCC_OscConfig+0x2d0>)
 8001b88:	b17a      	cbz	r2, 8001baa <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b8e:	f7fe fd3d 	bl	800060c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b92:	4d58      	ldr	r5, [pc, #352]	; (8001cf4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001b94:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b96:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001b98:	079f      	lsls	r7, r3, #30
 8001b9a:	f53f af57 	bmi.w	8001a4c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b9e:	f7fe fd35 	bl	800060c <HAL_GetTick>
 8001ba2:	1b80      	subs	r0, r0, r6
 8001ba4:	2802      	cmp	r0, #2
 8001ba6:	d9f6      	bls.n	8001b96 <HAL_RCC_OscConfig+0x16a>
 8001ba8:	e785      	b.n	8001ab6 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001baa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001bac:	f7fe fd2e 	bl	800060c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb0:	4d50      	ldr	r5, [pc, #320]	; (8001cf4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001bb2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001bb6:	0798      	lsls	r0, r3, #30
 8001bb8:	f57f af48 	bpl.w	8001a4c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bbc:	f7fe fd26 	bl	800060c <HAL_GetTick>
 8001bc0:	1b80      	subs	r0, r0, r6
 8001bc2:	2802      	cmp	r0, #2
 8001bc4:	d9f6      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x188>
 8001bc6:	e776      	b.n	8001ab6 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc8:	4b4a      	ldr	r3, [pc, #296]	; (8001cf4 <HAL_RCC_OscConfig+0x2c8>)
 8001bca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bcc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001bd0:	d128      	bne.n	8001c24 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	9201      	str	r2, [sp, #4]
 8001bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001be6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be8:	4d45      	ldr	r5, [pc, #276]	; (8001d00 <HAL_RCC_OscConfig+0x2d4>)
 8001bea:	682b      	ldr	r3, [r5, #0]
 8001bec:	05d9      	lsls	r1, r3, #23
 8001bee:	d51b      	bpl.n	8001c28 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf0:	68a3      	ldr	r3, [r4, #8]
 8001bf2:	4d40      	ldr	r5, [pc, #256]	; (8001cf4 <HAL_RCC_OscConfig+0x2c8>)
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d127      	bne.n	8001c48 <HAL_RCC_OscConfig+0x21c>
 8001bf8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001c00:	f7fe fd04 	bl	800060c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c04:	4d3b      	ldr	r5, [pc, #236]	; (8001cf4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001c06:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c08:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c0e:	079b      	lsls	r3, r3, #30
 8001c10:	d539      	bpl.n	8001c86 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001c12:	2e00      	cmp	r6, #0
 8001c14:	f43f af1e 	beq.w	8001a54 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c18:	4a36      	ldr	r2, [pc, #216]	; (8001cf4 <HAL_RCC_OscConfig+0x2c8>)
 8001c1a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c20:	6413      	str	r3, [r2, #64]	; 0x40
 8001c22:	e717      	b.n	8001a54 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001c24:	2600      	movs	r6, #0
 8001c26:	e7df      	b.n	8001be8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c28:	682b      	ldr	r3, [r5, #0]
 8001c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001c30:	f7fe fcec 	bl	800060c <HAL_GetTick>
 8001c34:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c36:	682b      	ldr	r3, [r5, #0]
 8001c38:	05da      	lsls	r2, r3, #23
 8001c3a:	d4d9      	bmi.n	8001bf0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3c:	f7fe fce6 	bl	800060c <HAL_GetTick>
 8001c40:	1bc0      	subs	r0, r0, r7
 8001c42:	2802      	cmp	r0, #2
 8001c44:	d9f7      	bls.n	8001c36 <HAL_RCC_OscConfig+0x20a>
 8001c46:	e736      	b.n	8001ab6 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c48:	2b05      	cmp	r3, #5
 8001c4a:	d104      	bne.n	8001c56 <HAL_RCC_OscConfig+0x22a>
 8001c4c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	672b      	str	r3, [r5, #112]	; 0x70
 8001c54:	e7d0      	b.n	8001bf8 <HAL_RCC_OscConfig+0x1cc>
 8001c56:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001c58:	f022 0201 	bic.w	r2, r2, #1
 8001c5c:	672a      	str	r2, [r5, #112]	; 0x70
 8001c5e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001c60:	f022 0204 	bic.w	r2, r2, #4
 8001c64:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1ca      	bne.n	8001c00 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001c6a:	f7fe fccf 	bl	800060c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c6e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001c72:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c74:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c76:	0798      	lsls	r0, r3, #30
 8001c78:	d5cb      	bpl.n	8001c12 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c7a:	f7fe fcc7 	bl	800060c <HAL_GetTick>
 8001c7e:	1bc0      	subs	r0, r0, r7
 8001c80:	4540      	cmp	r0, r8
 8001c82:	d9f7      	bls.n	8001c74 <HAL_RCC_OscConfig+0x248>
 8001c84:	e717      	b.n	8001ab6 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c86:	f7fe fcc1 	bl	800060c <HAL_GetTick>
 8001c8a:	1bc0      	subs	r0, r0, r7
 8001c8c:	4540      	cmp	r0, r8
 8001c8e:	d9bd      	bls.n	8001c0c <HAL_RCC_OscConfig+0x1e0>
 8001c90:	e711      	b.n	8001ab6 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c92:	4d18      	ldr	r5, [pc, #96]	; (8001cf4 <HAL_RCC_OscConfig+0x2c8>)
 8001c94:	68ab      	ldr	r3, [r5, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d047      	beq.n	8001d2e <HAL_RCC_OscConfig+0x302>
 8001c9e:	4e19      	ldr	r6, [pc, #100]	; (8001d04 <HAL_RCC_OscConfig+0x2d8>)
 8001ca0:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001ca4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca6:	d135      	bne.n	8001d14 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001ca8:	f7fe fcb0 	bl	800060c <HAL_GetTick>
 8001cac:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cae:	682b      	ldr	r3, [r5, #0]
 8001cb0:	0199      	lsls	r1, r3, #6
 8001cb2:	d429      	bmi.n	8001d08 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cb4:	6a22      	ldr	r2, [r4, #32]
 8001cb6:	69e3      	ldr	r3, [r4, #28]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001cbc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001cc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001cc2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001cc6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc8:	4c0a      	ldr	r4, [pc, #40]	; (8001cf4 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cca:	0852      	lsrs	r2, r2, #1
 8001ccc:	3a01      	subs	r2, #1
 8001cce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001cd2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001cd8:	f7fe fc98 	bl	800060c <HAL_GetTick>
 8001cdc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	019a      	lsls	r2, r3, #6
 8001ce2:	f53f aebb 	bmi.w	8001a5c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce6:	f7fe fc91 	bl	800060c <HAL_GetTick>
 8001cea:	1b40      	subs	r0, r0, r5
 8001cec:	2802      	cmp	r0, #2
 8001cee:	d9f6      	bls.n	8001cde <HAL_RCC_OscConfig+0x2b2>
 8001cf0:	e6e1      	b.n	8001ab6 <HAL_RCC_OscConfig+0x8a>
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	42470000 	.word	0x42470000
 8001cfc:	42470e80 	.word	0x42470e80
 8001d00:	40007000 	.word	0x40007000
 8001d04:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d08:	f7fe fc80 	bl	800060c <HAL_GetTick>
 8001d0c:	1bc0      	subs	r0, r0, r7
 8001d0e:	2802      	cmp	r0, #2
 8001d10:	d9cd      	bls.n	8001cae <HAL_RCC_OscConfig+0x282>
 8001d12:	e6d0      	b.n	8001ab6 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001d14:	f7fe fc7a 	bl	800060c <HAL_GetTick>
 8001d18:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1a:	682b      	ldr	r3, [r5, #0]
 8001d1c:	019b      	lsls	r3, r3, #6
 8001d1e:	f57f ae9d 	bpl.w	8001a5c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d22:	f7fe fc73 	bl	800060c <HAL_GetTick>
 8001d26:	1b00      	subs	r0, r0, r4
 8001d28:	2802      	cmp	r0, #2
 8001d2a:	d9f6      	bls.n	8001d1a <HAL_RCC_OscConfig+0x2ee>
 8001d2c:	e6c3      	b.n	8001ab6 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d2e:	2801      	cmp	r0, #1
 8001d30:	f43f aec2 	beq.w	8001ab8 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8001d34:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d36:	69e3      	ldr	r3, [r4, #28]
 8001d38:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f47f ae79 	bne.w	8001a34 <HAL_RCC_OscConfig+0x8>
 8001d42:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d44:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	f47f ae73 	bne.w	8001a34 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d54:	4003      	ands	r3, r0
 8001d56:	4293      	cmp	r3, r2
 8001d58:	f47f ae6c 	bne.w	8001a34 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d5e:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d62:	4293      	cmp	r3, r2
 8001d64:	f47f ae66 	bne.w	8001a34 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d6a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8001d6e:	1ac0      	subs	r0, r0, r3
 8001d70:	bf18      	it	ne
 8001d72:	2001      	movne	r0, #1
 8001d74:	e6a0      	b.n	8001ab8 <HAL_RCC_OscConfig+0x8c>
 8001d76:	bf00      	nop

08001d78 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d78:	4913      	ldr	r1, [pc, #76]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001d7a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d7c:	688b      	ldr	r3, [r1, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d003      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0x16>
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d003      	beq.n	8001d92 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d8a:	4810      	ldr	r0, [pc, #64]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d8c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001d8e:	4810      	ldr	r0, [pc, #64]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x58>)
 8001d90:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d92:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d94:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d96:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d98:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d9c:	bf14      	ite	ne
 8001d9e:	480c      	ldrne	r0, [pc, #48]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da0:	480a      	ldreq	r0, [pc, #40]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001da6:	bf18      	it	ne
 8001da8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001daa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dae:	fba1 0100 	umull	r0, r1, r1, r0
 8001db2:	f7fe fa0f 	bl	80001d4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001db6:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x50>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001dc2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001dc6:	bd08      	pop	{r3, pc}
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	00f42400 	.word	0x00f42400
 8001dd0:	017d7840 	.word	0x017d7840

08001dd4 <HAL_RCC_ClockConfig>:
{
 8001dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dd8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001dda:	4604      	mov	r4, r0
 8001ddc:	b910      	cbnz	r0, 8001de4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001dde:	2001      	movs	r0, #1
 8001de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de4:	4b44      	ldr	r3, [pc, #272]	; (8001ef8 <HAL_RCC_ClockConfig+0x124>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	f002 020f 	and.w	r2, r2, #15
 8001dec:	428a      	cmp	r2, r1
 8001dee:	d329      	bcc.n	8001e44 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df0:	6821      	ldr	r1, [r4, #0]
 8001df2:	078f      	lsls	r7, r1, #30
 8001df4:	d42e      	bmi.n	8001e54 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df6:	07c8      	lsls	r0, r1, #31
 8001df8:	d441      	bmi.n	8001e7e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dfa:	4b3f      	ldr	r3, [pc, #252]	; (8001ef8 <HAL_RCC_ClockConfig+0x124>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	f002 020f 	and.w	r2, r2, #15
 8001e02:	4295      	cmp	r5, r2
 8001e04:	d367      	bcc.n	8001ed6 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e06:	6822      	ldr	r2, [r4, #0]
 8001e08:	0751      	lsls	r1, r2, #29
 8001e0a:	d46d      	bmi.n	8001ee8 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0c:	0713      	lsls	r3, r2, #28
 8001e0e:	d507      	bpl.n	8001e20 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e10:	4a3a      	ldr	r2, [pc, #232]	; (8001efc <HAL_RCC_ClockConfig+0x128>)
 8001e12:	6921      	ldr	r1, [r4, #16]
 8001e14:	6893      	ldr	r3, [r2, #8]
 8001e16:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001e1a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e1e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e20:	f7ff ffaa 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 8001e24:	4b35      	ldr	r3, [pc, #212]	; (8001efc <HAL_RCC_ClockConfig+0x128>)
 8001e26:	4a36      	ldr	r2, [pc, #216]	; (8001f00 <HAL_RCC_ClockConfig+0x12c>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e2e:	5cd3      	ldrb	r3, [r2, r3]
 8001e30:	40d8      	lsrs	r0, r3
 8001e32:	4b34      	ldr	r3, [pc, #208]	; (8001f04 <HAL_RCC_ClockConfig+0x130>)
 8001e34:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001e36:	4b34      	ldr	r3, [pc, #208]	; (8001f08 <HAL_RCC_ClockConfig+0x134>)
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	f7fe fb9d 	bl	8000578 <HAL_InitTick>
  return HAL_OK;
 8001e3e:	2000      	movs	r0, #0
 8001e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e44:	b2ca      	uxtb	r2, r1
 8001e46:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	4299      	cmp	r1, r3
 8001e50:	d1c5      	bne.n	8001dde <HAL_RCC_ClockConfig+0xa>
 8001e52:	e7cd      	b.n	8001df0 <HAL_RCC_ClockConfig+0x1c>
 8001e54:	4b29      	ldr	r3, [pc, #164]	; (8001efc <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e56:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e5a:	bf1e      	ittt	ne
 8001e5c:	689a      	ldrne	r2, [r3, #8]
 8001e5e:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001e62:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e64:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e66:	bf42      	ittt	mi
 8001e68:	689a      	ldrmi	r2, [r3, #8]
 8001e6a:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001e6e:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	68a0      	ldr	r0, [r4, #8]
 8001e74:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e78:	4302      	orrs	r2, r0
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	e7bb      	b.n	8001df6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7e:	6862      	ldr	r2, [r4, #4]
 8001e80:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <HAL_RCC_ClockConfig+0x128>)
 8001e82:	2a01      	cmp	r2, #1
 8001e84:	d11d      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8c:	d0a7      	beq.n	8001dde <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e8e:	4e1b      	ldr	r6, [pc, #108]	; (8001efc <HAL_RCC_ClockConfig+0x128>)
 8001e90:	68b3      	ldr	r3, [r6, #8]
 8001e92:	f023 0303 	bic.w	r3, r3, #3
 8001e96:	4313      	orrs	r3, r2
 8001e98:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001e9a:	f7fe fbb7 	bl	800060c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e9e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001ea2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea4:	68b3      	ldr	r3, [r6, #8]
 8001ea6:	6862      	ldr	r2, [r4, #4]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001eb0:	d0a3      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb2:	f7fe fbab 	bl	800060c <HAL_GetTick>
 8001eb6:	1bc0      	subs	r0, r0, r7
 8001eb8:	4540      	cmp	r0, r8
 8001eba:	d9f3      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001ebc:	2003      	movs	r0, #3
}
 8001ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ec2:	1e91      	subs	r1, r2, #2
 8001ec4:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ec8:	d802      	bhi.n	8001ed0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ece:	e7dd      	b.n	8001e8c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed0:	f013 0f02 	tst.w	r3, #2
 8001ed4:	e7da      	b.n	8001e8c <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	b2ea      	uxtb	r2, r5
 8001ed8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	429d      	cmp	r5, r3
 8001ee2:	f47f af7c 	bne.w	8001dde <HAL_RCC_ClockConfig+0xa>
 8001ee6:	e78e      	b.n	8001e06 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee8:	4904      	ldr	r1, [pc, #16]	; (8001efc <HAL_RCC_ClockConfig+0x128>)
 8001eea:	68e0      	ldr	r0, [r4, #12]
 8001eec:	688b      	ldr	r3, [r1, #8]
 8001eee:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001ef2:	4303      	orrs	r3, r0
 8001ef4:	608b      	str	r3, [r1, #8]
 8001ef6:	e789      	b.n	8001e0c <HAL_RCC_ClockConfig+0x38>
 8001ef8:	40023c00 	.word	0x40023c00
 8001efc:	40023800 	.word	0x40023800
 8001f00:	08003b0c 	.word	0x08003b0c
 8001f04:	20000110 	.word	0x20000110
 8001f08:	20000004 	.word	0x20000004

08001f0c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001f0c:	4b01      	ldr	r3, [pc, #4]	; (8001f14 <HAL_RCC_GetHCLKFreq+0x8>)
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000110 	.word	0x20000110

08001f18 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001f1a:	4a05      	ldr	r2, [pc, #20]	; (8001f30 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001f22:	5cd3      	ldrb	r3, [r2, r3]
 8001f24:	4a03      	ldr	r2, [pc, #12]	; (8001f34 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001f26:	6810      	ldr	r0, [r2, #0]
}
 8001f28:	40d8      	lsrs	r0, r3
 8001f2a:	4770      	bx	lr
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	08003b1c 	.word	0x08003b1c
 8001f34:	20000110 	.word	0x20000110

08001f38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001f38:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8001f3e:	2003      	movs	r0, #3
 8001f40:	4770      	bx	lr
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001f42:	6902      	ldr	r2, [r0, #16]
 8001f44:	2a00      	cmp	r2, #0
 8001f46:	daf8      	bge.n	8001f3a <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001f48:	6903      	ldr	r3, [r0, #16]
 8001f4a:	4a06      	ldr	r2, [pc, #24]	; (8001f64 <USB_CoreReset+0x2c>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8001f52:	3a01      	subs	r2, #1
 8001f54:	d0f3      	beq.n	8001f3e <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001f56:	6903      	ldr	r3, [r0, #16]
 8001f58:	f013 0301 	ands.w	r3, r3, #1
 8001f5c:	d1f9      	bne.n	8001f52 <USB_CoreReset+0x1a>

  return HAL_OK;
 8001f5e:	4618      	mov	r0, r3
}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	00030d41 	.word	0x00030d41

08001f68 <USB_CoreInit>:
{
 8001f68:	b084      	sub	sp, #16
 8001f6a:	b538      	push	{r3, r4, r5, lr}
 8001f6c:	ad05      	add	r5, sp, #20
 8001f6e:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001f74:	2b01      	cmp	r3, #1
{
 8001f76:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001f78:	d125      	bne.n	8001fc6 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001f7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f80:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001f82:	68c3      	ldr	r3, [r0, #12]
 8001f84:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f8c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001f8e:	68c3      	ldr	r3, [r0, #12]
 8001f90:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001f94:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8001f96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001f98:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001f9a:	bf02      	ittt	eq
 8001f9c:	68c3      	ldreq	r3, [r0, #12]
 8001f9e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8001fa2:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8001fa4:	f7ff ffc8 	bl	8001f38 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8001fa8:	9b08      	ldr	r3, [sp, #32]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d107      	bne.n	8001fbe <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001fae:	68a3      	ldr	r3, [r4, #8]
 8001fb0:	f043 0306 	orr.w	r3, r3, #6
 8001fb4:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001fb6:	68a3      	ldr	r3, [r4, #8]
 8001fb8:	f043 0320 	orr.w	r3, r3, #32
 8001fbc:	60a3      	str	r3, [r4, #8]
}
 8001fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001fc2:	b004      	add	sp, #16
 8001fc4:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001fc6:	68c3      	ldr	r3, [r0, #12]
 8001fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fcc:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8001fce:	f7ff ffb3 	bl	8001f38 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8001fd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001fd4:	b923      	cbnz	r3, 8001fe0 <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001fd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001fdc:	63a3      	str	r3, [r4, #56]	; 0x38
 8001fde:	e7e3      	b.n	8001fa8 <USB_CoreInit+0x40>
 8001fe0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe6:	e7f9      	b.n	8001fdc <USB_CoreInit+0x74>

08001fe8 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8001fe8:	2a02      	cmp	r2, #2
 8001fea:	d158      	bne.n	800209e <USB_SetTurnaroundTime+0xb6>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8001fec:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <USB_SetTurnaroundTime+0xc0>)
 8001fee:	4a2f      	ldr	r2, [pc, #188]	; (80020ac <USB_SetTurnaroundTime+0xc4>)
 8001ff0:	440b      	add	r3, r1
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d947      	bls.n	8002086 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8001ff6:	4b2e      	ldr	r3, [pc, #184]	; (80020b0 <USB_SetTurnaroundTime+0xc8>)
 8001ff8:	4a2e      	ldr	r2, [pc, #184]	; (80020b4 <USB_SetTurnaroundTime+0xcc>)
 8001ffa:	440b      	add	r3, r1
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d944      	bls.n	800208a <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002000:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8002004:	4a2c      	ldr	r2, [pc, #176]	; (80020b8 <USB_SetTurnaroundTime+0xd0>)
 8002006:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 800200a:	4293      	cmp	r3, r2
 800200c:	d93f      	bls.n	800208e <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800200e:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8002012:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8002016:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 800201a:	32a0      	adds	r2, #160	; 0xa0
 800201c:	4293      	cmp	r3, r2
 800201e:	d938      	bls.n	8002092 <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002020:	4b26      	ldr	r3, [pc, #152]	; (80020bc <USB_SetTurnaroundTime+0xd4>)
 8002022:	4a27      	ldr	r2, [pc, #156]	; (80020c0 <USB_SetTurnaroundTime+0xd8>)
 8002024:	440b      	add	r3, r1
 8002026:	4293      	cmp	r3, r2
 8002028:	d935      	bls.n	8002096 <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <USB_SetTurnaroundTime+0xdc>)
 800202c:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 8002030:	440b      	add	r3, r1
 8002032:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8002036:	4293      	cmp	r3, r2
 8002038:	d92f      	bls.n	800209a <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800203a:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <USB_SetTurnaroundTime+0xe0>)
 800203c:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 8002040:	440b      	add	r3, r1
 8002042:	f502 7220 	add.w	r2, r2, #640	; 0x280
 8002046:	4293      	cmp	r3, r2
 8002048:	d929      	bls.n	800209e <USB_SetTurnaroundTime+0xb6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800204a:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 800204e:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 8002052:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8002056:	f502 7258 	add.w	r2, r2, #864	; 0x360
 800205a:	4293      	cmp	r3, r2
 800205c:	d921      	bls.n	80020a2 <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800205e:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <USB_SetTurnaroundTime+0xe4>)
      UsbTrd = 0x6U;
 8002060:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002064:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 8002066:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 800206a:	4293      	cmp	r3, r2
 800206c:	bf94      	ite	ls
 800206e:	2307      	movls	r3, #7
 8002070:	2306      	movhi	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002072:	68c2      	ldr	r2, [r0, #12]
 8002074:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8002078:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800207a:	68c2      	ldr	r2, [r0, #12]
 800207c:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 8002080:	60c3      	str	r3, [r0, #12]
}
 8002082:	2000      	movs	r0, #0
 8002084:	4770      	bx	lr
      UsbTrd = 0xFU;
 8002086:	230f      	movs	r3, #15
 8002088:	e7f3      	b.n	8002072 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xEU;
 800208a:	230e      	movs	r3, #14
 800208c:	e7f1      	b.n	8002072 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xDU;
 800208e:	230d      	movs	r3, #13
 8002090:	e7ef      	b.n	8002072 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xCU;
 8002092:	230c      	movs	r3, #12
 8002094:	e7ed      	b.n	8002072 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xBU;
 8002096:	230b      	movs	r3, #11
 8002098:	e7eb      	b.n	8002072 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xAU;
 800209a:	230a      	movs	r3, #10
 800209c:	e7e9      	b.n	8002072 <USB_SetTurnaroundTime+0x8a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 800209e:	2309      	movs	r3, #9
 80020a0:	e7e7      	b.n	8002072 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0x8U;
 80020a2:	2308      	movs	r3, #8
 80020a4:	e7e5      	b.n	8002072 <USB_SetTurnaroundTime+0x8a>
 80020a6:	bf00      	nop
 80020a8:	ff275340 	.word	0xff275340
 80020ac:	000c34ff 	.word	0x000c34ff
 80020b0:	ff1b1e40 	.word	0xff1b1e40
 80020b4:	000f423f 	.word	0x000f423f
 80020b8:	00124f7f 	.word	0x00124f7f
 80020bc:	fee5b660 	.word	0xfee5b660
 80020c0:	0016e35f 	.word	0x0016e35f
 80020c4:	feced300 	.word	0xfeced300
 80020c8:	feb35bc0 	.word	0xfeb35bc0
 80020cc:	fe5954e0 	.word	0xfe5954e0

080020d0 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80020d0:	6883      	ldr	r3, [r0, #8]
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6083      	str	r3, [r0, #8]
}
 80020d8:	2000      	movs	r0, #0
 80020da:	4770      	bx	lr

080020dc <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80020dc:	6883      	ldr	r3, [r0, #8]
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	6083      	str	r3, [r0, #8]
}
 80020e4:	2000      	movs	r0, #0
 80020e6:	4770      	bx	lr

080020e8 <USB_SetCurrentMode>:
{
 80020e8:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80020ea:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80020ec:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80020ee:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80020f2:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80020f4:	d108      	bne.n	8002108 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80020f6:	68c3      	ldr	r3, [r0, #12]
 80020f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80020fc:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80020fe:	2032      	movs	r0, #50	; 0x32
 8002100:	f7fe fa8a 	bl	8000618 <HAL_Delay>
  return HAL_OK;
 8002104:	2000      	movs	r0, #0
 8002106:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8002108:	b919      	cbnz	r1, 8002112 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800210a:	68c3      	ldr	r3, [r0, #12]
 800210c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002110:	e7f4      	b.n	80020fc <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8002112:	2001      	movs	r0, #1
}
 8002114:	bd08      	pop	{r3, pc}
	...

08002118 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002118:	0189      	lsls	r1, r1, #6
 800211a:	f041 0120 	orr.w	r1, r1, #32
 800211e:	4a06      	ldr	r2, [pc, #24]	; (8002138 <USB_FlushTxFifo+0x20>)
 8002120:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8002122:	3a01      	subs	r2, #1
 8002124:	d005      	beq.n	8002132 <USB_FlushTxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002126:	6903      	ldr	r3, [r0, #16]
 8002128:	f013 0320 	ands.w	r3, r3, #32
 800212c:	d1f9      	bne.n	8002122 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800212e:	4618      	mov	r0, r3
 8002130:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002132:	2003      	movs	r0, #3
}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	00030d41 	.word	0x00030d41

0800213c <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800213c:	2310      	movs	r3, #16
 800213e:	4a06      	ldr	r2, [pc, #24]	; (8002158 <USB_FlushRxFifo+0x1c>)
 8002140:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002142:	3a01      	subs	r2, #1
 8002144:	d005      	beq.n	8002152 <USB_FlushRxFifo+0x16>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002146:	6903      	ldr	r3, [r0, #16]
 8002148:	f013 0310 	ands.w	r3, r3, #16
 800214c:	d1f9      	bne.n	8002142 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800214e:	4618      	mov	r0, r3
 8002150:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002152:	2003      	movs	r0, #3
}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	00030d41 	.word	0x00030d41

0800215c <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800215c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002160:	4319      	orrs	r1, r3
 8002162:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002166:	2000      	movs	r0, #0
 8002168:	4770      	bx	lr
	...

0800216c <USB_DevInit>:
{
 800216c:	b084      	sub	sp, #16
 800216e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002172:	4604      	mov	r4, r0
 8002174:	a809      	add	r0, sp, #36	; 0x24
 8002176:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800217a:	2300      	movs	r3, #0
 800217c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800217e:	460f      	mov	r7, r1
    USBx->DIEPTXF[i] = 0U;
 8002180:	4619      	mov	r1, r3
 8002182:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002186:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800218a:	3301      	adds	r3, #1
 800218c:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800218e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002190:	d1f7      	bne.n	8002182 <USB_DevInit+0x16>
 8002192:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 8002196:	2d00      	cmp	r5, #0
 8002198:	d16c      	bne.n	8002274 <USB_DevInit+0x108>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800219a:	6873      	ldr	r3, [r6, #4]
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	6073      	str	r3, [r6, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80021a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021a8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80021aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021ac:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80021b0:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80021b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80021b8:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80021c0:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80021c4:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80021c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d15c      	bne.n	8002288 <USB_DevInit+0x11c>
    if (cfg.speed == USBD_HS_SPEED)
 80021ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80021d0:	2900      	cmp	r1, #0
 80021d2:	d157      	bne.n	8002284 <USB_DevInit+0x118>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80021d4:	4620      	mov	r0, r4
 80021d6:	f7ff ffc1 	bl	800215c <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80021da:	2110      	movs	r1, #16
 80021dc:	4620      	mov	r0, r4
 80021de:	f7ff ff9b 	bl	8002118 <USB_FlushTxFifo>
 80021e2:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80021e4:	4620      	mov	r0, r4
 80021e6:	f7ff ffa9 	bl	800213c <USB_FlushRxFifo>
 80021ea:	2800      	cmp	r0, #0
 80021ec:	d14e      	bne.n	800228c <USB_DevInit+0x120>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80021ee:	1c08      	adds	r0, r1, #0
 80021f0:	bf18      	it	ne
 80021f2:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	6133      	str	r3, [r6, #16]
 80021f8:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 80021fc:	6173      	str	r3, [r6, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 80021fe:	4619      	mov	r1, r3
  USBx_DEVICE->DAINTMSK = 0U;
 8002200:	61f3      	str	r3, [r6, #28]
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002202:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002206:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800220a:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800220e:	42bb      	cmp	r3, r7
 8002210:	d13e      	bne.n	8002290 <USB_DevInit+0x124>
 8002212:	2100      	movs	r1, #0
 8002214:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002218:	460f      	mov	r7, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800221a:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800221e:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002222:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002226:	428b      	cmp	r3, r1
 8002228:	d145      	bne.n	80022b6 <USB_DevInit+0x14a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800222a:	6933      	ldr	r3, [r6, #16]
 800222c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002230:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002236:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800223a:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 800223c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800223e:	b91b      	cbnz	r3, 8002248 <USB_DevInit+0xdc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002240:	69a3      	ldr	r3, [r4, #24]
 8002242:	f043 0310 	orr.w	r3, r3, #16
 8002246:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002248:	69a2      	ldr	r2, [r4, #24]
 800224a:	4b24      	ldr	r3, [pc, #144]	; (80022dc <USB_DevInit+0x170>)
 800224c:	4313      	orrs	r3, r2
 800224e:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002250:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002252:	b11b      	cbz	r3, 800225c <USB_DevInit+0xf0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002254:	69a3      	ldr	r3, [r4, #24]
 8002256:	f043 0308 	orr.w	r3, r3, #8
 800225a:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800225c:	2d01      	cmp	r5, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800225e:	bf01      	itttt	eq
 8002260:	69a3      	ldreq	r3, [r4, #24]
 8002262:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8002266:	f043 0304 	orreq.w	r3, r3, #4
 800226a:	61a3      	streq	r3, [r4, #24]
}
 800226c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002270:	b004      	add	sp, #16
 8002272:	4770      	bx	lr
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002274:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002276:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800227a:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800227c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800227e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002282:	e799      	b.n	80021b8 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002284:	4619      	mov	r1, r3
 8002286:	e7a5      	b.n	80021d4 <USB_DevInit+0x68>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002288:	2103      	movs	r1, #3
 800228a:	e7a3      	b.n	80021d4 <USB_DevInit+0x68>
 800228c:	2001      	movs	r0, #1
 800228e:	e7b1      	b.n	80021f4 <USB_DevInit+0x88>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002290:	f8d2 9000 	ldr.w	r9, [r2]
 8002294:	f1b9 0f00 	cmp.w	r9, #0
 8002298:	da0b      	bge.n	80022b2 <USB_DevInit+0x146>
      if (i == 0U)
 800229a:	b93b      	cbnz	r3, 80022ac <USB_DevInit+0x140>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800229c:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80022a0:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80022a2:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80022a4:	f8c2 8008 	str.w	r8, [r2, #8]
 80022a8:	3220      	adds	r2, #32
 80022aa:	e7b0      	b.n	800220e <USB_DevInit+0xa2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80022ac:	f8c2 e000 	str.w	lr, [r2]
 80022b0:	e7f6      	b.n	80022a0 <USB_DevInit+0x134>
      USBx_INEP(i)->DIEPCTL = 0U;
 80022b2:	6011      	str	r1, [r2, #0]
 80022b4:	e7f4      	b.n	80022a0 <USB_DevInit+0x134>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80022b6:	f8d2 9000 	ldr.w	r9, [r2]
 80022ba:	f1b9 0f00 	cmp.w	r9, #0
 80022be:	da0b      	bge.n	80022d8 <USB_DevInit+0x16c>
      if (i == 0U)
 80022c0:	b939      	cbnz	r1, 80022d2 <USB_DevInit+0x166>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80022c2:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80022c6:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80022c8:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80022ca:	f8c2 8008 	str.w	r8, [r2, #8]
 80022ce:	3220      	adds	r2, #32
 80022d0:	e7a9      	b.n	8002226 <USB_DevInit+0xba>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80022d2:	f8c2 e000 	str.w	lr, [r2]
 80022d6:	e7f6      	b.n	80022c6 <USB_DevInit+0x15a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80022d8:	6017      	str	r7, [r2, #0]
 80022da:	e7f4      	b.n	80022c6 <USB_DevInit+0x15a>
 80022dc:	803c3800 	.word	0x803c3800

080022e0 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80022e0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80022e4:	f013 0006 	ands.w	r0, r3, #6
 80022e8:	d004      	beq.n	80022f4 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80022ea:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 80022ee:	bf14      	ite	ne
 80022f0:	2002      	movne	r0, #2
 80022f2:	200f      	moveq	r0, #15
}
 80022f4:	4770      	bx	lr

080022f6 <USB_ActivateEndpoint>:
{
 80022f6:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 80022f8:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80022fa:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80022fc:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 8002300:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8002304:	2a01      	cmp	r2, #1
 8002306:	f004 050f 	and.w	r5, r4, #15
 800230a:	d11b      	bne.n	8002344 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800230c:	40aa      	lsls	r2, r5
 800230e:	4332      	orrs	r2, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002310:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002314:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002316:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800231a:	041a      	lsls	r2, r3, #16
 800231c:	d410      	bmi.n	8002340 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800231e:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002320:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002322:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800232a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002332:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8002336:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 800233a:	4313      	orrs	r3, r2
 800233c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8002340:	2000      	movs	r0, #0
 8002342:	bd70      	pop	{r4, r5, r6, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002344:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002348:	40aa      	lsls	r2, r5
 800234a:	4332      	orrs	r2, r6
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800234c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002350:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002352:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002356:	041b      	lsls	r3, r3, #16
 8002358:	d4f2      	bmi.n	8002340 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800235a:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 800235c:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800235e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236e:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002378:	e7e2      	b.n	8002340 <USB_ActivateEndpoint+0x4a>
	...

0800237c <USB_DeactivateEndpoint>:
{
 800237c:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 800237e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002380:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8002382:	2b01      	cmp	r3, #1
 8002384:	f04f 0320 	mov.w	r3, #32
 8002388:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 800238c:	f004 050f 	and.w	r5, r4, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002390:	fb13 0004 	smlabb	r0, r3, r4, r0
  if (ep->is_in == 1U)
 8002394:	d120      	bne.n	80023d8 <USB_DeactivateEndpoint+0x5c>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002396:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800239a:	2b00      	cmp	r3, #0
 800239c:	da0b      	bge.n	80023b6 <USB_DeactivateEndpoint+0x3a>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800239e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80023a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023a6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80023aa:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80023ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023b2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80023b6:	2301      	movs	r3, #1
 80023b8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80023ba:	40ab      	lsls	r3, r5
 80023bc:	43db      	mvns	r3, r3
 80023be:	4019      	ands	r1, r3
 80023c0:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80023c2:	69d1      	ldr	r1, [r2, #28]
 80023c4:	400b      	ands	r3, r1
 80023c6:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80023c8:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80023cc:	4b13      	ldr	r3, [pc, #76]	; (800241c <USB_DeactivateEndpoint+0xa0>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80023d4:	2000      	movs	r0, #0
 80023d6:	bd30      	pop	{r4, r5, pc}
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80023d8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80023dc:	2b00      	cmp	r3, #0
 80023de:	da0b      	bge.n	80023f8 <USB_DeactivateEndpoint+0x7c>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80023e0:	f8d0 1b00 	ldr.w	r1, [r0, #2816]	; 0xb00
 80023e4:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 80023e8:	f8c0 1b00 	str.w	r1, [r0, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80023ec:	f8d0 1b00 	ldr.w	r1, [r0, #2816]	; 0xb00
 80023f0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80023f4:	f8c0 1b00 	str.w	r1, [r0, #2816]	; 0xb00
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80023f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023fc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80023fe:	40ab      	lsls	r3, r5
 8002400:	43db      	mvns	r3, r3
 8002402:	4019      	ands	r1, r3
 8002404:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002406:	69d1      	ldr	r1, [r2, #28]
 8002408:	400b      	ands	r3, r1
 800240a:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800240c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <USB_DeactivateEndpoint+0xa4>)
 8002412:	4013      	ands	r3, r2
 8002414:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002418:	e7dc      	b.n	80023d4 <USB_DeactivateEndpoint+0x58>
 800241a:	bf00      	nop
 800241c:	ec337800 	.word	0xec337800
 8002420:	eff37800 	.word	0xeff37800

08002424 <USB_EP0StartXfer>:
{
 8002424:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8002426:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002428:	780c      	ldrb	r4, [r1, #0]
 800242a:	694e      	ldr	r6, [r1, #20]
 800242c:	4f41      	ldr	r7, [pc, #260]	; (8002534 <USB_EP0StartXfer+0x110>)
  if (ep->is_in == 1U)
 800242e:	2b01      	cmp	r3, #1
 8002430:	f04f 0320 	mov.w	r3, #32
 8002434:	d159      	bne.n	80024ea <USB_EP0StartXfer+0xc6>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002436:	fb13 0304 	smlabb	r3, r3, r4, r0
    if (ep->xfer_len == 0U)
 800243a:	bb36      	cbnz	r6, 800248a <USB_EP0StartXfer+0x66>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800243c:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002440:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002444:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002448:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800244c:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002450:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002454:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002458:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 800245c:	402f      	ands	r7, r5
 800245e:	f8c3 7910 	str.w	r7, [r3, #2320]	; 0x910
    if (dma == 1U)
 8002462:	2a01      	cmp	r2, #1
 8002464:	f04f 0320 	mov.w	r3, #32
 8002468:	d129      	bne.n	80024be <USB_EP0StartXfer+0x9a>
      if ((uint32_t)ep->dma_addr != 0U)
 800246a:	690a      	ldr	r2, [r1, #16]
 800246c:	b11a      	cbz	r2, 8002476 <USB_EP0StartXfer+0x52>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800246e:	fb13 0304 	smlabb	r3, r3, r4, r0
 8002472:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002476:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800247a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800247e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002482:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
}
 8002486:	2000      	movs	r0, #0
 8002488:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800248a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800248e:	691d      	ldr	r5, [r3, #16]
 8002490:	402f      	ands	r7, r5
 8002492:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002494:	691d      	ldr	r5, [r3, #16]
 8002496:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800249a:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800249e:	611d      	str	r5, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 80024a0:	688d      	ldr	r5, [r1, #8]
 80024a2:	42ae      	cmp	r6, r5
        ep->xfer_len = ep->maxpacket;
 80024a4:	bf88      	it	hi
 80024a6:	614d      	strhi	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80024a8:	691d      	ldr	r5, [r3, #16]
 80024aa:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80024ae:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80024b0:	694d      	ldr	r5, [r1, #20]
 80024b2:	691e      	ldr	r6, [r3, #16]
 80024b4:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80024b8:	4335      	orrs	r5, r6
 80024ba:	611d      	str	r5, [r3, #16]
 80024bc:	e7d1      	b.n	8002462 <USB_EP0StartXfer+0x3e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80024be:	fb13 0404 	smlabb	r4, r3, r4, r0
 80024c2:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 80024c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80024ca:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 80024ce:	694b      	ldr	r3, [r1, #20]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0d8      	beq.n	8002486 <USB_EP0StartXfer+0x62>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80024d4:	780a      	ldrb	r2, [r1, #0]
 80024d6:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 80024da:	f002 010f 	and.w	r1, r2, #15
 80024de:	2201      	movs	r2, #1
 80024e0:	408a      	lsls	r2, r1
 80024e2:	431a      	orrs	r2, r3
 80024e4:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 80024e8:	e7cd      	b.n	8002486 <USB_EP0StartXfer+0x62>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80024ea:	fb13 0004 	smlabb	r0, r3, r4, r0
 80024ee:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80024f2:	691c      	ldr	r4, [r3, #16]
 80024f4:	4027      	ands	r7, r4
 80024f6:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80024f8:	691c      	ldr	r4, [r3, #16]
 80024fa:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80024fe:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002502:	611c      	str	r4, [r3, #16]
 8002504:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len > 0U)
 8002506:	b106      	cbz	r6, 800250a <USB_EP0StartXfer+0xe6>
      ep->xfer_len = ep->maxpacket;
 8002508:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800250a:	691d      	ldr	r5, [r3, #16]
 800250c:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002510:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002512:	691d      	ldr	r5, [r3, #16]
 8002514:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002518:	432c      	orrs	r4, r5
    if (dma == 1U)
 800251a:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800251c:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800251e:	d102      	bne.n	8002526 <USB_EP0StartXfer+0x102>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002520:	68ca      	ldr	r2, [r1, #12]
 8002522:	b102      	cbz	r2, 8002526 <USB_EP0StartXfer+0x102>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002524:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002526:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800252a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800252e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002532:	e7a8      	b.n	8002486 <USB_EP0StartXfer+0x62>
 8002534:	fff80000 	.word	0xfff80000

08002538 <USB_WritePacket>:
{
 8002538:	b510      	push	{r4, lr}
 800253a:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800253e:	b94c      	cbnz	r4, 8002554 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002540:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002542:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8002546:	f023 0303 	bic.w	r3, r3, #3
 800254a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800254e:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 8002550:	4299      	cmp	r1, r3
 8002552:	d101      	bne.n	8002558 <USB_WritePacket+0x20>
}
 8002554:	2000      	movs	r0, #0
 8002556:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002558:	f851 2b04 	ldr.w	r2, [r1], #4
 800255c:	6002      	str	r2, [r0, #0]
 800255e:	e7f7      	b.n	8002550 <USB_WritePacket+0x18>

08002560 <USB_EPStartXfer>:
{
 8002560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8002562:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002564:	780e      	ldrb	r6, [r1, #0]
 8002566:	4f73      	ldr	r7, [pc, #460]	; (8002734 <USB_EPStartXfer+0x1d4>)
  if (ep->is_in == 1U)
 8002568:	2b01      	cmp	r3, #1
 800256a:	f04f 0420 	mov.w	r4, #32
 800256e:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002570:	fb14 0406 	smlabb	r4, r4, r6, r0
  if (ep->is_in == 1U)
 8002574:	f040 8098 	bne.w	80026a8 <USB_EPStartXfer+0x148>
    if (ep->xfer_len == 0U)
 8002578:	2b00      	cmp	r3, #0
 800257a:	d138      	bne.n	80025ee <USB_EPStartXfer+0x8e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800257c:	f504 6510 	add.w	r5, r4, #2304	; 0x900
 8002580:	f8d4 4910 	ldr.w	r4, [r4, #2320]	; 0x910
 8002584:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002588:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800258c:	612c      	str	r4, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800258e:	692c      	ldr	r4, [r5, #16]
 8002590:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002594:	612c      	str	r4, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002596:	692c      	ldr	r4, [r5, #16]
 8002598:	4027      	ands	r7, r4
 800259a:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 800259c:	2a01      	cmp	r2, #1
 800259e:	f04f 0420 	mov.w	r4, #32
 80025a2:	d154      	bne.n	800264e <USB_EPStartXfer+0xee>
      if ((uint32_t)ep->dma_addr != 0U)
 80025a4:	690b      	ldr	r3, [r1, #16]
 80025a6:	b11b      	cbz	r3, 80025b0 <USB_EPStartXfer+0x50>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80025a8:	fb14 0406 	smlabb	r4, r4, r6, r0
 80025ac:	f8c4 3914 	str.w	r3, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 80025b0:	78cb      	ldrb	r3, [r1, #3]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d110      	bne.n	80025d8 <USB_EPStartXfer+0x78>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80025b6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80025ba:	f413 7f80 	tst.w	r3, #256	; 0x100
 80025be:	f04f 0320 	mov.w	r3, #32
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80025c2:	fb13 0306 	smlabb	r3, r3, r6, r0
 80025c6:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80025ca:	bf0c      	ite	eq
 80025cc:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80025d0:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 80025d4:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80025d8:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 80025dc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80025e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80025e4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80025e8:	2000      	movs	r0, #0
 80025ea:	b003      	add	sp, #12
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80025ee:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80025f2:	402f      	ands	r7, r5
 80025f4:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80025f8:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80025fc:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80025fe:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002602:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002606:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800260a:	19dd      	adds	r5, r3, r7
 800260c:	3d01      	subs	r5, #1
 800260e:	fbb5 f7f7 	udiv	r7, r5, r7
 8002612:	4d49      	ldr	r5, [pc, #292]	; (8002738 <USB_EPStartXfer+0x1d8>)
 8002614:	f8d4 e910 	ldr.w	lr, [r4, #2320]	; 0x910
 8002618:	ea05 45c7 	and.w	r5, r5, r7, lsl #19
 800261c:	ea45 050e 	orr.w	r5, r5, lr
 8002620:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002624:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8002628:	f3c3 0512 	ubfx	r5, r3, #0, #19
 800262c:	433d      	orrs	r5, r7
 800262e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8002632:	78cd      	ldrb	r5, [r1, #3]
 8002634:	2d01      	cmp	r5, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002636:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800263a:	d1af      	bne.n	800259c <USB_EPStartXfer+0x3c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800263c:	6925      	ldr	r5, [r4, #16]
 800263e:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8002642:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8002644:	6925      	ldr	r5, [r4, #16]
 8002646:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800264a:	6125      	str	r5, [r4, #16]
 800264c:	e7a6      	b.n	800259c <USB_EPStartXfer+0x3c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800264e:	fb14 0406 	smlabb	r4, r4, r6, r0
 8002652:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 8002656:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800265a:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800265e:	78cd      	ldrb	r5, [r1, #3]
 8002660:	2d01      	cmp	r5, #1
 8002662:	d00c      	beq.n	800267e <USB_EPStartXfer+0x11e>
        if (ep->xfer_len > 0U)
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0bf      	beq.n	80025e8 <USB_EPStartXfer+0x88>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002668:	780b      	ldrb	r3, [r1, #0]
 800266a:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 800266e:	f003 020f 	and.w	r2, r3, #15
 8002672:	2301      	movs	r3, #1
 8002674:	4093      	lsls	r3, r2
 8002676:	4323      	orrs	r3, r4
 8002678:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800267c:	e7b4      	b.n	80025e8 <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800267e:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 8002682:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002686:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 800268a:	bf0c      	ite	eq
 800268c:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002690:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 8002694:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8002698:	780c      	ldrb	r4, [r1, #0]
 800269a:	9200      	str	r2, [sp, #0]
 800269c:	b29b      	uxth	r3, r3
 800269e:	4622      	mov	r2, r4
 80026a0:	68c9      	ldr	r1, [r1, #12]
 80026a2:	f7ff ff49 	bl	8002538 <USB_WritePacket>
 80026a6:	e79f      	b.n	80025e8 <USB_EPStartXfer+0x88>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80026a8:	f504 6630 	add.w	r6, r4, #2816	; 0xb00
 80026ac:	6935      	ldr	r5, [r6, #16]
 80026ae:	402f      	ands	r7, r5
 80026b0:	6137      	str	r7, [r6, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80026b2:	6935      	ldr	r5, [r6, #16]
 80026b4:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80026b8:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80026bc:	6135      	str	r5, [r6, #16]
 80026be:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 80026c0:	bb23      	cbnz	r3, 800270c <USB_EPStartXfer+0x1ac>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80026c2:	6933      	ldr	r3, [r6, #16]
 80026c4:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80026c8:	431d      	orrs	r5, r3
 80026ca:	6135      	str	r5, [r6, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80026cc:	6933      	ldr	r3, [r6, #16]
 80026ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    if (dma == 1U)
 80026d2:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80026d4:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 80026d6:	d102      	bne.n	80026de <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->xfer_buff != 0U)
 80026d8:	68cb      	ldr	r3, [r1, #12]
 80026da:	b103      	cbz	r3, 80026de <USB_EPStartXfer+0x17e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80026dc:	6173      	str	r3, [r6, #20]
    if (ep->type == EP_TYPE_ISOC)
 80026de:	78cb      	ldrb	r3, [r1, #3]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d10c      	bne.n	80026fe <USB_EPStartXfer+0x19e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80026e4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80026e8:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80026ec:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 80026f0:	bf0c      	ite	eq
 80026f2:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80026f6:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80026fa:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80026fe:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8002702:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002706:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 800270a:	e76d      	b.n	80025e8 <USB_EPStartXfer+0x88>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800270c:	4f0a      	ldr	r7, [pc, #40]	; (8002738 <USB_EPStartXfer+0x1d8>)
 800270e:	f8d6 e010 	ldr.w	lr, [r6, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002712:	442b      	add	r3, r5
 8002714:	3b01      	subs	r3, #1
 8002716:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800271a:	ea07 47c3 	and.w	r7, r7, r3, lsl #19
 800271e:	ea47 070e 	orr.w	r7, r7, lr
 8002722:	6137      	str	r7, [r6, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002724:	b29b      	uxth	r3, r3
 8002726:	6937      	ldr	r7, [r6, #16]
 8002728:	436b      	muls	r3, r5
 800272a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272e:	433b      	orrs	r3, r7
 8002730:	e7cf      	b.n	80026d2 <USB_EPStartXfer+0x172>
 8002732:	bf00      	nop
 8002734:	fff80000 	.word	0xfff80000
 8002738:	1ff80000 	.word	0x1ff80000

0800273c <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800273c:	3203      	adds	r2, #3
 800273e:	f022 0203 	bic.w	r2, r2, #3
 8002742:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002744:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8002748:	4291      	cmp	r1, r2
 800274a:	d101      	bne.n	8002750 <USB_ReadPacket+0x14>
}
 800274c:	4608      	mov	r0, r1
 800274e:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002750:	6803      	ldr	r3, [r0, #0]
 8002752:	f841 3b04 	str.w	r3, [r1], #4
 8002756:	e7f7      	b.n	8002748 <USB_ReadPacket+0xc>

08002758 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8002758:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800275a:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800275c:	2b01      	cmp	r3, #1
 800275e:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002762:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8002766:	d112      	bne.n	800278e <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002768:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800276c:	2b00      	cmp	r3, #0
 800276e:	db06      	blt.n	800277e <USB_EPSetStall+0x26>
 8002770:	b12a      	cbz	r2, 800277e <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8002772:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002776:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800277a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800277e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002782:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002786:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800278a:	2000      	movs	r0, #0
 800278c:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800278e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002792:	2b00      	cmp	r3, #0
 8002794:	db06      	blt.n	80027a4 <USB_EPSetStall+0x4c>
 8002796:	b12a      	cbz	r2, 80027a4 <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8002798:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800279c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027a0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80027a4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80027a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027ac:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80027b0:	e7eb      	b.n	800278a <USB_EPSetStall+0x32>

080027b2 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 80027b2:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80027b4:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027bc:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 80027c0:	d111      	bne.n	80027e6 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027c2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80027c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027ca:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80027ce:	78cb      	ldrb	r3, [r1, #3]
 80027d0:	3b02      	subs	r3, #2
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d805      	bhi.n	80027e2 <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80027d6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80027da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027de:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80027e2:	2000      	movs	r0, #0
 80027e4:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027e6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80027ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027ee:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80027f2:	78cb      	ldrb	r3, [r1, #3]
 80027f4:	3b02      	subs	r3, #2
 80027f6:	2b01      	cmp	r3, #1
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80027f8:	bf9e      	ittt	ls
 80027fa:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 80027fe:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8002802:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 8002806:	e7ec      	b.n	80027e2 <USB_EPClearStall+0x30>

08002808 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8002808:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800280c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002810:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8002814:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002818:	0109      	lsls	r1, r1, #4
 800281a:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800281e:	4319      	orrs	r1, r3
 8002820:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002824:	2000      	movs	r0, #0
 8002826:	4770      	bx	lr

08002828 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002828:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 800282c:	f023 0303 	bic.w	r3, r3, #3
 8002830:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8002834:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002838:	f023 0302 	bic.w	r3, r3, #2
 800283c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8002840:	2000      	movs	r0, #0
 8002842:	4770      	bx	lr

08002844 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002844:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8002848:	f023 0303 	bic.w	r3, r3, #3
 800284c:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002850:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800285c:	2000      	movs	r0, #0
 800285e:	4770      	bx	lr

08002860 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8002860:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002862:	6980      	ldr	r0, [r0, #24]
}
 8002864:	4010      	ands	r0, r2
 8002866:	4770      	bx	lr

08002868 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8002868:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800286c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002870:	69c0      	ldr	r0, [r0, #28]
 8002872:	4018      	ands	r0, r3
}
 8002874:	0c00      	lsrs	r0, r0, #16
 8002876:	4770      	bx	lr

08002878 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8002878:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800287c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002880:	69c0      	ldr	r0, [r0, #28]
 8002882:	4018      	ands	r0, r3
}
 8002884:	b280      	uxth	r0, r0
 8002886:	4770      	bx	lr

08002888 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8002888:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800288c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8002890:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002894:	6940      	ldr	r0, [r0, #20]
}
 8002896:	4010      	ands	r0, r2
 8002898:	4770      	bx	lr

0800289a <USB_ReadDevInEPInterrupt>:
{
 800289a:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 800289c:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80028a0:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80028a4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80028a8:	f001 010f 	and.w	r1, r1, #15
 80028ac:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80028ae:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80028b2:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80028b4:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	4323      	orrs	r3, r4
}
 80028ba:	4018      	ands	r0, r3
 80028bc:	bd10      	pop	{r4, pc}

080028be <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80028be:	6940      	ldr	r0, [r0, #20]
}
 80028c0:	f000 0001 	and.w	r0, r0, #1
 80028c4:	4770      	bx	lr

080028c6 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80028c6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80028ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80028ce:	f023 0307 	bic.w	r3, r3, #7
 80028d2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80028d6:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80028da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028de:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 80028e2:	2000      	movs	r0, #0
 80028e4:	4770      	bx	lr
	...

080028e8 <USB_EP0_OutStart>:
{
 80028e8:	b510      	push	{r4, lr}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80028ea:	4b16      	ldr	r3, [pc, #88]	; (8002944 <USB_EP0_OutStart+0x5c>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028ec:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80028ee:	429c      	cmp	r4, r3
 80028f0:	d903      	bls.n	80028fa <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80028f2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	db21      	blt.n	800293e <USB_EP0_OutStart+0x56>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80028fa:	2400      	movs	r4, #0
 80028fc:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002900:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002904:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002908:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800290c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002910:	f044 0418 	orr.w	r4, r4, #24
 8002914:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8002918:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 800291c:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800291e:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8002922:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8002926:	bf08      	it	eq
 8002928:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800292c:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8002930:	bf02      	ittt	eq
 8002932:	f8d0 3b00 	ldreq.w	r3, [r0, #2816]	; 0xb00
 8002936:	f043 2380 	orreq.w	r3, r3, #2147516416	; 0x80008000
 800293a:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
}
 800293e:	2000      	movs	r0, #0
 8002940:	bd10      	pop	{r4, pc}
 8002942:	bf00      	nop
 8002944:	4f54300a 	.word	0x4f54300a

08002948 <USBD_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8002948:	2322      	movs	r3, #34	; 0x22
 800294a:	8003      	strh	r3, [r0, #0]

  return USBD_HID_CfgFSDesc;
}
 800294c:	4800      	ldr	r0, [pc, #0]	; (8002950 <USBD_HID_GetFSCfgDesc+0x8>)
 800294e:	4770      	bx	lr
 8002950:	2000008c 	.word	0x2000008c

08002954 <USBD_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8002954:	2322      	movs	r3, #34	; 0x22
 8002956:	8003      	strh	r3, [r0, #0]

  return USBD_HID_CfgHSDesc;
}
 8002958:	4800      	ldr	r0, [pc, #0]	; (800295c <USBD_HID_GetHSCfgDesc+0x8>)
 800295a:	4770      	bx	lr
 800295c:	200000b0 	.word	0x200000b0

08002960 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8002960:	2322      	movs	r3, #34	; 0x22
 8002962:	8003      	strh	r3, [r0, #0]

  return USBD_HID_OtherSpeedCfgDesc;
}
 8002964:	4800      	ldr	r0, [pc, #0]	; (8002968 <USBD_HID_GetOtherSpeedCfgDesc+0x8>)
 8002966:	4770      	bx	lr
 8002968:	200000ec 	.word	0x200000ec

0800296c <USBD_HID_DataIn>:
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800296c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8002970:	2000      	movs	r0, #0
 8002972:	7318      	strb	r0, [r3, #12]

  return (uint8_t)USBD_OK;
}
 8002974:	4770      	bx	lr
	...

08002978 <USBD_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8002978:	230a      	movs	r3, #10
 800297a:	8003      	strh	r3, [r0, #0]

  return USBD_HID_DeviceQualifierDesc;
}
 800297c:	4800      	ldr	r0, [pc, #0]	; (8002980 <USBD_HID_GetDeviceQualifierDesc+0x8>)
 800297e:	4770      	bx	lr
 8002980:	200000e0 	.word	0x200000e0

08002984 <USBD_HID_Setup>:
{
 8002984:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t status_info = 0U;
 8002986:	2500      	movs	r5, #0
 8002988:	f8ad 5006 	strh.w	r5, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800298c:	780d      	ldrb	r5, [r1, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800298e:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002992:	f015 0560 	ands.w	r5, r5, #96	; 0x60
{
 8002996:	4603      	mov	r3, r0
 8002998:	460a      	mov	r2, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800299a:	d01d      	beq.n	80029d8 <USBD_HID_Setup+0x54>
 800299c:	2d20      	cmp	r5, #32
 800299e:	d164      	bne.n	8002a6a <USBD_HID_Setup+0xe6>
    switch (req->bRequest)
 80029a0:	7849      	ldrb	r1, [r1, #1]
 80029a2:	3902      	subs	r1, #2
 80029a4:	2909      	cmp	r1, #9
 80029a6:	d85e      	bhi.n	8002a66 <USBD_HID_Setup+0xe2>
 80029a8:	e8df f001 	tbb	[pc, r1]
 80029ac:	5d5d0913 	.word	0x5d5d0913
 80029b0:	5d5d5d5d 	.word	0x5d5d5d5d
 80029b4:	050f      	.short	0x050f
      hhid->Protocol = (uint8_t)(req->wValue);
 80029b6:	7893      	ldrb	r3, [r2, #2]
 80029b8:	6023      	str	r3, [r4, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80029ba:	2000      	movs	r0, #0
 80029bc:	e058      	b.n	8002a70 <USBD_HID_Setup+0xec>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80029be:	2201      	movs	r2, #1
 80029c0:	4621      	mov	r1, r4
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 fc10 	bl	80031e8 <USBD_CtlSendData>
 80029c8:	e7f7      	b.n	80029ba <USBD_HID_Setup+0x36>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80029ca:	8853      	ldrh	r3, [r2, #2]
 80029cc:	0a1b      	lsrs	r3, r3, #8
 80029ce:	6063      	str	r3, [r4, #4]
 80029d0:	e7f3      	b.n	80029ba <USBD_HID_Setup+0x36>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80029d2:	2201      	movs	r2, #1
 80029d4:	1d21      	adds	r1, r4, #4
 80029d6:	e7f4      	b.n	80029c2 <USBD_HID_Setup+0x3e>
    switch (req->bRequest)
 80029d8:	7849      	ldrb	r1, [r1, #1]
 80029da:	290b      	cmp	r1, #11
 80029dc:	d843      	bhi.n	8002a66 <USBD_HID_Setup+0xe2>
 80029de:	a001      	add	r0, pc, #4	; (adr r0, 80029e4 <USBD_HID_Setup+0x60>)
 80029e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80029e4:	08002a15 	.word	0x08002a15
 80029e8:	080029bb 	.word	0x080029bb
 80029ec:	08002a67 	.word	0x08002a67
 80029f0:	08002a67 	.word	0x08002a67
 80029f4:	08002a67 	.word	0x08002a67
 80029f8:	08002a67 	.word	0x08002a67
 80029fc:	08002a25 	.word	0x08002a25
 8002a00:	08002a67 	.word	0x08002a67
 8002a04:	08002a67 	.word	0x08002a67
 8002a08:	08002a67 	.word	0x08002a67
 8002a0c:	08002a49 	.word	0x08002a49
 8002a10:	08002a59 	.word	0x08002a59
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002a14:	f893 129c 	ldrb.w	r1, [r3, #668]	; 0x29c
 8002a18:	2903      	cmp	r1, #3
 8002a1a:	d124      	bne.n	8002a66 <USBD_HID_Setup+0xe2>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	f10d 0106 	add.w	r1, sp, #6
 8002a22:	e7ce      	b.n	80029c2 <USBD_HID_Setup+0x3e>
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8002a24:	8851      	ldrh	r1, [r2, #2]
 8002a26:	0a09      	lsrs	r1, r1, #8
 8002a28:	2922      	cmp	r1, #34	; 0x22
 8002a2a:	d105      	bne.n	8002a38 <USBD_HID_Setup+0xb4>
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8002a2c:	88d2      	ldrh	r2, [r2, #6]
        pbuf = HID_MOUSE_ReportDesc;
 8002a2e:	4911      	ldr	r1, [pc, #68]	; (8002a74 <USBD_HID_Setup+0xf0>)
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8002a30:	2a4a      	cmp	r2, #74	; 0x4a
 8002a32:	bf28      	it	cs
 8002a34:	224a      	movcs	r2, #74	; 0x4a
 8002a36:	e7c4      	b.n	80029c2 <USBD_HID_Setup+0x3e>
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8002a38:	2921      	cmp	r1, #33	; 0x21
 8002a3a:	d114      	bne.n	8002a66 <USBD_HID_Setup+0xe2>
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8002a3c:	88d2      	ldrh	r2, [r2, #6]
        pbuf = USBD_HID_Desc;
 8002a3e:	490e      	ldr	r1, [pc, #56]	; (8002a78 <USBD_HID_Setup+0xf4>)
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8002a40:	2a09      	cmp	r2, #9
 8002a42:	bf28      	it	cs
 8002a44:	2209      	movcs	r2, #9
 8002a46:	e7bc      	b.n	80029c2 <USBD_HID_Setup+0x3e>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002a48:	f893 129c 	ldrb.w	r1, [r3, #668]	; 0x29c
 8002a4c:	2903      	cmp	r1, #3
 8002a4e:	d10a      	bne.n	8002a66 <USBD_HID_Setup+0xe2>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8002a50:	2201      	movs	r2, #1
 8002a52:	f104 0108 	add.w	r1, r4, #8
 8002a56:	e7b4      	b.n	80029c2 <USBD_HID_Setup+0x3e>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002a58:	f893 129c 	ldrb.w	r1, [r3, #668]	; 0x29c
 8002a5c:	2903      	cmp	r1, #3
 8002a5e:	d102      	bne.n	8002a66 <USBD_HID_Setup+0xe2>
        hhid->AltSetting = (uint8_t)(req->wValue);
 8002a60:	7893      	ldrb	r3, [r2, #2]
 8002a62:	60a3      	str	r3, [r4, #8]
 8002a64:	e7a9      	b.n	80029ba <USBD_HID_Setup+0x36>
      USBD_CtlError(pdev, req);
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
    USBD_CtlError(pdev, req);
 8002a6a:	f000 fb96 	bl	800319a <USBD_CtlError>
    ret = USBD_FAIL;
 8002a6e:	2003      	movs	r0, #3
}
 8002a70:	b003      	add	sp, #12
 8002a72:	bd30      	pop	{r4, r5, pc}
 8002a74:	20000008 	.word	0x20000008
 8002a78:	200000d4 	.word	0x200000d4

08002a7c <USBD_HID_DeInit>:
{
 8002a7c:	b538      	push	{r3, r4, r5, lr}
 8002a7e:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8002a80:	2181      	movs	r1, #129	; 0x81
 8002a82:	f000 fe2d 	bl	80036e0 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8002a86:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8002a8a:	2500      	movs	r5, #0
 8002a8c:	8725      	strh	r5, [r4, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8002a8e:	8765      	strh	r5, [r4, #58]	; 0x3a
  if (pdev->pClassData != NULL)
 8002a90:	b118      	cbz	r0, 8002a9a <USBD_HID_DeInit+0x1e>
    (void)USBD_free(pdev->pClassData);
 8002a92:	f000 ff61 	bl	8003958 <free>
    pdev->pClassData = NULL;
 8002a96:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	bd38      	pop	{r3, r4, r5, pc}

08002a9e <USBD_HID_Init>:
{
 8002a9e:	b538      	push	{r3, r4, r5, lr}
 8002aa0:	4604      	mov	r4, r0
  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8002aa2:	2010      	movs	r0, #16
 8002aa4:	f000 ff50 	bl	8003948 <malloc>
  if (hhid == NULL)
 8002aa8:	4605      	mov	r5, r0
    pdev->pClassData = NULL;
 8002aaa:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (hhid == NULL)
 8002aae:	b908      	cbnz	r0, 8002ab4 <USBD_HID_Init+0x16>
    return (uint8_t)USBD_EMEM;
 8002ab0:	2002      	movs	r0, #2
 8002ab2:	bd38      	pop	{r3, r4, r5, pc}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002ab4:	7c23      	ldrb	r3, [r4, #16]
 8002ab6:	b963      	cbnz	r3, 8002ad2 <USBD_HID_Init+0x34>
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8002ab8:	2307      	movs	r3, #7
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8002aba:	8763      	strh	r3, [r4, #58]	; 0x3a
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8002abc:	2203      	movs	r2, #3
 8002abe:	2304      	movs	r3, #4
 8002ac0:	2181      	movs	r1, #129	; 0x81
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	f000 fdfc 	bl	80036c0 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8002ac8:	2301      	movs	r3, #1
  hhid->state = HID_IDLE;
 8002aca:	2000      	movs	r0, #0
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8002acc:	8723      	strh	r3, [r4, #56]	; 0x38
  hhid->state = HID_IDLE;
 8002ace:	7328      	strb	r0, [r5, #12]
}
 8002ad0:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8002ad2:	230a      	movs	r3, #10
 8002ad4:	e7f1      	b.n	8002aba <USBD_HID_Init+0x1c>

08002ad6 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8002ad6:	b1a0      	cbz	r0, 8002b02 <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8002ad8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8002adc:	b113      	cbz	r3, 8002ae4 <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8002ae4:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 8002ae8:	b113      	cbz	r3, 8002af0 <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8002af0:	b109      	cbz	r1, 8002af6 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8002af2:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002af6:	2301      	movs	r3, #1
 8002af8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8002afc:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8002afe:	f000 bda3 	b.w	8003648 <USBD_LL_Init>

  return ret;
}
 8002b02:	2003      	movs	r0, #3
 8002b04:	4770      	bx	lr

08002b06 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8002b06:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t len = 0U;
 8002b08:	2400      	movs	r4, #0
{
 8002b0a:	4605      	mov	r5, r0
  uint16_t len = 0U;
 8002b0c:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 8002b10:	b151      	cbz	r1, 8002b28 <USBD_RegisterClass+0x22>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8002b12:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002b16:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002b18:	f10d 0006 	add.w	r0, sp, #6
 8002b1c:	4798      	blx	r3
 8002b1e:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8002b22:	4620      	mov	r0, r4
}
 8002b24:	b003      	add	sp, #12
 8002b26:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 8002b28:	2003      	movs	r0, #3
 8002b2a:	e7fb      	b.n	8002b24 <USBD_RegisterClass+0x1e>

08002b2c <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8002b2c:	f000 bdba 	b.w	80036a4 <USBD_LL_Start>

08002b30 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8002b30:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8002b34:	b10b      	cbz	r3, 8002b3a <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4718      	bx	r3
  }

  return ret;
}
 8002b3a:	2003      	movs	r0, #3
 8002b3c:	4770      	bx	lr

08002b3e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8002b3e:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8002b40:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8002b44:	b10b      	cbz	r3, 8002b4a <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4798      	blx	r3
  }

  return USBD_OK;
}
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	bd08      	pop	{r3, pc}

08002b4e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002b4e:	b538      	push	{r3, r4, r5, lr}
 8002b50:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002b52:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8002b56:	4628      	mov	r0, r5
 8002b58:	f000 fb0b 	bl	8003172 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002b5c:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8002b5e:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 8002b62:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8002b66:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8002b6a:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8002b6e:	f001 031f 	and.w	r3, r1, #31
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d00f      	beq.n	8002b96 <USBD_LL_SetupStage+0x48>
 8002b76:	d308      	bcc.n	8002b8a <USBD_LL_SetupStage+0x3c>
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d012      	beq.n	8002ba2 <USBD_LL_SetupStage+0x54>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8002b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002b86:	f000 bdb9 	b.w	80036fc <USBD_LL_StallEP>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	4620      	mov	r0, r4
}
 8002b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8002b92:	f000 b8f5 	b.w	8002d80 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8002b96:	4629      	mov	r1, r5
 8002b98:	4620      	mov	r0, r4
}
 8002b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8002b9e:	f000 ba2f 	b.w	8003000 <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	4620      	mov	r0, r4
}
 8002ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8002baa:	f000 ba50 	b.w	800304e <USBD_StdEPReq>

08002bae <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002bae:	b570      	push	{r4, r5, r6, lr}
 8002bb0:	4604      	mov	r4, r0
 8002bb2:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8002bb4:	bb09      	cbnz	r1, 8002bfa <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002bb6:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d10e      	bne.n	8002bdc <USBD_LL_DataOutStage+0x2e>
    {
      if (pep->rem_length > pep->maxpacket)
 8002bbe:	f8d0 315c 	ldr.w	r3, [r0, #348]	; 0x15c
 8002bc2:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d90a      	bls.n	8002be0 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 8002bca:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8002bcc:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8002bce:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8002bd2:	bf28      	it	cs
 8002bd4:	461a      	movcs	r2, r3
 8002bd6:	4631      	mov	r1, r6
 8002bd8:	f000 fb1b 	bl	8003212 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002bdc:	2000      	movs	r0, #0
 8002bde:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8002be0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	b123      	cbz	r3, 8002bf2 <USBD_LL_DataOutStage+0x44>
 8002be8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002bec:	2a03      	cmp	r2, #3
 8002bee:	d100      	bne.n	8002bf2 <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 8002bf0:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	f000 fb15 	bl	8003222 <USBD_CtlSendStatus>
 8002bf8:	e7f0      	b.n	8002bdc <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8002bfa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	b133      	cbz	r3, 8002c10 <USBD_LL_DataOutStage+0x62>
 8002c02:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002c06:	2a03      	cmp	r2, #3
 8002c08:	d102      	bne.n	8002c10 <USBD_LL_DataOutStage+0x62>
}
 8002c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8002c0e:	4718      	bx	r3
    return USBD_FAIL;
 8002c10:	2003      	movs	r0, #3
}
 8002c12:	bd70      	pop	{r4, r5, r6, pc}

08002c14 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8002c14:	b570      	push	{r4, r5, r6, lr}
 8002c16:	4604      	mov	r4, r0
 8002c18:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8002c1a:	460d      	mov	r5, r1
 8002c1c:	2900      	cmp	r1, #0
 8002c1e:	d13b      	bne.n	8002c98 <USBD_LL_DataInStage+0x84>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8002c20:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d10e      	bne.n	8002c46 <USBD_LL_DataInStage+0x32>
    {
      if (pep->rem_length > pep->maxpacket)
 8002c28:	69c2      	ldr	r2, [r0, #28]
 8002c2a:	6a03      	ldr	r3, [r0, #32]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d913      	bls.n	8002c58 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8002c30:	1ad2      	subs	r2, r2, r3
 8002c32:	61c2      	str	r2, [r0, #28]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8002c34:	4631      	mov	r1, r6
 8002c36:	f000 fae4 	bl	8003202 <USBD_CtlContinueSendData>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002c3a:	462b      	mov	r3, r5
 8002c3c:	462a      	mov	r2, r5
 8002c3e:	4629      	mov	r1, r5
 8002c40:	4620      	mov	r0, r4
 8002c42:	f000 fda7 	bl	8003794 <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8002c46:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	f04f 0000 	mov.w	r0, #0
 8002c50:	d12e      	bne.n	8002cb0 <USBD_LL_DataInStage+0x9c>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8002c52:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 8002c56:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 8002c58:	d10c      	bne.n	8002c74 <USBD_LL_DataInStage+0x60>
            (pep->total_length >= pep->maxpacket) &&
 8002c5a:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d809      	bhi.n	8002c74 <USBD_LL_DataInStage+0x60>
            (pep->total_length >= pep->maxpacket) &&
 8002c60:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d205      	bcs.n	8002c74 <USBD_LL_DataInStage+0x60>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8002c68:	460a      	mov	r2, r1
 8002c6a:	f000 faca 	bl	8003202 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8002c6e:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8002c72:	e7e2      	b.n	8002c3a <USBD_LL_DataInStage+0x26>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8002c74:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	b12b      	cbz	r3, 8002c88 <USBD_LL_DataInStage+0x74>
 8002c7c:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8002c80:	2a03      	cmp	r2, #3
 8002c82:	d101      	bne.n	8002c88 <USBD_LL_DataInStage+0x74>
            pdev->pClass->EP0_TxSent(pdev);
 8002c84:	4620      	mov	r0, r4
 8002c86:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8002c88:	2180      	movs	r1, #128	; 0x80
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	f000 fd36 	bl	80036fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8002c90:	4620      	mov	r0, r4
 8002c92:	f000 fad1 	bl	8003238 <USBD_CtlReceiveStatus>
 8002c96:	e7d6      	b.n	8002c46 <USBD_LL_DataInStage+0x32>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8002c98:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	b133      	cbz	r3, 8002cae <USBD_LL_DataInStage+0x9a>
 8002ca0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002ca4:	2a03      	cmp	r2, #3
 8002ca6:	d102      	bne.n	8002cae <USBD_LL_DataInStage+0x9a>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8002ca8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8002cac:	4718      	bx	r3
    return USBD_FAIL;
 8002cae:	2003      	movs	r0, #3
}
 8002cb0:	bd70      	pop	{r4, r5, r6, pc}

08002cb2 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002cb2:	2301      	movs	r3, #1
{
 8002cb4:	b570      	push	{r4, r5, r6, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002cb6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 8002cba:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
  pdev->ep0_state = USBD_EP0_IDLE;
 8002cbe:	2100      	movs	r1, #0
{
 8002cc0:	4604      	mov	r4, r0
  pdev->ep0_state = USBD_EP0_IDLE;
 8002cc2:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8002cc6:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8002cc8:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 8002ccc:	b11b      	cbz	r3, 8002cd6 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002cce:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002cd6:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002cd8:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002cda:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002cdc:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002cde:	2340      	movs	r3, #64	; 0x40
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	f000 fced 	bl	80036c0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002ce6:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002cea:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002cee:	462b      	mov	r3, r5
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2180      	movs	r1, #128	; 0x80
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f000 fce3 	bl	80036c0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8002cfa:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002cfc:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 8002cfe:	2000      	movs	r0, #0
 8002d00:	bd70      	pop	{r4, r5, r6, pc}

08002d02 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002d02:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8002d04:	2000      	movs	r0, #0
 8002d06:	4770      	bx	lr

08002d08 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8002d08:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002d0c:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8002d10:	2304      	movs	r3, #4
 8002d12:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8002d16:	2000      	movs	r0, #0
 8002d18:	4770      	bx	lr

08002d1a <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8002d1a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002d1e:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8002d20:	bf04      	itt	eq
 8002d22:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8002d26:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	4770      	bx	lr

08002d2e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8002d2e:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002d30:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002d34:	2a03      	cmp	r2, #3
 8002d36:	d104      	bne.n	8002d42 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8002d38:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	b103      	cbz	r3, 8002d42 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002d40:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8002d42:	2000      	movs	r0, #0
 8002d44:	bd08      	pop	{r3, pc}

08002d46 <USBD_LL_IsoINIncomplete>:
 8002d46:	2000      	movs	r0, #0
 8002d48:	4770      	bx	lr

08002d4a <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	4770      	bx	lr

08002d4e <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8002d4e:	2000      	movs	r0, #0
 8002d50:	4770      	bx	lr

08002d52 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002d52:	2201      	movs	r2, #1
{
 8002d54:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002d56:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8002d5a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8002d5e:	b112      	cbz	r2, 8002d66 <USBD_LL_DevDisconnected+0x14>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002d60:	6852      	ldr	r2, [r2, #4]
 8002d62:	7901      	ldrb	r1, [r0, #4]
 8002d64:	4790      	blx	r2
  }

  return USBD_OK;
}
 8002d66:	2000      	movs	r0, #0
 8002d68:	bd08      	pop	{r3, pc}

08002d6a <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8002d6a:	b510      	push	{r4, lr}
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8002d6c:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8002d6e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8002d70:	f000 fcc4 	bl	80036fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8002d74:	4620      	mov	r0, r4
 8002d76:	2100      	movs	r1, #0
}
 8002d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8002d7c:	f000 bcbe 	b.w	80036fc <USBD_LL_StallEP>

08002d80 <USBD_StdDevReq>:
{
 8002d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002d82:	780b      	ldrb	r3, [r1, #0]
 8002d84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002d88:	2b20      	cmp	r3, #32
{
 8002d8a:	4604      	mov	r4, r0
 8002d8c:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002d8e:	d012      	beq.n	8002db6 <USBD_StdDevReq+0x36>
 8002d90:	2b40      	cmp	r3, #64	; 0x40
 8002d92:	d010      	beq.n	8002db6 <USBD_StdDevReq+0x36>
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d159      	bne.n	8002e4c <USBD_StdDevReq+0xcc>
    switch (req->bRequest)
 8002d98:	784b      	ldrb	r3, [r1, #1]
 8002d9a:	2b09      	cmp	r3, #9
 8002d9c:	d855      	bhi.n	8002e4a <USBD_StdDevReq+0xca>
 8002d9e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002da2:	0100      	.short	0x0100
 8002da4:	0054011e 	.word	0x0054011e
 8002da8:	00540115 	.word	0x00540115
 8002dac:	00140081 	.word	0x00140081
 8002db0:	00e90054 	.word	0x00e90054
 8002db4:	00a0      	.short	0x00a0
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8002db6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8002dba:	4631      	mov	r1, r6
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	4798      	blx	r3
 8002dc2:	4605      	mov	r5, r0
}
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	b003      	add	sp, #12
 8002dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint16_t len = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8002dd0:	884b      	ldrh	r3, [r1, #2]
 8002dd2:	0a1a      	lsrs	r2, r3, #8
 8002dd4:	3a01      	subs	r2, #1
 8002dd6:	2a06      	cmp	r2, #6
 8002dd8:	d837      	bhi.n	8002e4a <USBD_StdDevReq+0xca>
 8002dda:	e8df f002 	tbb	[pc, r2]
 8002dde:	1c04      	.short	0x1c04
 8002de0:	4e363629 	.word	0x4e363629
 8002de4:	58          	.byte	0x58
 8002de5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002de6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002dea:	681b      	ldr	r3, [r3, #0]
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002dec:	7c20      	ldrb	r0, [r4, #16]
 8002dee:	f10d 0106 	add.w	r1, sp, #6
 8002df2:	4798      	blx	r3
    if (req->wLength != 0U)
 8002df4:	88f2      	ldrh	r2, [r6, #6]
 8002df6:	2a00      	cmp	r2, #0
 8002df8:	f000 80ed 	beq.w	8002fd6 <USBD_StdDevReq+0x256>
      if (len != 0U)
 8002dfc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002e00:	b31b      	cbz	r3, 8002e4a <USBD_StdDevReq+0xca>
        len = MIN(len, req->wLength);
 8002e02:	429a      	cmp	r2, r3
 8002e04:	bf28      	it	cs
 8002e06:	461a      	movcs	r2, r3
 8002e08:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8002e0c:	4601      	mov	r1, r0
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8002e0e:	4620      	mov	r0, r4
 8002e10:	f000 f9ea 	bl	80031e8 <USBD_CtlSendData>
 8002e14:	e05f      	b.n	8002ed6 <USBD_StdDevReq+0x156>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002e16:	7c02      	ldrb	r2, [r0, #16]
 8002e18:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8002e1c:	b932      	cbnz	r2, 8002e2c <USBD_StdDevReq+0xac>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8002e20:	f10d 0006 	add.w	r0, sp, #6
 8002e24:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002e26:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002e28:	7043      	strb	r3, [r0, #1]
 8002e2a:	e7e3      	b.n	8002df4 <USBD_StdDevReq+0x74>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	e7f7      	b.n	8002e20 <USBD_StdDevReq+0xa0>
    switch ((uint8_t)(req->wValue))
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b05      	cmp	r3, #5
 8002e34:	d809      	bhi.n	8002e4a <USBD_StdDevReq+0xca>
 8002e36:	e8df f003 	tbb	[pc, r3]
 8002e3a:	0c03      	.short	0x0c03
 8002e3c:	1c181410 	.word	0x1c181410
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8002e40:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002e44:	685b      	ldr	r3, [r3, #4]
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1d0      	bne.n	8002dec <USBD_StdDevReq+0x6c>
      USBD_CtlError(pdev, req);
 8002e4a:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8002e4c:	f7ff ff8d 	bl	8002d6a <USBD_CtlError.constprop.1>
 8002e50:	e041      	b.n	8002ed6 <USBD_StdDevReq+0x156>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8002e52:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	e7f5      	b.n	8002e46 <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8002e5a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	e7f1      	b.n	8002e46 <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8002e62:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	e7ed      	b.n	8002e46 <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8002e6a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	e7e9      	b.n	8002e46 <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8002e72:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	e7e5      	b.n	8002e46 <USBD_StdDevReq+0xc6>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002e7a:	7c03      	ldrb	r3, [r0, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1e4      	bne.n	8002e4a <USBD_StdDevReq+0xca>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002e80:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8002e84:	f10d 0006 	add.w	r0, sp, #6
 8002e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8a:	4798      	blx	r3
 8002e8c:	e7b2      	b.n	8002df4 <USBD_StdDevReq+0x74>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002e8e:	7c03      	ldrb	r3, [r0, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1da      	bne.n	8002e4a <USBD_StdDevReq+0xca>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002e94:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8002e98:	f10d 0006 	add.w	r0, sp, #6
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002ea0:	2307      	movs	r3, #7
 8002ea2:	e7c1      	b.n	8002e28 <USBD_StdDevReq+0xa8>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8002ea4:	888b      	ldrh	r3, [r1, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1cf      	bne.n	8002e4a <USBD_StdDevReq+0xca>
 8002eaa:	88cf      	ldrh	r7, [r1, #6]
 8002eac:	2f00      	cmp	r7, #0
 8002eae:	d1cc      	bne.n	8002e4a <USBD_StdDevReq+0xca>
 8002eb0:	884d      	ldrh	r5, [r1, #2]
 8002eb2:	2d7f      	cmp	r5, #127	; 0x7f
 8002eb4:	d8c9      	bhi.n	8002e4a <USBD_StdDevReq+0xca>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002eb6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002eba:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8002ebc:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002ebe:	d0c4      	beq.n	8002e4a <USBD_StdDevReq+0xca>
      pdev->dev_address = dev_addr;
 8002ec0:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8002ec4:	f000 fc4a 	bl	800375c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f000 f9aa 	bl	8003222 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8002ece:	b125      	cbz	r5, 8002eda <USBD_StdDevReq+0x15a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
  USBD_StatusTypeDef ret = USBD_OK;
 8002ed6:	2500      	movs	r5, #0
 8002ed8:	e774      	b.n	8002dc4 <USBD_StdDevReq+0x44>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8002eda:	2301      	movs	r3, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002edc:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8002ee0:	e770      	b.n	8002dc4 <USBD_StdDevReq+0x44>
  cfgidx = (uint8_t)(req->wValue);
 8002ee2:	788d      	ldrb	r5, [r1, #2]
 8002ee4:	4e45      	ldr	r6, [pc, #276]	; (8002ffc <USBD_StdDevReq+0x27c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002ee6:	2d01      	cmp	r5, #1
  cfgidx = (uint8_t)(req->wValue);
 8002ee8:	7035      	strb	r5, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002eea:	d903      	bls.n	8002ef4 <USBD_StdDevReq+0x174>
    USBD_CtlError(pdev, req);
 8002eec:	f7ff ff3d 	bl	8002d6a <USBD_CtlError.constprop.1>
    ret = USBD_FAIL;
 8002ef0:	2503      	movs	r5, #3
 8002ef2:	e767      	b.n	8002dc4 <USBD_StdDevReq+0x44>
  switch (pdev->dev_state)
 8002ef4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d008      	beq.n	8002f0e <USBD_StdDevReq+0x18e>
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d016      	beq.n	8002f2e <USBD_StdDevReq+0x1ae>
    USBD_CtlError(pdev, req);
 8002f00:	f7ff ff33 	bl	8002d6a <USBD_CtlError.constprop.1>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8002f04:	7831      	ldrb	r1, [r6, #0]
 8002f06:	4620      	mov	r0, r4
 8002f08:	f7ff fe19 	bl	8002b3e <USBD_ClrClassConfig>
 8002f0c:	e7f0      	b.n	8002ef0 <USBD_StdDevReq+0x170>
    if (cfgidx != 0U)
 8002f0e:	2d00      	cmp	r5, #0
 8002f10:	d061      	beq.n	8002fd6 <USBD_StdDevReq+0x256>
      pdev->dev_config = cfgidx;
 8002f12:	2101      	movs	r1, #1
 8002f14:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8002f16:	f7ff fe0b 	bl	8002b30 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8002f1a:	4605      	mov	r5, r0
        USBD_CtlError(pdev, req);
 8002f1c:	4620      	mov	r0, r4
      if (ret != USBD_OK)
 8002f1e:	b115      	cbz	r5, 8002f26 <USBD_StdDevReq+0x1a6>
      USBD_CtlError(pdev, req);
 8002f20:	f7ff ff23 	bl	8002d6a <USBD_CtlError.constprop.1>
 8002f24:	e74e      	b.n	8002dc4 <USBD_StdDevReq+0x44>
        (void)USBD_CtlSendStatus(pdev);
 8002f26:	f000 f97c 	bl	8003222 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e7d6      	b.n	8002edc <USBD_StdDevReq+0x15c>
    if (cfgidx == 0U)
 8002f2e:	b955      	cbnz	r5, 8002f46 <USBD_StdDevReq+0x1c6>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8002f30:	2302      	movs	r3, #2
 8002f32:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8002f36:	6045      	str	r5, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8002f38:	4629      	mov	r1, r5
 8002f3a:	f7ff fe00 	bl	8002b3e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8002f3e:	4620      	mov	r0, r4
 8002f40:	f000 f96f 	bl	8003222 <USBD_CtlSendStatus>
 8002f44:	e73e      	b.n	8002dc4 <USBD_StdDevReq+0x44>
    else if (cfgidx != pdev->dev_config)
 8002f46:	6841      	ldr	r1, [r0, #4]
 8002f48:	2901      	cmp	r1, #1
 8002f4a:	d044      	beq.n	8002fd6 <USBD_StdDevReq+0x256>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8002f4c:	b2c9      	uxtb	r1, r1
 8002f4e:	f7ff fdf6 	bl	8002b3e <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8002f52:	7831      	ldrb	r1, [r6, #0]
 8002f54:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8002f56:	4620      	mov	r0, r4
 8002f58:	f7ff fdea 	bl	8002b30 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8002f5c:	4605      	mov	r5, r0
 8002f5e:	2800      	cmp	r0, #0
 8002f60:	d039      	beq.n	8002fd6 <USBD_StdDevReq+0x256>
        USBD_CtlError(pdev, req);
 8002f62:	4620      	mov	r0, r4
 8002f64:	f7ff ff01 	bl	8002d6a <USBD_CtlError.constprop.1>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8002f68:	7921      	ldrb	r1, [r4, #4]
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f7ff fde7 	bl	8002b3e <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002f70:	2302      	movs	r3, #2
 8002f72:	e7b3      	b.n	8002edc <USBD_StdDevReq+0x15c>
  if (req->wLength != 1U)
 8002f74:	88ca      	ldrh	r2, [r1, #6]
 8002f76:	2a01      	cmp	r2, #1
 8002f78:	f47f af67 	bne.w	8002e4a <USBD_StdDevReq+0xca>
    switch (pdev->dev_state)
 8002f7c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f43f af62 	beq.w	8002e4a <USBD_StdDevReq+0xca>
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d904      	bls.n	8002f94 <USBD_StdDevReq+0x214>
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	f47f af5d 	bne.w	8002e4a <USBD_StdDevReq+0xca>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8002f90:	1d01      	adds	r1, r0, #4
 8002f92:	e73c      	b.n	8002e0e <USBD_StdDevReq+0x8e>
      pdev->dev_default_config = 0U;
 8002f94:	4601      	mov	r1, r0
 8002f96:	2500      	movs	r5, #0
 8002f98:	f841 5f08 	str.w	r5, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8002f9c:	f000 f924 	bl	80031e8 <USBD_CtlSendData>
 8002fa0:	e710      	b.n	8002dc4 <USBD_StdDevReq+0x44>
  switch (pdev->dev_state)
 8002fa2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	f63f af4e 	bhi.w	8002e4a <USBD_StdDevReq+0xca>
    if (req->wLength != 0x2U)
 8002fae:	88cb      	ldrh	r3, [r1, #6]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	f47f af4a 	bne.w	8002e4a <USBD_StdDevReq+0xca>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8002fba:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8002fbe:	b10b      	cbz	r3, 8002fc4 <USBD_StdDevReq+0x244>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	f104 010c 	add.w	r1, r4, #12
 8002fca:	e720      	b.n	8002e0e <USBD_StdDevReq+0x8e>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002fcc:	884b      	ldrh	r3, [r1, #2]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d181      	bne.n	8002ed6 <USBD_StdDevReq+0x156>
    pdev->dev_remote_wakeup = 1U;
 8002fd2:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	f000 f923 	bl	8003222 <USBD_CtlSendStatus>
 8002fdc:	e77b      	b.n	8002ed6 <USBD_StdDevReq+0x156>
  switch (pdev->dev_state)
 8002fde:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	f04f 0500 	mov.w	r5, #0
 8002fea:	d899      	bhi.n	8002f20 <USBD_StdDevReq+0x1a0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002fec:	884b      	ldrh	r3, [r1, #2]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	f47f aee8 	bne.w	8002dc4 <USBD_StdDevReq+0x44>
        pdev->dev_remote_wakeup = 0U;
 8002ff4:	f8c0 52a4 	str.w	r5, [r0, #676]	; 0x2a4
 8002ff8:	e7a1      	b.n	8002f3e <USBD_StdDevReq+0x1be>
 8002ffa:	bf00      	nop
 8002ffc:	200001e4 	.word	0x200001e4

08003000 <USBD_StdItfReq>:
{
 8003000:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003002:	780b      	ldrb	r3, [r1, #0]
 8003004:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003008:	2b20      	cmp	r3, #32
{
 800300a:	4604      	mov	r4, r0
 800300c:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800300e:	d002      	beq.n	8003016 <USBD_StdItfReq+0x16>
 8003010:	2b40      	cmp	r3, #64	; 0x40
 8003012:	d000      	beq.n	8003016 <USBD_StdItfReq+0x16>
 8003014:	b9bb      	cbnz	r3, 8003046 <USBD_StdItfReq+0x46>
    switch (pdev->dev_state)
 8003016:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800301a:	3b01      	subs	r3, #1
 800301c:	2b02      	cmp	r3, #2
 800301e:	d811      	bhi.n	8003044 <USBD_StdItfReq+0x44>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003020:	7933      	ldrb	r3, [r6, #4]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d80e      	bhi.n	8003044 <USBD_StdItfReq+0x44>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003026:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800302a:	4631      	mov	r1, r6
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	4620      	mov	r0, r4
 8003030:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8003032:	88f3      	ldrh	r3, [r6, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003034:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8003036:	b91b      	cbnz	r3, 8003040 <USBD_StdItfReq+0x40>
 8003038:	b910      	cbnz	r0, 8003040 <USBD_StdItfReq+0x40>
          (void)USBD_CtlSendStatus(pdev);
 800303a:	4620      	mov	r0, r4
 800303c:	f000 f8f1 	bl	8003222 <USBD_CtlSendStatus>
}
 8003040:	4628      	mov	r0, r5
 8003042:	bd70      	pop	{r4, r5, r6, pc}
      USBD_CtlError(pdev, req);
 8003044:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8003046:	f7ff fe90 	bl	8002d6a <USBD_CtlError.constprop.1>
  USBD_StatusTypeDef ret = USBD_OK;
 800304a:	2500      	movs	r5, #0
    break;
 800304c:	e7f8      	b.n	8003040 <USBD_StdItfReq+0x40>

0800304e <USBD_StdEPReq>:
{
 800304e:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003050:	780b      	ldrb	r3, [r1, #0]
 8003052:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003056:	2b20      	cmp	r3, #32
{
 8003058:	4604      	mov	r4, r0
 800305a:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800305c:	d013      	beq.n	8003086 <USBD_StdEPReq+0x38>
 800305e:	2b40      	cmp	r3, #64	; 0x40
 8003060:	d011      	beq.n	8003086 <USBD_StdEPReq+0x38>
 8003062:	b96b      	cbnz	r3, 8003080 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8003064:	786a      	ldrb	r2, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 8003066:	888b      	ldrh	r3, [r1, #4]
    switch (req->bRequest)
 8003068:	2a01      	cmp	r2, #1
  ep_addr = LOBYTE(req->wIndex);
 800306a:	b2d9      	uxtb	r1, r3
    switch (req->bRequest)
 800306c:	d020      	beq.n	80030b0 <USBD_StdEPReq+0x62>
 800306e:	d33f      	bcc.n	80030f0 <USBD_StdEPReq+0xa2>
 8003070:	2a03      	cmp	r2, #3
 8003072:	d105      	bne.n	8003080 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8003074:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003078:	2b02      	cmp	r3, #2
 800307a:	d030      	beq.n	80030de <USBD_StdEPReq+0x90>
 800307c:	2b03      	cmp	r3, #3
 800307e:	d00a      	beq.n	8003096 <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 8003080:	f7ff fe73 	bl	8002d6a <USBD_CtlError.constprop.1>
    break;
 8003084:	e012      	b.n	80030ac <USBD_StdEPReq+0x5e>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003086:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800308a:	4629      	mov	r1, r5
 800308c:	4620      	mov	r0, r4
 800308e:	689b      	ldr	r3, [r3, #8]
}
 8003090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003094:	4718      	bx	r3
        if (req->wValue == USB_FEATURE_EP_HALT)
 8003096:	886b      	ldrh	r3, [r5, #2]
 8003098:	b92b      	cbnz	r3, 80030a6 <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800309a:	064a      	lsls	r2, r1, #25
 800309c:	d003      	beq.n	80030a6 <USBD_StdEPReq+0x58>
 800309e:	88eb      	ldrh	r3, [r5, #6]
 80030a0:	b90b      	cbnz	r3, 80030a6 <USBD_StdEPReq+0x58>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80030a2:	f000 fb2b 	bl	80036fc <USBD_LL_StallEP>
        (void)USBD_CtlSendStatus(pdev);
 80030a6:	4620      	mov	r0, r4
 80030a8:	f000 f8bb 	bl	8003222 <USBD_CtlSendStatus>
}
 80030ac:	2000      	movs	r0, #0
 80030ae:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 80030b0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d012      	beq.n	80030de <USBD_StdEPReq+0x90>
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d1e1      	bne.n	8003080 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80030bc:	886b      	ldrh	r3, [r5, #2]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f4      	bne.n	80030ac <USBD_StdEPReq+0x5e>
          if ((ep_addr & 0x7FU) != 0x00U)
 80030c2:	064e      	lsls	r6, r1, #25
 80030c4:	d001      	beq.n	80030ca <USBD_StdEPReq+0x7c>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80030c6:	f000 fb27 	bl	8003718 <USBD_LL_ClearStallEP>
          (void)USBD_CtlSendStatus(pdev);
 80030ca:	4620      	mov	r0, r4
 80030cc:	f000 f8a9 	bl	8003222 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80030d0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80030d4:	4629      	mov	r1, r5
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	4620      	mov	r0, r4
 80030da:	4798      	blx	r3
 80030dc:	e7e6      	b.n	80030ac <USBD_StdEPReq+0x5e>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80030de:	064b      	lsls	r3, r1, #25
 80030e0:	d017      	beq.n	8003112 <USBD_StdEPReq+0xc4>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80030e2:	f000 fb0b 	bl	80036fc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80030e6:	2180      	movs	r1, #128	; 0x80
 80030e8:	4620      	mov	r0, r4
 80030ea:	f000 fb07 	bl	80036fc <USBD_LL_StallEP>
 80030ee:	e7dd      	b.n	80030ac <USBD_StdEPReq+0x5e>
      switch (pdev->dev_state)
 80030f0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80030f4:	2a02      	cmp	r2, #2
 80030f6:	d00e      	beq.n	8003116 <USBD_StdEPReq+0xc8>
 80030f8:	2a03      	cmp	r2, #3
 80030fa:	d1c1      	bne.n	8003080 <USBD_StdEPReq+0x32>
        if ((ep_addr & 0x80U) == 0x80U)
 80030fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003100:	f001 020f 	and.w	r2, r1, #15
 8003104:	f04f 0314 	mov.w	r3, #20
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003108:	fb03 0202 	mla	r2, r3, r2, r0
        if ((ep_addr & 0x80U) == 0x80U)
 800310c:	d012      	beq.n	8003134 <USBD_StdEPReq+0xe6>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800310e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003110:	b9da      	cbnz	r2, 800314a <USBD_StdEPReq+0xfc>
          USBD_CtlError(pdev, req);
 8003112:	4620      	mov	r0, r4
 8003114:	e7b4      	b.n	8003080 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003116:	064a      	lsls	r2, r1, #25
 8003118:	d1fb      	bne.n	8003112 <USBD_StdEPReq+0xc4>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800311a:	061b      	lsls	r3, r3, #24
 800311c:	bf4c      	ite	mi
 800311e:	f100 0114 	addmi.w	r1, r0, #20
 8003122:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
        pep->status = 0x0000U;
 8003126:	2300      	movs	r3, #0
 8003128:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800312a:	2202      	movs	r2, #2
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800312c:	4620      	mov	r0, r4
 800312e:	f000 f85b 	bl	80031e8 <USBD_CtlSendData>
          break;
 8003132:	e7bb      	b.n	80030ac <USBD_StdEPReq+0x5e>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003134:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 8003138:	2a00      	cmp	r2, #0
 800313a:	d0ea      	beq.n	8003112 <USBD_StdEPReq+0xc4>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800313c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8003140:	fb03 0505 	mla	r5, r3, r5, r0
 8003144:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8003148:	e004      	b.n	8003154 <USBD_StdEPReq+0x106>
 800314a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800314e:	fb05 3503 	mla	r5, r5, r3, r3
 8003152:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003154:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8003158:	d103      	bne.n	8003162 <USBD_StdEPReq+0x114>
            pep->status = 0x0001U;
 800315a:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800315c:	2202      	movs	r2, #2
 800315e:	4629      	mov	r1, r5
 8003160:	e7e4      	b.n	800312c <USBD_StdEPReq+0xde>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8003162:	4620      	mov	r0, r4
 8003164:	f000 fae6 	bl	8003734 <USBD_LL_IsStallEP>
 8003168:	b108      	cbz	r0, 800316e <USBD_StdEPReq+0x120>
            pep->status = 0x0001U;
 800316a:	2301      	movs	r3, #1
 800316c:	e7f5      	b.n	800315a <USBD_StdEPReq+0x10c>
            pep->status = 0x0000U;
 800316e:	6028      	str	r0, [r5, #0]
 8003170:	e7f4      	b.n	800315c <USBD_StdEPReq+0x10e>

08003172 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8003172:	780b      	ldrb	r3, [r1, #0]
 8003174:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8003176:	784b      	ldrb	r3, [r1, #1]
 8003178:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800317a:	78ca      	ldrb	r2, [r1, #3]
 800317c:	788b      	ldrb	r3, [r1, #2]
 800317e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8003182:	8043      	strh	r3, [r0, #2]
 8003184:	794a      	ldrb	r2, [r1, #5]
 8003186:	790b      	ldrb	r3, [r1, #4]
 8003188:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800318c:	8083      	strh	r3, [r0, #4]
 800318e:	79ca      	ldrb	r2, [r1, #7]
 8003190:	798b      	ldrb	r3, [r1, #6]
 8003192:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8003196:	80c3      	strh	r3, [r0, #6]
 8003198:	4770      	bx	lr

0800319a <USBD_CtlError>:
{
 800319a:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800319c:	2180      	movs	r1, #128	; 0x80
{
 800319e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80031a0:	f000 faac 	bl	80036fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80031a4:	4620      	mov	r0, r4
 80031a6:	2100      	movs	r1, #0
}
 80031a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 80031ac:	f000 baa6 	b.w	80036fc <USBD_LL_StallEP>

080031b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80031b0:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 80031b2:	b188      	cbz	r0, 80031d8 <USBD_GetString+0x28>
 80031b4:	4605      	mov	r5, r0
 80031b6:	1a2b      	subs	r3, r5, r0
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80031b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2c00      	cmp	r4, #0
 80031c0:	d1f9      	bne.n	80031b6 <USBD_GetString+0x6>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80031c2:	3301      	adds	r3, #1
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 80031c8:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80031ca:	2303      	movs	r3, #3
 80031cc:	704b      	strb	r3, [r1, #1]
 80031ce:	3801      	subs	r0, #1
  idx++;
 80031d0:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 80031d2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80031d6:	b902      	cbnz	r2, 80031da <USBD_GetString+0x2a>
 80031d8:	bd30      	pop	{r4, r5, pc}
    unicode[idx] = *pdesc;
 80031da:	54ca      	strb	r2, [r1, r3]
    idx++;
 80031dc:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 80031de:	b2d2      	uxtb	r2, r2
    idx++;
 80031e0:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 80031e2:	548c      	strb	r4, [r1, r2]
    idx++;
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	e7f4      	b.n	80031d2 <USBD_GetString+0x22>

080031e8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80031e8:	b510      	push	{r4, lr}
 80031ea:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80031ec:	2202      	movs	r2, #2
 80031ee:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80031f2:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80031f4:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length = len;
 80031f6:	61c3      	str	r3, [r0, #28]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80031f8:	2100      	movs	r1, #0
 80031fa:	f000 fabd 	bl	8003778 <USBD_LL_Transmit>

  return USBD_OK;
}
 80031fe:	2000      	movs	r0, #0
 8003200:	bd10      	pop	{r4, pc}

08003202 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8003202:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003204:	4613      	mov	r3, r2
 8003206:	460a      	mov	r2, r1
 8003208:	2100      	movs	r1, #0
 800320a:	f000 fab5 	bl	8003778 <USBD_LL_Transmit>

  return USBD_OK;
}
 800320e:	2000      	movs	r0, #0
 8003210:	bd08      	pop	{r3, pc}

08003212 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8003212:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003214:	4613      	mov	r3, r2
 8003216:	460a      	mov	r2, r1
 8003218:	2100      	movs	r1, #0
 800321a:	f000 fabb 	bl	8003794 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800321e:	2000      	movs	r0, #0
 8003220:	bd08      	pop	{r3, pc}

08003222 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8003222:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003224:	2304      	movs	r3, #4
 8003226:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800322a:	2300      	movs	r3, #0
 800322c:	461a      	mov	r2, r3
 800322e:	4619      	mov	r1, r3
 8003230:	f000 faa2 	bl	8003778 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003234:	2000      	movs	r0, #0
 8003236:	bd08      	pop	{r3, pc}

08003238 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8003238:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800323a:	2305      	movs	r3, #5
 800323c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003240:	2300      	movs	r3, #0
 8003242:	461a      	mov	r2, r3
 8003244:	4619      	mov	r1, r3
 8003246:	f000 faa5 	bl	8003794 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800324a:	2000      	movs	r0, #0
 800324c:	bd08      	pop	{r3, pc}
	...

08003250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003250:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003252:	4b16      	ldr	r3, [pc, #88]	; (80032ac <MX_GPIO_Init+0x5c>)
 8003254:	2200      	movs	r2, #0
 8003256:	9200      	str	r2, [sp, #0]
 8003258:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800325a:	f041 0104 	orr.w	r1, r1, #4
 800325e:	6319      	str	r1, [r3, #48]	; 0x30
 8003260:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003262:	f001 0104 	and.w	r1, r1, #4
 8003266:	9100      	str	r1, [sp, #0]
 8003268:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800326a:	9201      	str	r2, [sp, #4]
 800326c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800326e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003272:	6319      	str	r1, [r3, #48]	; 0x30
 8003274:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003276:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800327a:	9101      	str	r1, [sp, #4]
 800327c:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800327e:	9202      	str	r2, [sp, #8]
 8003280:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003282:	f041 0101 	orr.w	r1, r1, #1
 8003286:	6319      	str	r1, [r3, #48]	; 0x30
 8003288:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800328a:	f001 0101 	and.w	r1, r1, #1
 800328e:	9102      	str	r1, [sp, #8]
 8003290:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003292:	9203      	str	r2, [sp, #12]
 8003294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003296:	f042 0202 	orr.w	r2, r2, #2
 800329a:	631a      	str	r2, [r3, #48]	; 0x30
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	9303      	str	r3, [sp, #12]
 80032a4:	9b03      	ldr	r3, [sp, #12]

}
 80032a6:	b004      	add	sp, #16
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800

080032b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80032b0:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80032b2:	480c      	ldr	r0, [pc, #48]	; (80032e4 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 80032b4:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <MX_I2C1_Init+0x38>)
 80032b6:	f8df e034 	ldr.w	lr, [pc, #52]	; 80032ec <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 80032be:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80032c2:	2300      	movs	r3, #0
 80032c4:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80032c6:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032c8:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032ca:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80032cc:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032ce:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032d0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032d2:	f7fd fccd 	bl	8000c70 <HAL_I2C_Init>
 80032d6:	b118      	cbz	r0, 80032e0 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 80032d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80032dc:	f000 b8a2 	b.w	8003424 <Error_Handler>
 80032e0:	bd08      	pop	{r3, pc}
 80032e2:	bf00      	nop
 80032e4:	200001f8 	.word	0x200001f8
 80032e8:	40005400 	.word	0x40005400
 80032ec:	000186a0 	.word	0x000186a0

080032f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80032f0:	b530      	push	{r4, r5, lr}
 80032f2:	4604      	mov	r4, r0
 80032f4:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f6:	2214      	movs	r2, #20
 80032f8:	2100      	movs	r1, #0
 80032fa:	a803      	add	r0, sp, #12
 80032fc:	f000 fb34 	bl	8003968 <memset>
  if(i2cHandle->Instance==I2C1)
 8003300:	6822      	ldr	r2, [r4, #0]
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <HAL_I2C_MspInit+0x64>)
 8003304:	429a      	cmp	r2, r3
 8003306:	d123      	bne.n	8003350 <HAL_I2C_MspInit+0x60>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003308:	4c13      	ldr	r4, [pc, #76]	; (8003358 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800330a:	4814      	ldr	r0, [pc, #80]	; (800335c <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800330c:	2500      	movs	r5, #0
 800330e:	9501      	str	r5, [sp, #4]
 8003310:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003312:	f043 0302 	orr.w	r3, r3, #2
 8003316:	6323      	str	r3, [r4, #48]	; 0x30
 8003318:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	9301      	str	r3, [sp, #4]
 8003320:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003322:	23c0      	movs	r3, #192	; 0xc0
 8003324:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003326:	2312      	movs	r3, #18
 8003328:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800332a:	2301      	movs	r3, #1
 800332c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800332e:	2303      	movs	r3, #3
 8003330:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003332:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003334:	2304      	movs	r3, #4
 8003336:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003338:	f7fd f9ec 	bl	8000714 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800333c:	9502      	str	r5, [sp, #8]
 800333e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003340:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003344:	6423      	str	r3, [r4, #64]	; 0x40
 8003346:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800334c:	9302      	str	r3, [sp, #8]
 800334e:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003350:	b009      	add	sp, #36	; 0x24
 8003352:	bd30      	pop	{r4, r5, pc}
 8003354:	40005400 	.word	0x40005400
 8003358:	40023800 	.word	0x40023800
 800335c:	40020400 	.word	0x40020400

08003360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003360:	b530      	push	{r4, r5, lr}
 8003362:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003364:	2230      	movs	r2, #48	; 0x30
 8003366:	2100      	movs	r1, #0
 8003368:	a808      	add	r0, sp, #32
 800336a:	f000 fafd 	bl	8003968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800336e:	2100      	movs	r1, #0
 8003370:	2214      	movs	r2, #20
 8003372:	a803      	add	r0, sp, #12
 8003374:	f000 faf8 	bl	8003968 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003378:	2400      	movs	r4, #0
 800337a:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <SystemClock_Config+0x94>)
 800337c:	9401      	str	r4, [sp, #4]
 800337e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003380:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003384:	641a      	str	r2, [r3, #64]	; 0x40
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003388:	4a1b      	ldr	r2, [pc, #108]	; (80033f8 <SystemClock_Config+0x98>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800338a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003392:	9402      	str	r4, [sp, #8]
 8003394:	6813      	ldr	r3, [r2, #0]
 8003396:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800339a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	6813      	ldr	r3, [r2, #0]
 80033a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033a6:	9302      	str	r3, [sp, #8]
 80033a8:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033aa:	2301      	movs	r3, #1
 80033ac:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033b2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033b8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80033ba:	2319      	movs	r3, #25
 80033bc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80033be:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80033c2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80033c4:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033c6:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80033c8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033ca:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80033cc:	2307      	movs	r3, #7
 80033ce:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033d0:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033d2:	f7fe fb2b 	bl	8001a2c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033d6:	230f      	movs	r3, #15
 80033d8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033da:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033e0:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033e2:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033e4:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033e6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033e8:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033ea:	f7fe fcf3 	bl	8001dd4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80033ee:	b015      	add	sp, #84	; 0x54
 80033f0:	bd30      	pop	{r4, r5, pc}
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40007000 	.word	0x40007000

080033fc <main>:
{
 80033fc:	b508      	push	{r3, lr}
	HAL_Init();
 80033fe:	f7fd f8df 	bl	80005c0 <HAL_Init>
	SystemClock_Config();
 8003402:	f7ff ffad 	bl	8003360 <SystemClock_Config>
	MX_GPIO_Init();
 8003406:	f7ff ff23 	bl	8003250 <MX_GPIO_Init>
	MX_I2C1_Init();
 800340a:	f7ff ff51 	bl	80032b0 <MX_I2C1_Init>
	MX_USB_DEVICE_Init();
 800340e:	f000 f85f 	bl	80034d0 <MX_USB_DEVICE_Init>
	MPU6050_Init(&hi2c1);
 8003412:	4803      	ldr	r0, [pc, #12]	; (8003420 <main+0x24>)
 8003414:	f7fd f866 	bl	80004e4 <MPU6050_Init>
		HAL_Delay(100);
 8003418:	2064      	movs	r0, #100	; 0x64
 800341a:	f7fd f8fd 	bl	8000618 <HAL_Delay>
 800341e:	e7fb      	b.n	8003418 <main+0x1c>
 8003420:	200001f8 	.word	0x200001f8

08003424 <Error_Handler>:

void Error_Handler(void)
{
 8003424:	4770      	bx	lr
	...

08003428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003428:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342a:	4b0c      	ldr	r3, [pc, #48]	; (800345c <HAL_MspInit+0x34>)
 800342c:	2100      	movs	r1, #0
 800342e:	9100      	str	r1, [sp, #0]
 8003430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003436:	645a      	str	r2, [r3, #68]	; 0x44
 8003438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800343a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800343e:	9200      	str	r2, [sp, #0]
 8003440:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003442:	9101      	str	r1, [sp, #4]
 8003444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003446:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800344a:	641a      	str	r2, [r3, #64]	; 0x40
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003452:	9301      	str	r3, [sp, #4]
 8003454:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003456:	b002      	add	sp, #8
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40023800 	.word	0x40023800

08003460 <NMI_Handler>:
 8003460:	4770      	bx	lr

08003462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003462:	e7fe      	b.n	8003462 <HardFault_Handler>

08003464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003464:	e7fe      	b.n	8003464 <MemManage_Handler>

08003466 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003466:	e7fe      	b.n	8003466 <BusFault_Handler>

08003468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003468:	e7fe      	b.n	8003468 <UsageFault_Handler>

0800346a <SVC_Handler>:
 800346a:	4770      	bx	lr

0800346c <DebugMon_Handler>:
 800346c:	4770      	bx	lr

0800346e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800346e:	4770      	bx	lr

08003470 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003470:	f7fd b8c0 	b.w	80005f4 <HAL_IncTick>

08003474 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003474:	4801      	ldr	r0, [pc, #4]	; (800347c <OTG_FS_IRQHandler+0x8>)
 8003476:	f7fd bee9 	b.w	800124c <HAL_PCD_IRQHandler>
 800347a:	bf00      	nop
 800347c:	2000051c 	.word	0x2000051c

08003480 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003480:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003482:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <_sbrk+0x2c>)
 8003484:	6819      	ldr	r1, [r3, #0]
{
 8003486:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003488:	b909      	cbnz	r1, 800348e <_sbrk+0xe>
		heap_end = &end;
 800348a:	4909      	ldr	r1, [pc, #36]	; (80034b0 <_sbrk+0x30>)
 800348c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800348e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003490:	4669      	mov	r1, sp
 8003492:	4402      	add	r2, r0
 8003494:	428a      	cmp	r2, r1
 8003496:	d906      	bls.n	80034a6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003498:	f000 fa2c 	bl	80038f4 <__errno>
 800349c:	230c      	movs	r3, #12
 800349e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295
 80034a4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80034a6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80034a8:	bd08      	pop	{r3, pc}
 80034aa:	bf00      	nop
 80034ac:	200001e8 	.word	0x200001e8
 80034b0:	20000b28 	.word	0x20000b28

080034b4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <SystemInit+0x18>)
 80034b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034ba:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80034be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <MX_USB_DEVICE_Init>:
{
	USBD_HID_SendReport(&hUsbDeviceFS, data, length);
}

void MX_USB_DEVICE_Init(void)
{
 80034d0:	b508      	push	{r3, lr}
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80034d2:	2200      	movs	r2, #0
 80034d4:	490b      	ldr	r1, [pc, #44]	; (8003504 <MX_USB_DEVICE_Init+0x34>)
 80034d6:	480c      	ldr	r0, [pc, #48]	; (8003508 <MX_USB_DEVICE_Init+0x38>)
 80034d8:	f7ff fafd 	bl	8002ad6 <USBD_Init>
 80034dc:	b108      	cbz	r0, 80034e2 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80034de:	f7ff ffa1 	bl	8003424 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80034e2:	490a      	ldr	r1, [pc, #40]	; (800350c <MX_USB_DEVICE_Init+0x3c>)
 80034e4:	4808      	ldr	r0, [pc, #32]	; (8003508 <MX_USB_DEVICE_Init+0x38>)
 80034e6:	f7ff fb0e 	bl	8002b06 <USBD_RegisterClass>
 80034ea:	b108      	cbz	r0, 80034f0 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80034ec:	f7ff ff9a 	bl	8003424 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80034f0:	4805      	ldr	r0, [pc, #20]	; (8003508 <MX_USB_DEVICE_Init+0x38>)
 80034f2:	f7ff fb1b 	bl	8002b2c <USBD_Start>
 80034f6:	b118      	cbz	r0, 8003500 <MX_USB_DEVICE_Init+0x30>
  {
    Error_Handler();
  }
}
 80034f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80034fc:	f7ff bf92 	b.w	8003424 <Error_Handler>
 8003500:	bd08      	pop	{r3, pc}
 8003502:	bf00      	nop
 8003504:	20000114 	.word	0x20000114
 8003508:	2000024c 	.word	0x2000024c
 800350c:	20000054 	.word	0x20000054

08003510 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003510:	b530      	push	{r4, r5, lr}
 8003512:	4604      	mov	r4, r0
 8003514:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003516:	2214      	movs	r2, #20
 8003518:	2100      	movs	r1, #0
 800351a:	a803      	add	r0, sp, #12
 800351c:	f000 fa24 	bl	8003968 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003526:	d12e      	bne.n	8003586 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003528:	4c18      	ldr	r4, [pc, #96]	; (800358c <HAL_PCD_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800352a:	4819      	ldr	r0, [pc, #100]	; (8003590 <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800352c:	2500      	movs	r5, #0
 800352e:	9501      	str	r5, [sp, #4]
 8003530:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	6323      	str	r3, [r4, #48]	; 0x30
 8003538:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	9301      	str	r3, [sp, #4]
 8003540:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003542:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003546:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003548:	2302      	movs	r3, #2
 800354a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354c:	2303      	movs	r3, #3
 800354e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003550:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003552:	230a      	movs	r3, #10
 8003554:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003556:	f7fd f8dd 	bl	8000714 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800355a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800355c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003560:	6363      	str	r3, [r4, #52]	; 0x34
 8003562:	9502      	str	r5, [sp, #8]
 8003564:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800356a:	6463      	str	r3, [r4, #68]	; 0x44
 800356c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800356e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003572:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003574:	2043      	movs	r0, #67	; 0x43
 8003576:	462a      	mov	r2, r5
 8003578:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800357a:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800357c:	f7fd f872 	bl	8000664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003580:	2043      	movs	r0, #67	; 0x43
 8003582:	f7fd f8a3 	bl	80006cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003586:	b009      	add	sp, #36	; 0x24
 8003588:	bd30      	pop	{r4, r5, pc}
 800358a:	bf00      	nop
 800358c:	40023800 	.word	0x40023800
 8003590:	40020000 	.word	0x40020000

08003594 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003594:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8003598:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800359c:	f7ff bad7 	b.w	8002b4e <USBD_LL_SetupStage>

080035a0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80035a0:	231c      	movs	r3, #28
 80035a2:	fb03 0301 	mla	r3, r3, r1, r0
 80035a6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80035aa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80035ae:	f7ff bafe 	b.w	8002bae <USBD_LL_DataOutStage>

080035b2 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80035b2:	231c      	movs	r3, #28
 80035b4:	fb03 0301 	mla	r3, r3, r1, r0
 80035b8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80035bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035be:	f7ff bb29 	b.w	8002c14 <USBD_LL_DataInStage>

080035c2 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80035c2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80035c6:	f7ff bbb2 	b.w	8002d2e <USBD_LL_SOF>

080035ca <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80035ca:	68c3      	ldr	r3, [r0, #12]
 80035cc:	2b02      	cmp	r3, #2
{ 
 80035ce:	b510      	push	{r4, lr}
 80035d0:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80035d2:	d001      	beq.n	80035d8 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 80035d4:	f7ff ff26 	bl	8003424 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80035d8:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80035dc:	2101      	movs	r1, #1
 80035de:	f7ff fb90 	bl	8002d02 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80035e2:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 80035e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80035ea:	f7ff bb62 	b.w	8002cb2 <USBD_LL_Reset>
	...

080035f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80035f0:	b510      	push	{r4, lr}
 80035f2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80035f4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80035f8:	f7ff fb86 	bl	8002d08 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80035fc:	6822      	ldr	r2, [r4, #0]
 80035fe:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800360a:	6a23      	ldr	r3, [r4, #32]
 800360c:	b123      	cbz	r3, 8003618 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800360e:	4a03      	ldr	r2, [pc, #12]	; (800361c <HAL_PCD_SuspendCallback+0x2c>)
 8003610:	6913      	ldr	r3, [r2, #16]
 8003612:	f043 0306 	orr.w	r3, r3, #6
 8003616:	6113      	str	r3, [r2, #16]
 8003618:	bd10      	pop	{r4, pc}
 800361a:	bf00      	nop
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003620:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003624:	f7ff bb79 	b.w	8002d1a <USBD_LL_Resume>

08003628 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003628:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800362c:	f7ff bb8d 	b.w	8002d4a <USBD_LL_IsoOUTIncomplete>

08003630 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003630:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003634:	f7ff bb87 	b.w	8002d46 <USBD_LL_IsoINIncomplete>

08003638 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8003638:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800363c:	f7ff bb87 	b.w	8002d4e <USBD_LL_DevConnected>

08003640 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8003640:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003644:	f7ff bb85 	b.w	8002d52 <USBD_LL_DevDisconnected>

08003648 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8003648:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800364a:	7802      	ldrb	r2, [r0, #0]
 800364c:	bb32      	cbnz	r2, 800369c <USBD_LL_Init+0x54>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800364e:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <USBD_LL_Init+0x58>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003650:	2104      	movs	r1, #4
  hpcd_USB_OTG_FS.pData = pdev;
 8003652:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8003656:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800365a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800365e:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003662:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003664:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003666:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003668:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800366a:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800366c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800366e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003670:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003672:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003674:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003676:	f7fd fd43 	bl	8001100 <HAL_PCD_Init>
 800367a:	b108      	cbz	r0, 8003680 <USBD_LL_Init+0x38>
  {
    Error_Handler( );
 800367c:	f7ff fed2 	bl	8003424 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8003680:	2180      	movs	r1, #128	; 0x80
 8003682:	4807      	ldr	r0, [pc, #28]	; (80036a0 <USBD_LL_Init+0x58>)
 8003684:	f7fe f9cc 	bl	8001a20 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8003688:	2240      	movs	r2, #64	; 0x40
 800368a:	2100      	movs	r1, #0
 800368c:	4804      	ldr	r0, [pc, #16]	; (80036a0 <USBD_LL_Init+0x58>)
 800368e:	f7fe f9a6 	bl	80019de <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8003692:	2280      	movs	r2, #128	; 0x80
 8003694:	2101      	movs	r1, #1
 8003696:	4802      	ldr	r0, [pc, #8]	; (80036a0 <USBD_LL_Init+0x58>)
 8003698:	f7fe f9a1 	bl	80019de <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 800369c:	2000      	movs	r0, #0
 800369e:	bd08      	pop	{r3, pc}
 80036a0:	2000051c 	.word	0x2000051c

080036a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80036a4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80036a6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80036aa:	f7fd fdb0 	bl	800120e <HAL_PCD_Start>
 80036ae:	2803      	cmp	r0, #3
 80036b0:	bf9a      	itte	ls
 80036b2:	4b02      	ldrls	r3, [pc, #8]	; (80036bc <USBD_LL_Start+0x18>)
 80036b4:	5c18      	ldrbls	r0, [r3, r0]
 80036b6:	2003      	movhi	r0, #3
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
  
  return usb_status;
}
 80036b8:	bd08      	pop	{r3, pc}
 80036ba:	bf00      	nop
 80036bc:	08003b24 	.word	0x08003b24

080036c0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80036c0:	b510      	push	{r4, lr}
 80036c2:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80036c4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80036c8:	4613      	mov	r3, r2
 80036ca:	4622      	mov	r2, r4
 80036cc:	f7fe f878 	bl	80017c0 <HAL_PCD_EP_Open>
 80036d0:	2803      	cmp	r0, #3
 80036d2:	bf9a      	itte	ls
 80036d4:	4b01      	ldrls	r3, [pc, #4]	; (80036dc <USBD_LL_OpenEP+0x1c>)
 80036d6:	5c18      	ldrbls	r0, [r3, r0]
 80036d8:	2003      	movhi	r0, #3

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80036da:	bd10      	pop	{r4, pc}
 80036dc:	08003b24 	.word	0x08003b24

080036e0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80036e0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80036e2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80036e6:	f7fe f8a0 	bl	800182a <HAL_PCD_EP_Close>
 80036ea:	2803      	cmp	r0, #3
 80036ec:	bf9a      	itte	ls
 80036ee:	4b02      	ldrls	r3, [pc, #8]	; (80036f8 <USBD_LL_CloseEP+0x18>)
 80036f0:	5c18      	ldrbls	r0, [r3, r0]
 80036f2:	2003      	movhi	r0, #3
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 
  return usb_status;  
}
 80036f4:	bd08      	pop	{r3, pc}
 80036f6:	bf00      	nop
 80036f8:	08003b24 	.word	0x08003b24

080036fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80036fc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80036fe:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003702:	f7fe f900 	bl	8001906 <HAL_PCD_EP_SetStall>
 8003706:	2803      	cmp	r0, #3
 8003708:	bf9a      	itte	ls
 800370a:	4b02      	ldrls	r3, [pc, #8]	; (8003714 <USBD_LL_StallEP+0x18>)
 800370c:	5c18      	ldrbls	r0, [r3, r0]
 800370e:	2003      	movhi	r0, #3

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8003710:	bd08      	pop	{r3, pc}
 8003712:	bf00      	nop
 8003714:	08003b24 	.word	0x08003b24

08003718 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003718:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800371a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800371e:	f7fe f92c 	bl	800197a <HAL_PCD_EP_ClrStall>
 8003722:	2803      	cmp	r0, #3
 8003724:	bf9a      	itte	ls
 8003726:	4b02      	ldrls	r3, [pc, #8]	; (8003730 <USBD_LL_ClearStallEP+0x18>)
 8003728:	5c18      	ldrbls	r0, [r3, r0]
 800372a:	2003      	movhi	r0, #3
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
  
  return usb_status; 
}
 800372c:	bd08      	pop	{r3, pc}
 800372e:	bf00      	nop
 8003730:	08003b24 	.word	0x08003b24

08003734 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003734:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003738:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 800373c:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003740:	bf1b      	ittet	ne
 8003742:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8003746:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800374a:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800374e:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003752:	bf08      	it	eq
 8003754:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 8003758:	4770      	bx	lr
	...

0800375c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800375c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800375e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003762:	f7fe f819 	bl	8001798 <HAL_PCD_SetAddress>
 8003766:	2803      	cmp	r0, #3
 8003768:	bf9a      	itte	ls
 800376a:	4b02      	ldrls	r3, [pc, #8]	; (8003774 <USBD_LL_SetUSBAddress+0x18>)
 800376c:	5c18      	ldrbls	r0, [r3, r0]
 800376e:	2003      	movhi	r0, #3
  
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8003770:	bd08      	pop	{r3, pc}
 8003772:	bf00      	nop
 8003774:	08003b24 	.word	0x08003b24

08003778 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8003778:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800377a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800377e:	f7fe f8a2 	bl	80018c6 <HAL_PCD_EP_Transmit>
 8003782:	2803      	cmp	r0, #3
 8003784:	bf9a      	itte	ls
 8003786:	4b02      	ldrls	r3, [pc, #8]	; (8003790 <USBD_LL_Transmit+0x18>)
 8003788:	5c18      	ldrbls	r0, [r3, r0]
 800378a:	2003      	movhi	r0, #3
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
  
  return usb_status;    
}
 800378c:	bd08      	pop	{r3, pc}
 800378e:	bf00      	nop
 8003790:	08003b24 	.word	0x08003b24

08003794 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8003794:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003796:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800379a:	f7fe f870 	bl	800187e <HAL_PCD_EP_Receive>
 800379e:	2803      	cmp	r0, #3
 80037a0:	bf9a      	itte	ls
 80037a2:	4b02      	ldrls	r3, [pc, #8]	; (80037ac <USBD_LL_PrepareReceive+0x18>)
 80037a4:	5c18      	ldrbls	r0, [r3, r0]
 80037a6:	2003      	movhi	r0, #3
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
  
  return usb_status; 
}
 80037a8:	bd08      	pop	{r3, pc}
 80037aa:	bf00      	nop
 80037ac:	08003b24 	.word	0x08003b24

080037b0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80037b0:	2312      	movs	r3, #18
 80037b2:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80037b4:	4800      	ldr	r0, [pc, #0]	; (80037b8 <USBD_FS_DeviceDescriptor+0x8>)
 80037b6:	4770      	bx	lr
 80037b8:	20000130 	.word	0x20000130

080037bc <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80037bc:	2304      	movs	r3, #4
 80037be:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80037c0:	4800      	ldr	r0, [pc, #0]	; (80037c4 <USBD_FS_LangIDStrDescriptor+0x8>)
 80037c2:	4770      	bx	lr
 80037c4:	20000144 	.word	0x20000144

080037c8 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80037c8:	2300      	movs	r3, #0
{
 80037ca:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80037cc:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 80037ce:	b2dc      	uxtb	r4, r3
 80037d0:	42a2      	cmp	r2, r4
 80037d2:	d800      	bhi.n	80037d6 <IntToUnicode+0xe>
  }
}
 80037d4:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 80037d6:	0f04      	lsrs	r4, r0, #28
 80037d8:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80037da:	bf94      	ite	ls
 80037dc:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80037de:	3437      	addhi	r4, #55	; 0x37
 80037e0:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 80037e4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 80037e8:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 80037ea:	7065      	strb	r5, [r4, #1]
 80037ec:	3301      	adds	r3, #1
 80037ee:	e7ee      	b.n	80037ce <IntToUnicode+0x6>

080037f0 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80037f0:	231a      	movs	r3, #26
{
 80037f2:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80037f4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80037f6:	4b09      	ldr	r3, [pc, #36]	; (800381c <USBD_FS_SerialStrDescriptor+0x2c>)
 80037f8:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80037fa:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80037fc:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80037fe:	18c0      	adds	r0, r0, r3
 8003800:	d00a      	beq.n	8003818 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003802:	4b07      	ldr	r3, [pc, #28]	; (8003820 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003804:	4907      	ldr	r1, [pc, #28]	; (8003824 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003806:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003808:	2208      	movs	r2, #8
 800380a:	f7ff ffdd 	bl	80037c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800380e:	2204      	movs	r2, #4
 8003810:	4905      	ldr	r1, [pc, #20]	; (8003828 <USBD_FS_SerialStrDescriptor+0x38>)
 8003812:	4620      	mov	r0, r4
 8003814:	f7ff ffd8 	bl	80037c8 <IntToUnicode>
}
 8003818:	4804      	ldr	r0, [pc, #16]	; (800382c <USBD_FS_SerialStrDescriptor+0x3c>)
 800381a:	bd10      	pop	{r4, pc}
 800381c:	1fff7a10 	.word	0x1fff7a10
 8003820:	1fff7a14 	.word	0x1fff7a14
 8003824:	2000014a 	.word	0x2000014a
 8003828:	2000015a 	.word	0x2000015a
 800382c:	20000148 	.word	0x20000148

08003830 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003830:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003832:	4c04      	ldr	r4, [pc, #16]	; (8003844 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003834:	4804      	ldr	r0, [pc, #16]	; (8003848 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003836:	460a      	mov	r2, r1
 8003838:	4621      	mov	r1, r4
 800383a:	f7ff fcb9 	bl	80031b0 <USBD_GetString>
}
 800383e:	4620      	mov	r0, r4
 8003840:	bd10      	pop	{r4, pc}
 8003842:	bf00      	nop
 8003844:	20000924 	.word	0x20000924
 8003848:	08003b41 	.word	0x08003b41

0800384c <USBD_FS_ProductStrDescriptor>:
{
 800384c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800384e:	4c04      	ldr	r4, [pc, #16]	; (8003860 <USBD_FS_ProductStrDescriptor+0x14>)
 8003850:	4804      	ldr	r0, [pc, #16]	; (8003864 <USBD_FS_ProductStrDescriptor+0x18>)
 8003852:	460a      	mov	r2, r1
 8003854:	4621      	mov	r1, r4
 8003856:	f7ff fcab 	bl	80031b0 <USBD_GetString>
}
 800385a:	4620      	mov	r0, r4
 800385c:	bd10      	pop	{r4, pc}
 800385e:	bf00      	nop
 8003860:	20000924 	.word	0x20000924
 8003864:	08003b54 	.word	0x08003b54

08003868 <USBD_FS_ConfigStrDescriptor>:
{
 8003868:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800386a:	4c04      	ldr	r4, [pc, #16]	; (800387c <USBD_FS_ConfigStrDescriptor+0x14>)
 800386c:	4804      	ldr	r0, [pc, #16]	; (8003880 <USBD_FS_ConfigStrDescriptor+0x18>)
 800386e:	460a      	mov	r2, r1
 8003870:	4621      	mov	r1, r4
 8003872:	f7ff fc9d 	bl	80031b0 <USBD_GetString>
}
 8003876:	4620      	mov	r0, r4
 8003878:	bd10      	pop	{r4, pc}
 800387a:	bf00      	nop
 800387c:	20000924 	.word	0x20000924
 8003880:	08003b28 	.word	0x08003b28

08003884 <USBD_FS_InterfaceStrDescriptor>:
{
 8003884:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003886:	4c04      	ldr	r4, [pc, #16]	; (8003898 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003888:	4804      	ldr	r0, [pc, #16]	; (800389c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800388a:	460a      	mov	r2, r1
 800388c:	4621      	mov	r1, r4
 800388e:	f7ff fc8f 	bl	80031b0 <USBD_GetString>
}
 8003892:	4620      	mov	r0, r4
 8003894:	bd10      	pop	{r4, pc}
 8003896:	bf00      	nop
 8003898:	20000924 	.word	0x20000924
 800389c:	08003b33 	.word	0x08003b33

080038a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80038a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80038a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80038a6:	e003      	b.n	80038b0 <LoopCopyDataInit>

080038a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80038aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80038ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80038ae:	3104      	adds	r1, #4

080038b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80038b0:	480b      	ldr	r0, [pc, #44]	; (80038e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80038b2:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80038b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80038b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80038b8:	d3f6      	bcc.n	80038a8 <CopyDataInit>
  ldr  r2, =_sbss
 80038ba:	4a0b      	ldr	r2, [pc, #44]	; (80038e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80038bc:	e002      	b.n	80038c4 <LoopFillZerobss>

080038be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80038be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80038c0:	f842 3b04 	str.w	r3, [r2], #4

080038c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80038c4:	4b09      	ldr	r3, [pc, #36]	; (80038ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80038c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80038c8:	d3f9      	bcc.n	80038be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80038ca:	f7ff fdf3 	bl	80034b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038ce:	f000 f817 	bl	8003900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038d2:	f7ff fd93 	bl	80033fc <main>
  bx  lr    
 80038d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80038d8:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80038dc:	08003b7c 	.word	0x08003b7c
  ldr  r0, =_sdata
 80038e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80038e4:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 80038e8:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 80038ec:	20000b28 	.word	0x20000b28

080038f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038f0:	e7fe      	b.n	80038f0 <ADC_IRQHandler>
	...

080038f4 <__errno>:
 80038f4:	4b01      	ldr	r3, [pc, #4]	; (80038fc <__errno+0x8>)
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000164 	.word	0x20000164

08003900 <__libc_init_array>:
 8003900:	b570      	push	{r4, r5, r6, lr}
 8003902:	4e0d      	ldr	r6, [pc, #52]	; (8003938 <__libc_init_array+0x38>)
 8003904:	4c0d      	ldr	r4, [pc, #52]	; (800393c <__libc_init_array+0x3c>)
 8003906:	1ba4      	subs	r4, r4, r6
 8003908:	10a4      	asrs	r4, r4, #2
 800390a:	2500      	movs	r5, #0
 800390c:	42a5      	cmp	r5, r4
 800390e:	d109      	bne.n	8003924 <__libc_init_array+0x24>
 8003910:	4e0b      	ldr	r6, [pc, #44]	; (8003940 <__libc_init_array+0x40>)
 8003912:	4c0c      	ldr	r4, [pc, #48]	; (8003944 <__libc_init_array+0x44>)
 8003914:	f000 f8ee 	bl	8003af4 <_init>
 8003918:	1ba4      	subs	r4, r4, r6
 800391a:	10a4      	asrs	r4, r4, #2
 800391c:	2500      	movs	r5, #0
 800391e:	42a5      	cmp	r5, r4
 8003920:	d105      	bne.n	800392e <__libc_init_array+0x2e>
 8003922:	bd70      	pop	{r4, r5, r6, pc}
 8003924:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003928:	4798      	blx	r3
 800392a:	3501      	adds	r5, #1
 800392c:	e7ee      	b.n	800390c <__libc_init_array+0xc>
 800392e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003932:	4798      	blx	r3
 8003934:	3501      	adds	r5, #1
 8003936:	e7f2      	b.n	800391e <__libc_init_array+0x1e>
 8003938:	08003b74 	.word	0x08003b74
 800393c:	08003b74 	.word	0x08003b74
 8003940:	08003b74 	.word	0x08003b74
 8003944:	08003b78 	.word	0x08003b78

08003948 <malloc>:
 8003948:	4b02      	ldr	r3, [pc, #8]	; (8003954 <malloc+0xc>)
 800394a:	4601      	mov	r1, r0
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	f000 b861 	b.w	8003a14 <_malloc_r>
 8003952:	bf00      	nop
 8003954:	20000164 	.word	0x20000164

08003958 <free>:
 8003958:	4b02      	ldr	r3, [pc, #8]	; (8003964 <free+0xc>)
 800395a:	4601      	mov	r1, r0
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	f000 b80b 	b.w	8003978 <_free_r>
 8003962:	bf00      	nop
 8003964:	20000164 	.word	0x20000164

08003968 <memset>:
 8003968:	4402      	add	r2, r0
 800396a:	4603      	mov	r3, r0
 800396c:	4293      	cmp	r3, r2
 800396e:	d100      	bne.n	8003972 <memset+0xa>
 8003970:	4770      	bx	lr
 8003972:	f803 1b01 	strb.w	r1, [r3], #1
 8003976:	e7f9      	b.n	800396c <memset+0x4>

08003978 <_free_r>:
 8003978:	b538      	push	{r3, r4, r5, lr}
 800397a:	4605      	mov	r5, r0
 800397c:	2900      	cmp	r1, #0
 800397e:	d045      	beq.n	8003a0c <_free_r+0x94>
 8003980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003984:	1f0c      	subs	r4, r1, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	bfb8      	it	lt
 800398a:	18e4      	addlt	r4, r4, r3
 800398c:	f000 f8b0 	bl	8003af0 <__malloc_lock>
 8003990:	4a1f      	ldr	r2, [pc, #124]	; (8003a10 <_free_r+0x98>)
 8003992:	6813      	ldr	r3, [r2, #0]
 8003994:	4610      	mov	r0, r2
 8003996:	b933      	cbnz	r3, 80039a6 <_free_r+0x2e>
 8003998:	6063      	str	r3, [r4, #4]
 800399a:	6014      	str	r4, [r2, #0]
 800399c:	4628      	mov	r0, r5
 800399e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039a2:	f000 b8a6 	b.w	8003af2 <__malloc_unlock>
 80039a6:	42a3      	cmp	r3, r4
 80039a8:	d90c      	bls.n	80039c4 <_free_r+0x4c>
 80039aa:	6821      	ldr	r1, [r4, #0]
 80039ac:	1862      	adds	r2, r4, r1
 80039ae:	4293      	cmp	r3, r2
 80039b0:	bf04      	itt	eq
 80039b2:	681a      	ldreq	r2, [r3, #0]
 80039b4:	685b      	ldreq	r3, [r3, #4]
 80039b6:	6063      	str	r3, [r4, #4]
 80039b8:	bf04      	itt	eq
 80039ba:	1852      	addeq	r2, r2, r1
 80039bc:	6022      	streq	r2, [r4, #0]
 80039be:	6004      	str	r4, [r0, #0]
 80039c0:	e7ec      	b.n	800399c <_free_r+0x24>
 80039c2:	4613      	mov	r3, r2
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	b10a      	cbz	r2, 80039cc <_free_r+0x54>
 80039c8:	42a2      	cmp	r2, r4
 80039ca:	d9fa      	bls.n	80039c2 <_free_r+0x4a>
 80039cc:	6819      	ldr	r1, [r3, #0]
 80039ce:	1858      	adds	r0, r3, r1
 80039d0:	42a0      	cmp	r0, r4
 80039d2:	d10b      	bne.n	80039ec <_free_r+0x74>
 80039d4:	6820      	ldr	r0, [r4, #0]
 80039d6:	4401      	add	r1, r0
 80039d8:	1858      	adds	r0, r3, r1
 80039da:	4282      	cmp	r2, r0
 80039dc:	6019      	str	r1, [r3, #0]
 80039de:	d1dd      	bne.n	800399c <_free_r+0x24>
 80039e0:	6810      	ldr	r0, [r2, #0]
 80039e2:	6852      	ldr	r2, [r2, #4]
 80039e4:	605a      	str	r2, [r3, #4]
 80039e6:	4401      	add	r1, r0
 80039e8:	6019      	str	r1, [r3, #0]
 80039ea:	e7d7      	b.n	800399c <_free_r+0x24>
 80039ec:	d902      	bls.n	80039f4 <_free_r+0x7c>
 80039ee:	230c      	movs	r3, #12
 80039f0:	602b      	str	r3, [r5, #0]
 80039f2:	e7d3      	b.n	800399c <_free_r+0x24>
 80039f4:	6820      	ldr	r0, [r4, #0]
 80039f6:	1821      	adds	r1, r4, r0
 80039f8:	428a      	cmp	r2, r1
 80039fa:	bf04      	itt	eq
 80039fc:	6811      	ldreq	r1, [r2, #0]
 80039fe:	6852      	ldreq	r2, [r2, #4]
 8003a00:	6062      	str	r2, [r4, #4]
 8003a02:	bf04      	itt	eq
 8003a04:	1809      	addeq	r1, r1, r0
 8003a06:	6021      	streq	r1, [r4, #0]
 8003a08:	605c      	str	r4, [r3, #4]
 8003a0a:	e7c7      	b.n	800399c <_free_r+0x24>
 8003a0c:	bd38      	pop	{r3, r4, r5, pc}
 8003a0e:	bf00      	nop
 8003a10:	200001ec 	.word	0x200001ec

08003a14 <_malloc_r>:
 8003a14:	b570      	push	{r4, r5, r6, lr}
 8003a16:	1ccd      	adds	r5, r1, #3
 8003a18:	f025 0503 	bic.w	r5, r5, #3
 8003a1c:	3508      	adds	r5, #8
 8003a1e:	2d0c      	cmp	r5, #12
 8003a20:	bf38      	it	cc
 8003a22:	250c      	movcc	r5, #12
 8003a24:	2d00      	cmp	r5, #0
 8003a26:	4606      	mov	r6, r0
 8003a28:	db01      	blt.n	8003a2e <_malloc_r+0x1a>
 8003a2a:	42a9      	cmp	r1, r5
 8003a2c:	d903      	bls.n	8003a36 <_malloc_r+0x22>
 8003a2e:	230c      	movs	r3, #12
 8003a30:	6033      	str	r3, [r6, #0]
 8003a32:	2000      	movs	r0, #0
 8003a34:	bd70      	pop	{r4, r5, r6, pc}
 8003a36:	f000 f85b 	bl	8003af0 <__malloc_lock>
 8003a3a:	4a23      	ldr	r2, [pc, #140]	; (8003ac8 <_malloc_r+0xb4>)
 8003a3c:	6814      	ldr	r4, [r2, #0]
 8003a3e:	4621      	mov	r1, r4
 8003a40:	b991      	cbnz	r1, 8003a68 <_malloc_r+0x54>
 8003a42:	4c22      	ldr	r4, [pc, #136]	; (8003acc <_malloc_r+0xb8>)
 8003a44:	6823      	ldr	r3, [r4, #0]
 8003a46:	b91b      	cbnz	r3, 8003a50 <_malloc_r+0x3c>
 8003a48:	4630      	mov	r0, r6
 8003a4a:	f000 f841 	bl	8003ad0 <_sbrk_r>
 8003a4e:	6020      	str	r0, [r4, #0]
 8003a50:	4629      	mov	r1, r5
 8003a52:	4630      	mov	r0, r6
 8003a54:	f000 f83c 	bl	8003ad0 <_sbrk_r>
 8003a58:	1c43      	adds	r3, r0, #1
 8003a5a:	d126      	bne.n	8003aaa <_malloc_r+0x96>
 8003a5c:	230c      	movs	r3, #12
 8003a5e:	6033      	str	r3, [r6, #0]
 8003a60:	4630      	mov	r0, r6
 8003a62:	f000 f846 	bl	8003af2 <__malloc_unlock>
 8003a66:	e7e4      	b.n	8003a32 <_malloc_r+0x1e>
 8003a68:	680b      	ldr	r3, [r1, #0]
 8003a6a:	1b5b      	subs	r3, r3, r5
 8003a6c:	d41a      	bmi.n	8003aa4 <_malloc_r+0x90>
 8003a6e:	2b0b      	cmp	r3, #11
 8003a70:	d90f      	bls.n	8003a92 <_malloc_r+0x7e>
 8003a72:	600b      	str	r3, [r1, #0]
 8003a74:	50cd      	str	r5, [r1, r3]
 8003a76:	18cc      	adds	r4, r1, r3
 8003a78:	4630      	mov	r0, r6
 8003a7a:	f000 f83a 	bl	8003af2 <__malloc_unlock>
 8003a7e:	f104 000b 	add.w	r0, r4, #11
 8003a82:	1d23      	adds	r3, r4, #4
 8003a84:	f020 0007 	bic.w	r0, r0, #7
 8003a88:	1ac3      	subs	r3, r0, r3
 8003a8a:	d01b      	beq.n	8003ac4 <_malloc_r+0xb0>
 8003a8c:	425a      	negs	r2, r3
 8003a8e:	50e2      	str	r2, [r4, r3]
 8003a90:	bd70      	pop	{r4, r5, r6, pc}
 8003a92:	428c      	cmp	r4, r1
 8003a94:	bf0d      	iteet	eq
 8003a96:	6863      	ldreq	r3, [r4, #4]
 8003a98:	684b      	ldrne	r3, [r1, #4]
 8003a9a:	6063      	strne	r3, [r4, #4]
 8003a9c:	6013      	streq	r3, [r2, #0]
 8003a9e:	bf18      	it	ne
 8003aa0:	460c      	movne	r4, r1
 8003aa2:	e7e9      	b.n	8003a78 <_malloc_r+0x64>
 8003aa4:	460c      	mov	r4, r1
 8003aa6:	6849      	ldr	r1, [r1, #4]
 8003aa8:	e7ca      	b.n	8003a40 <_malloc_r+0x2c>
 8003aaa:	1cc4      	adds	r4, r0, #3
 8003aac:	f024 0403 	bic.w	r4, r4, #3
 8003ab0:	42a0      	cmp	r0, r4
 8003ab2:	d005      	beq.n	8003ac0 <_malloc_r+0xac>
 8003ab4:	1a21      	subs	r1, r4, r0
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	f000 f80a 	bl	8003ad0 <_sbrk_r>
 8003abc:	3001      	adds	r0, #1
 8003abe:	d0cd      	beq.n	8003a5c <_malloc_r+0x48>
 8003ac0:	6025      	str	r5, [r4, #0]
 8003ac2:	e7d9      	b.n	8003a78 <_malloc_r+0x64>
 8003ac4:	bd70      	pop	{r4, r5, r6, pc}
 8003ac6:	bf00      	nop
 8003ac8:	200001ec 	.word	0x200001ec
 8003acc:	200001f0 	.word	0x200001f0

08003ad0 <_sbrk_r>:
 8003ad0:	b538      	push	{r3, r4, r5, lr}
 8003ad2:	4c06      	ldr	r4, [pc, #24]	; (8003aec <_sbrk_r+0x1c>)
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	4605      	mov	r5, r0
 8003ad8:	4608      	mov	r0, r1
 8003ada:	6023      	str	r3, [r4, #0]
 8003adc:	f7ff fcd0 	bl	8003480 <_sbrk>
 8003ae0:	1c43      	adds	r3, r0, #1
 8003ae2:	d102      	bne.n	8003aea <_sbrk_r+0x1a>
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	b103      	cbz	r3, 8003aea <_sbrk_r+0x1a>
 8003ae8:	602b      	str	r3, [r5, #0]
 8003aea:	bd38      	pop	{r3, r4, r5, pc}
 8003aec:	20000b24 	.word	0x20000b24

08003af0 <__malloc_lock>:
 8003af0:	4770      	bx	lr

08003af2 <__malloc_unlock>:
 8003af2:	4770      	bx	lr

08003af4 <_init>:
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af6:	bf00      	nop
 8003af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afa:	bc08      	pop	{r3}
 8003afc:	469e      	mov	lr, r3
 8003afe:	4770      	bx	lr

08003b00 <_fini>:
 8003b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b02:	bf00      	nop
 8003b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b06:	bc08      	pop	{r3}
 8003b08:	469e      	mov	lr, r3
 8003b0a:	4770      	bx	lr
